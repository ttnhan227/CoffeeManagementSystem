This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-08T04:50:28.474Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitattributes
.gitignore
.mvn/wrapper/maven-wrapper.properties
mvnw
mvnw.cmd
pom.xml
README.md
src/main/java/app/db/ViewDB.java
src/main/java/app/Main.java
src/main/java/app/utils/HelperMethods.java
src/main/java/app/utils/PasswordUtils.java
src/main/java/controller/admin/MainDashboardController.java
src/main/java/controller/admin/pages/CouponController.java
src/main/java/controller/admin/pages/HomeController.java
src/main/java/controller/admin/pages/orders/NewOrderController.java
src/main/java/controller/admin/pages/orders/UserOrdersController.java
src/main/java/controller/admin/pages/orders/UserOrdersController.java~
src/main/java/controller/admin/pages/orders/ViewOrderController.java
src/main/java/controller/admin/pages/products/AddProductController.java
src/main/java/controller/admin/pages/products/CategoryController.java
src/main/java/controller/admin/pages/products/EditProductController.java
src/main/java/controller/admin/pages/products/ProductsController.java
src/main/java/controller/admin/pages/SettingsController.java
src/main/java/controller/admin/pages/users/CreateUserController.java
src/main/java/controller/admin/pages/users/EditUserController.java
src/main/java/controller/admin/pages/users/UsersController.java
src/main/java/controller/admin/pages/ViewOrderController.java~
src/main/java/controller/LoginController.java
src/main/java/controller/RegisterController.java
src/main/java/controller/users/pages/orders/NewOrderController.java
src/main/java/controller/users/pages/orders/UserOrdersController.java
src/main/java/controller/users/pages/orders/ViewOrderController.java
src/main/java/controller/users/pages/products/AddProductController.java
src/main/java/controller/users/pages/products/CategoryController.java
src/main/java/controller/users/pages/products/EditProductController.java
src/main/java/controller/users/pages/products/ProductsController.java
src/main/java/controller/users/pages/UserHomeController.java
src/main/java/controller/users/UserMainDashboardController.java
src/main/java/controller/UserSessionController.java
src/main/java/model/Categories.java
src/main/java/model/Coupon.java
src/main/java/model/Customer.java
src/main/java/model/Datasource.java
src/main/java/model/Employee.java~
src/main/java/model/Order.java
src/main/java/model/OrderDetail.java
src/main/java/model/Product.java
src/main/java/model/Table.java
src/main/java/model/User.java
src/main/java/module-info.java
src/main/resources/view/admin/main-dashboard.fxml
src/main/resources/view/admin/main-dashboard.fxml~
src/main/resources/view/admin/pages/coupon.fxml
src/main/resources/view/admin/pages/home/home.fxml
src/main/resources/view/admin/pages/orders/newOrder.fxml
src/main/resources/view/admin/pages/orders/orders.fxml
src/main/resources/view/admin/pages/orders/viewOrder.fxml
src/main/resources/view/admin/pages/products/add-product.fxml
src/main/resources/view/admin/pages/products/categories.fxml
src/main/resources/view/admin/pages/products/edit-product.fxml
src/main/resources/view/admin/pages/products/product-card.fxml
src/main/resources/view/admin/pages/products/product-card.fxml~
src/main/resources/view/admin/pages/products/products.fxml
src/main/resources/view/admin/pages/settings/settings.fxml
src/main/resources/view/admin/pages/users/add-user.fxml
src/main/resources/view/admin/pages/users/edit-user.fxml
src/main/resources/view/admin/pages/users/employees.fxml~
src/main/resources/view/admin/pages/users/users.fxml
src/main/resources/view/login.fxml
src/main/resources/view/register.fxml
src/main/resources/view/register.fxml~
src/main/resources/view/resources/css/bootstrap3.css
src/main/resources/view/resources/css/dashboard.css
src/main/resources/view/resources/css/form.css
src/main/resources/view/resources/css/login.css
src/main/resources/view/resources/css/product.css
src/main/resources/view/users/main-dashboard.fxml
src/main/resources/view/users/pages/home/home.fxml
src/main/resources/view/users/pages/orders/newOrder.fxml
src/main/resources/view/users/pages/orders/orders.fxml
src/main/resources/view/users/pages/orders/viewOrder.fxml
src/main/resources/view/users/pages/products/add-product.fxml
src/main/resources/view/users/pages/products/categories.fxml
src/main/resources/view/users/pages/products/edit-product.fxml
src/main/resources/view/users/pages/products/product-card.fxml
src/main/resources/view/users/pages/products/products.fxml

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/
src/main/java/app/db/store_manager.sqlite


### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###

================
File: .mvn/wrapper/maven-wrapper.properties
================
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.5/apache-maven-3.8.5-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

================
File: mvnw.cmd
================
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>coffeeapp</groupId>
    <artifactId>CoffeeManagementSystem</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>CoffeeManagementSystem</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.0</junit.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.47.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>22-ea+11</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>22-ea+11</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.9</version>  <!-- You can update this version to the latest stable one -->
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.9</version>  <!-- For simple logging implementation -->
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>22</source>
                    <target>22</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>
                                app.Main
                            </mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

================
File: README.md
================
Coffee Management System App

- first commit

================
File: src/main/java/app/db/ViewDB.java
================
package app.db;

import java.sql.*;

public class ViewDB {

    // Database name and connection string
    public static final String DB_NAME = "store_manager.sqlite";
    public static final String CONNECTION_STRING = "jdbc:sqlite:"
            + System.getProperty("user.dir")
            + "/src/main/java/app/db/"
            + DB_NAME;

    public static void main(String[] args) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            // 1. Establish a connection to the database
            conn = DriverManager.getConnection(CONNECTION_STRING);
            System.out.println("Connection to SQLite has been established.");

            // 2. Create a statement to execute SQL queries
            stmt = conn.createStatement();

            // 3. Execute a query to retrieve data from the products table
            String sql = "SELECT * FROM products"; // Modify this if your table name is different
            rs = stmt.executeQuery(sql);

            // 4. Process the ResultSet
            System.out.println("Product List:");
            while (rs.next()) {
                // Assuming the products table has columns: id, name, and price
                int id = rs.getInt("id"); // Change this if your column names are different
                String name = rs.getString("name");
                double price = rs.getDouble("price");

                // Print the product details
                System.out.printf("ID: %d, Name: %s, Price: %.2f%n", id, name, price);
            }
        } catch (SQLException e) {
            System.out.println("Error occurred: " + e.getMessage());
        } finally {
            // Close resources in reverse order
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }
}

================
File: src/main/java/app/Main.java
================
package app;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import model.Datasource;

public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Parent root = FXMLLoader.load(getClass().getResource("/view/login.fxml"));
        primaryStage.setTitle("Coffee Store System");
        primaryStage.getIcons().add(new Image(getClass().getResource("/view/resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png").toString()));

        primaryStage.setScene(new Scene(root, 800, 600));
        primaryStage.show();
    }


    @Override
    public void init() throws Exception {
        super.init();
        if (!Datasource.getInstance().open()) {
            System.out.println("FATAL ERROR: Couldn't connect to database");
            Platform.exit();
        }
    }

    @Override
    public void stop() throws Exception {
        super.stop();
        Datasource.getInstance().close();
    }


}

================
File: src/main/java/app/utils/HelperMethods.java
================
package app.utils;

import javafx.scene.control.Alert;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HelperMethods {

    public static boolean validateFullName(String fullName) {

        Matcher matcher = Pattern.compile("^[A-Z][a-zA-Z]{3,}(?: [A-Z][a-zA-Z]*){0,2}$", Pattern.CASE_INSENSITIVE).matcher(fullName);
        return matcher.find();
    }

    public static boolean validateUsername(String username) {
//      ^                       # start of string
//      [a-zA-Z]                # lowercase or uppercase ASCII letters
//      \\w{4, 29}              # remaining items are word items, which includes the underscore,
//      until it reaches the end and that is represented with $
//      {4, 29}                 # 5-30 character constraint given, minus the predefined first character
        Matcher matcher = Pattern.compile("^[A-Za-z]\\w{4,29}$", Pattern.CASE_INSENSITIVE).matcher(username);
        return matcher.find();
    }

    public static boolean validateEmail(String emailStr) {
        Matcher matcher = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE).matcher(emailStr);
        return matcher.find();
    }

    public static boolean validatePassword(String password) {

        return password.matches("^.{6,16}$");
    }

    public static boolean validateProductQuantity(String integer) {
        return integer.matches("-?(0|[1-9]\\d*)");
    }

    public static boolean validateProductPrice(String productPrice) {
        return productPrice.matches("^[0-9]+(|\\.)[0-9]+$");
    }

    public static void alertBox(String infoMessage, String headerText, String title) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setContentText(String.valueOf(infoMessage));
        alert.setTitle(title);
        alert.setHeaderText(headerText);
        alert.showAndWait();
    }

}

================
File: src/main/java/app/utils/PasswordUtils.java
================
package app.utils;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;

/**
 * This class provides helper methods to:
 * Encode secure user password into Base64;
 * Generate Salt value;
 * Use password-based encryption to encrypt user password;
 * Verify entered password.
 * {@link}          https://www.appsdeveloperblog.com/encrypt-user-password-example-java/
 */
public class PasswordUtils {

    private static final Random RANDOM = new SecureRandom();
    private static final String ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static final int ITERATIONS = 10000;
    private static final int KEY_LENGTH = 256;

    /**
     * This method generates the salt.
     * The generated value can be stored in the database.
     * {@link}              https://www.appsdeveloperblog.com/encrypt-user-password-example-java/
     *
     * @param length Accepts an integer as the length of Salt to be generated.
     * @return String       Returns string with the generated salt.
     */
    public static String getSalt(int length) {
        StringBuilder returnValue = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            returnValue.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));
        }
        return new String(returnValue);
    }

    /**
     * This method generates the salt.
     * The generated value can be stored in the database.
     * {@link}              https://www.appsdeveloperblog.com/encrypt-user-password-example-java/
     *
     * @param password User entered password value.
     * @param salt     Generated salt value.
     * @return byte[]       Returns byte array.
     */
    public static byte[] hash(char[] password, byte[] salt) {
        PBEKeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
        Arrays.fill(password, Character.MIN_VALUE);
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            return skf.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new AssertionError("Error while hashing a password: " + e.getMessage(), e);
        } finally {
            spec.clearPassword();
        }
    }

    /**
     * This method generates the secure password.
     * {@link}              https://www.appsdeveloperblog.com/encrypt-user-password-example-java/
     *
     * @param password User entered password value.
     * @param salt     Generated salt value.
     * @return String       Returns the secure password string.
     */
    public static String generateSecurePassword(String password, String salt) {
        String returnValue = null;

        byte[] securePassword = hash(password.toCharArray(), salt.getBytes());

        returnValue = Base64.getEncoder().encodeToString(securePassword);

        return returnValue;
    }

    /**
     * This method verifies if the entered user password is the same as the one stored in the database.
     * {@link}                  https://www.appsdeveloperblog.com/encrypt-user-password-example-java/
     *
     * @param providedPassword User entered password value.
     * @param securedPassword  Previously generated and saved password on the database.
     * @param salt             Previously generated and saved salt value.
     * @return boolean          Returns true or false.
     */
    public static boolean verifyUserPassword(String providedPassword, String securedPassword, String salt) {
        boolean returnValue = false;

        // Generate New secure password with the same salt
        String newSecurePassword = generateSecurePassword(providedPassword, salt);

        // Check if two passwords are equal
        returnValue = newSecurePassword.equalsIgnoreCase(securedPassword);

        return returnValue;
    }

//    String myPassword = "1";
//
//    // Generate Salt. The generated value can be stored in DB.
//    String salt = PasswordUtils.getSalt(30);
//
//    // Protect user's password. The generated value can be stored in DB.
//    String mySecurePassword = PasswordUtils.generateSecurePassword(myPassword, salt);
//
//    // Print out protected password
//        System.out.println("My secure password = " + mySecurePassword);
//        System.out.println("Salt value = " + salt);
}

================
File: src/main/java/controller/admin/MainDashboardController.java
================
package controller.admin;

import controller.UserSessionController;
import controller.admin.pages.CouponController;
import controller.admin.pages.HomeController;
import controller.admin.pages.users.UsersController;
import controller.admin.pages.products.ProductsController;
import controller.admin.pages.orders.NewOrderController;
import controller.admin.pages.orders.ViewOrderController;
import controller.admin.pages.orders.UserOrdersController;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import model.Order;
import model.Datasource;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

public class MainDashboardController implements Initializable {
    @FXML
    public Button btnHome;
    @FXML
    public Button btnProducts;
    @FXML
    public Button btnCustomers;
    @FXML
    public Button btnOrders;
    @FXML
    public Button btnSettings;
    @FXML
    public Button lblLogOut;
    @FXML
    public AnchorPane dashHead;
    @FXML
    private StackPane dashContent;
    @FXML
    private Label lblUsrName;
    public Button btnNewOrder;

    public void btnHomeOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/home/home.fxml");
        HomeController homeController = fxmlLoader.getController();
        homeController.getDashboardProdCount();
        homeController.getDashboardCostCount();
    }

    public void btnProductsOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/products/products.fxml");
        ProductsController controller = fxmlLoader.getController();
        controller.listProducts();
    }

    public void btnCustomersOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/users/users.fxml");
        UsersController controller = fxmlLoader.getController();
        controller.listUsers();
    }

    public void btnSettingsOnClick(ActionEvent actionEvent) {
        loadFxmlPage("/view/admin/pages/settings/settings.fxml");
    }

    public void btnLogOutOnClick(ActionEvent actionEvent) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setHeaderText("Are you sure that you want to log out?");
        alert.setTitle("Log Out?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.get() == ButtonType.OK) {
            UserSessionController.cleanUserSession();
            Stage dialogStage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
            dialogStage.close();
            Scene scene = new Scene(FXMLLoader.load(getClass().getResource("/view/login.fxml")));
            dialogStage.setScene(scene);
            dialogStage.show();
        }
    }

    private FXMLLoader loadFxmlPage(String view_path) {
        FXMLLoader fxmlLoader = new FXMLLoader();
        try {
            fxmlLoader.load(getClass().getResource(view_path).openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        AnchorPane root = fxmlLoader.getRoot();
        dashContent.getChildren().clear();
        dashContent.getChildren().add(root);

        return fxmlLoader;
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        lblUsrName.setText(UserSessionController.getUserFullName());

        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/home/home.fxml");
        HomeController homeController = fxmlLoader.getController();
        homeController.getDashboardProdCount();
        homeController.getDashboardCostCount();
    }

    public void btnOrdersOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/orders/orders.fxml");
        UserOrdersController controller = fxmlLoader.getController();
        controller.setAdminMainDashboardController(this);
    }

    public void onClickNewOrder(ActionEvent actionEvent) throws IOException {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/orders/newOrder.fxml");
        NewOrderController controller = fxmlLoader.getController();
        controller.setAdminMainDashboardController(this);
    }

    public void viewOrderDetail(ActionEvent actionEvent, Order order) throws IOException {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/orders/viewOrder.fxml");
        ViewOrderController controller = fxmlLoader.getController();
        controller.setAdminMainDashboardController(this); // Correctly set the dashboard controller
        controller.setOrder(order);

        controller.orderIdField.setText(String.valueOf(order.getId()));
        controller.employeeField.setText(Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname());
        if (order.getCustomerID() == null) {
            controller.customerField.setText("");
        } else {
            controller.customerField.setText(Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName());
        }
        if (order.getTableID() == null) {
            controller.tableIdField.setText("Take Away");
        } else {
            controller.tableIdField.setText(String.valueOf(order.getTableID()));
            controller.tableCapacity.setText(String.valueOf(Datasource.getInstance().getOneTable(order.getTableID()).getCapacity()));
        }
        if (order.getCouponID() == null) {
            controller.couponIdField.setText("");
        } else {
            controller.couponIdField.setText(String.valueOf(order.getCouponID()));
        }

        controller.setOrderDetailsList(Datasource.getInstance().searchAllOrderDetailByOrderID(order.getId()));
        controller.loadProductList();
        controller.totalText.setText(String.valueOf(order.getTotal()));
        controller.finalText.setText(String.valueOf(order.getFin()));
        controller.discountText.setText(String.valueOf(order.getDiscount()) + "%");
    }

    public void btnCouponOnClick() {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/admin/pages/coupon.fxml");
        CouponController controller = fxmlLoader.getController();
        controller.setMainDashboardController(this);
    }
}

================
File: src/main/java/controller/admin/pages/CouponController.java
================
package controller.admin.pages;

import app.utils.HelperMethods;
import controller.admin.MainDashboardController;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.util.StringConverter;
import model.Datasource;

import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Random;
import java.util.ResourceBundle;

public class CouponController implements Initializable {

    public DatePicker expiryPicker;
    public TextField discountField;
    public Button generateBtn;
    public Label statusLabel;

    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    private MainDashboardController mainDashboardController;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        statusLabel.setText("");
        loadDatePicker();
    }

    private void loadDatePicker(){
        expiryPicker.setConverter(new StringConverter<>() {
            @Override
            public String toString(LocalDate date) {
                return date != null ? dateFormatter.format(date) : "";
            }

            @Override
            public LocalDate fromString(String string) {
                if (string != null && !string.isEmpty()) {
                    try {
                        return LocalDate.parse(string, dateFormatter);
                    } catch (DateTimeParseException e) {
                        //statusLabel.setText("Invalid date format, please use dd-MM-yyyy.");
                        return null;
                    }
                }
                return null;
            }
        });

        expiryPicker.focusedProperty().addListener((obs, wasFocused, isFocused) -> {
            if (!isFocused) {
                validateDateInput();
            }
            else {
                //expiryPicker.setValue(null);
                statusLabel.setText("");
            }
        });

        discountField.focusedProperty().addListener((obs, wasFocused, isFocused) -> {
            if(isFocused){
                if(statusLabel.getText().equals("Please fill in all details.") ||
                        statusLabel.getText().equals("Discount must be > 0 and <= 80.") ||
                        statusLabel.getText().equals("Discount must be a valid integer.")){
                    statusLabel.setText("");
                }
            }
        });
    }

    private boolean validateDateInput() {
        String inputDate = expiryPicker.getEditor().getText();
        try {
            LocalDate parsedDate = LocalDate.parse(inputDate, dateFormatter);
            expiryPicker.setValue(parsedDate);
            statusLabel.setText("");
            return true;
        } catch (DateTimeParseException e) {
            //expiryPicker.setValue(null);
            statusLabel.setText("Invalid date format, please use dd-MM-yyyy.");
            return false;
        }
    }

    @FXML
    private void generateCoupon(){
        LocalDate expiryDate = expiryPicker.getValue();
        String discountStr = discountField.getText();

        if(!validateDateInput()){
            return;
        }

        if (expiryDate == null || discountStr.isEmpty()) {
            statusLabel.setText("Please fill in all details.");
            return;
        }

        if (expiryDate.isBefore(LocalDate.now())) {
            statusLabel.setText("Expiry date must be in the future.");
            return;
        }

        try {
            int discount = Integer.parseInt(discountStr);

            // Check if discount is between 1 and 79
            if (discount <= 0 || discount > 80) {
                statusLabel.setText("Discount must be > 0 and <= 80.");
                return;
            }

            int couponId = generateUnique8DigitId();
            Datasource.getInstance().saveToDatabase(couponId, expiryDate.format(dateFormatter), discount);

            statusLabel.setText("Coupon saved with ID: " + couponId);
            HelperMethods.alertBox("Insert coupon to Database successfully\nNew coupon id: " + couponId, "", "DB");
            mainDashboardController.btnHomeOnClick(new ActionEvent());
        } catch (NumberFormatException e) {
            statusLabel.setText("Discount must be a valid integer.");
        } catch (SQLException e) {
            statusLabel.setText("Database error: " + e.getMessage());
        }
    }

    private int generateUnique8DigitId() throws SQLException {
        Random random = new Random();
        int couponId;

        do {
            couponId = 10000000 + random.nextInt(90000000);  // Generates an 8-digit ID between 10000000 and 99999999
        } while (Datasource.getInstance().isExistCouponId(couponId));

        return couponId;
    }

    public void setMainDashboardController(MainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }
}

================
File: src/main/java/controller/admin/pages/HomeController.java
================
package controller.admin.pages;

import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Label;
import model.Datasource;

public class HomeController {

    @FXML
    public Label productsCount;
    @FXML
    public Label customersCount;
    @FXML
    public LineChart<String, Number> dataChart;

    @FXML
    public void initialize() {
        // Initialize the chart with product and customer data
        setupLineChart();
        // Load product and customer counts
        getDashboardProdCount();
        getDashboardCostCount();
    }

    private void setupLineChart() {
        XYChart.Series<String, Number> productSeries = new XYChart.Series<>();
        productSeries.setName("Products");

        XYChart.Series<String, Number> customerSeries = new XYChart.Series<>();
        customerSeries.setName("Customers");

        // Adding placeholder values (0) initially
        productSeries.getData().add(new XYChart.Data<>("Product Count", 0));
        customerSeries.getData().add(new XYChart.Data<>("Employee Count", 0));

        // Add the series to the chart
        dataChart.getData().addAll(productSeries, customerSeries);
    }

    public void getDashboardProdCount() {
        Task<Integer> getDashProdCount = new Task<Integer>() {
            @Override
            protected Integer call() {
                return Datasource.getInstance().countAllProducts();
            }
        };

        getDashProdCount.setOnSucceeded(e -> {
            int productCount = getDashProdCount.valueProperty().getValue();
            productsCount.setText(String.valueOf(productCount));

            // Update the chart with actual product count
            XYChart.Series<String, Number> productSeries = dataChart.getData().get(0); // Products series is the first one
            productSeries.getData().clear(); // Clear placeholder data
            productSeries.getData().add(new XYChart.Data<>("Product Count", productCount));
        });

        new Thread(getDashProdCount).start();
    }

    public void getDashboardCostCount() {
        Task<Integer> getDashCostCount = new Task<Integer>() {
            @Override
            protected Integer call() {
                return Datasource.getInstance().countAllCustomers();
            }
        };

        getDashCostCount.setOnSucceeded(e -> {
            int customerCount = getDashCostCount.valueProperty().getValue();
            customersCount.setText(String.valueOf(customerCount));

            // Update the chart with actual customer count
            XYChart.Series<String, Number> customerSeries = dataChart.getData().get(1); // Customers series is the second one
            customerSeries.getData().clear(); // Clear placeholder data
            customerSeries.getData().add(new XYChart.Data<>("Employee Count", customerCount));
        });

        new Thread(getDashCostCount).start();
    }
}

================
File: src/main/java/controller/admin/pages/orders/NewOrderController.java
================
package controller.admin.pages.orders;

import app.utils.HelperMethods;
import controller.UserSessionController;
import controller.admin.MainDashboardController;
import javafx.application.Platform;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import model.*;

import java.net.URL;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

public class NewOrderController implements Initializable {
    public TextField eName;
    public TextField dateField;
    public ComboBox<Integer> tableComboBox;
    public HBox couponHBox;
    public TextField couponField;
    public Button checkCouponBtn;
    public Button resetCouponBtn;
    public TextField searchField;
    public ListView<String> suggestionList;
    public TextField idField;
    public TextField productNameField;
    public Spinner<Integer> quantitySpinner;
    public TextField totalField;
    public HBox searchHBox;
    public Button addBtn;
    public TableView<Product> orderDetailView;
    //public TableColumn<Product, String> imageColumn;
    public TableColumn<Product, String> categoryColumn;
    public TableColumn<Product, String> nameColumn;
    public TableColumn<Product, Double> priceColumn;
    public TableColumn<Product, Integer> quantityColumn;
    public TableColumn<Product, Double> totalColumn;
    public HBox productHBox;
    public HBox paymentHBox;
    public Text totalText;
    public Text finalText;
    public Text discountText;
    public Button createOrderBtn;
    public CheckBox checkTakeAway;
    public TextField customerNameField;

    private MainDashboardController mainDashboardController;

    Text valid = new Text("valid");
    Text invalid = new Text("invalid");
    Text noStock = new Text("not enough stock");

    ObservableList<String> suggestions = FXCollections.observableArrayList(getProductNameList());

    //List<Product> productList = new ArrayList<>();
    ObservableList<Product> productList = FXCollections.observableArrayList();

    Product tempProduct = new Product();
    ObservableList<Integer> quantities = FXCollections.observableArrayList();
    ObservableList<Coupon> coupons = FXCollections.observableArrayList();

    Table order_table = new Table();
    Customer customer = new Customer();
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        userNameAndDateLoader();
        tableComboBoxLoader();
        couponLoader();
        suggestionListLoader();
        productDetailLoader();
        tableLoader();
        paymentBoxLoader();
        checkBoxLoader();
    }

    private void userNameAndDateLoader(){
        order_table = null;
        customer = null;
        tempProduct = null;
        String username = UserSessionController.getUserFullName();
        eName.setText(username);
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formatted_date = today.format(formatter);
        dateField.setText(formatted_date);
    }

    private void tableComboBoxLoader(){
        List<Integer> list = Datasource.getInstance().getAllTableID();
        ObservableList<Integer> options = FXCollections.observableArrayList(list);
        tableComboBox.setItems(options);
        tableComboBox.valueProperty().addListener((obs, oldVal, newVal) ->{
                if(newVal != null){
                    order_table = Datasource.getInstance().getOneTable(newVal);
                    checkTakeAway.setSelected(false);
                }
            }
        );
    }

    @FXML
    private boolean checkCoupon(){
        if(couponHBox.getChildren().contains(valid)){
            couponHBox.getChildren().remove(valid);
        }
        if(couponHBox.getChildren().contains(invalid)){
            couponHBox.getChildren().remove(invalid);
        }
        List<Coupon> list = Datasource.getInstance().getAllCoupon();
        String cf = couponField.getText();
        for(Coupon coupon: list){
            if(String.valueOf(coupon.getId()).equals(cf)){
                if(!checkExpire(coupon.getExpiry())){
                    valid.setText("valid");
                    valid.setFill(Color.GREEN);
                    valid.setFont(new Font(15));
                    couponHBox.getChildren().add(valid);
                    couponField.setEditable(false);
                    coupons.clear();
                    coupons.add(coupon);
                    return true;
                }
                else{
                    invalid.setText("coupon expired");
                    invalid.setFill(Color.RED);
                    invalid.setFont(new Font(15));
                    couponHBox.getChildren().add(invalid);
                    coupons.clear();
                    return false;
                }
            }
        }

        invalid.setText("invalid");
        invalid.setFill(Color.RED);
        invalid.setFont(new Font(15));
        couponHBox.getChildren().add(invalid);
        coupons.clear();
        return false;
    }

    @FXML
    private boolean resetCoupon(){
        if(couponHBox.getChildren().contains(valid)){
            couponHBox.getChildren().remove(valid);
        }
        if(couponHBox.getChildren().contains(invalid)){
            couponHBox.getChildren().remove(invalid);
        }
        couponField.setText("");
        couponField.setEditable(true);
        coupons.clear();
        return true;
    }

    private boolean checkExpire(String expiry){
        //System.out.println(expiry);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDate expiryDate = LocalDate.parse(expiry, formatter);
        LocalDate today = LocalDate.now();
        return expiryDate.isBefore(today);
        //return false;
    }

    private List<String> getProductNameList(){
        List<Product> list = Datasource.getInstance().getAllProducts(Datasource.ORDER_BY_NONE);
        List<String> nameList = new ArrayList<>();
        for(Product product: list){
            if(!product.isDisabled()){
                nameList.add(product.getName());
            }
        }
        return nameList;
    }

    private void couponLoader(){
        couponField.textProperty().addListener(((observableValue, oldValue, newValue) ->{
            if(couponHBox.getChildren().contains(valid)){
                couponHBox.getChildren().remove(valid);
            }
            if(couponHBox.getChildren().contains(invalid)){
                couponHBox.getChildren().remove(invalid);
            }
        } ));
    }

    private void suggestionListLoader(){
        suggestionList.setVisible(false); // Initially hide the suggestions list
        //suggestionList.setPrefHeight(100); // Set a preferred height for the suggestion list
        suggestionList.prefWidthProperty().bind(searchField.widthProperty()); // Bind width to searchField
        //suggestionList.setItems(suggestions);
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            if(searchHBox.getChildren().contains(invalid)){
                searchHBox.getChildren().remove(invalid);
            }
            if (newValue.isEmpty()) {
                suggestionList.setVisible(false);
            } else {
                // Filter suggestions
                List<String> filteredSuggestions = suggestions.stream()
                        .filter(s -> s.toLowerCase().contains(newValue.toLowerCase()))
                        .toList();
                ObservableList<String> inputList = FXCollections.observableArrayList(filteredSuggestions);

                if (!filteredSuggestions.isEmpty()) {
                    suggestionList.setItems(inputList);
                    suggestionList.setVisible(true);
                } else {
                    suggestionList.setVisible(false);
                }

                // Update position of the suggestion list to be directly below the searchField
                //suggestionList.setTranslateX(searchField.getLayoutX());
                //suggestionList.setTranslateY(searchField.getLayoutY() + searchField.getHeight());
            }
        });

        // Handle selection from the suggestions list
        suggestionList.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                searchField.setText(newValue);
                searchField.positionCaret(searchField.getText().length());
                suggestionList.setVisible(false);// Hide suggestions after selection

                Platform.runLater(() -> {
                    suggestionList.getSelectionModel().clearSelection();
                    onClickSearch();
                });
            }
        });
    }

    @FXML
    private void onClickSearch(){
        if(productHBox.getChildren().contains(invalid) || productHBox.getChildren().contains(noStock)){
            productHBox.getChildren().remove(invalid);
            productHBox.getChildren().remove(noStock);
        }
        String searchName = searchField.getText();
        tempProduct = Datasource.getInstance().searchOneProductByName(searchName);
        if(tempProduct != null && !tempProduct.isDisabled()){
            if(tempProduct.getQuantity() == 0){
                invalid.setText("Product has no stock remain");
                invalid.setFill(Color.RED);
                searchHBox.getChildren().add(invalid);
                return;
            }
            quantitySpinner.setDisable(false); // Add this line
            idField.setText(String.valueOf(tempProduct.getId()));
            productNameField.setText(tempProduct.getName());
            SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, tempProduct.getQuantity(), 1);
            quantitySpinner.setValueFactory(spinnerValue);
            searchField.setText(""); // Add this line
        }
        else if(tempProduct == null || tempProduct.isDisabled()){
            invalid.setText("No product found or product is disabled");
            invalid.setFill(Color.RED);
            searchHBox.getChildren().add(invalid);
        }
    }

    private void productDetailLoader(){
        if(tempProduct == null){ // Add this initial check
            SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,999,0);
            quantitySpinner.setValueFactory(spinnerValue);
            totalField.setText("0");
            quantitySpinner.setDisable(true);
        }

        quantitySpinner.valueProperty().addListener(new ChangeListener<Integer>() {
            @Override
            public void changed(ObservableValue<? extends Integer> observable, Integer oldValue, Integer newValue) {
                if(tempProduct == null){
                    SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,999,0);
                    quantitySpinner.setValueFactory(spinnerValue);
                    totalField.setText("0");
                    quantitySpinner.setDisable(true);
                }
                else{
                    double total = newValue * tempProduct.getPrice();
                    DecimalFormat formattedTotal = new DecimalFormat("#.##");
                    String formattedValue = formattedTotal.format(total);
                    totalField.setText(formattedValue);
                    quantitySpinner.setDisable(false);
                }
            }
        });
    }

    private void tableLoader(){
        //imageColumn.setCellValueFactory(new PropertyValueFactory<>("image"));
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        quantityColumn.setCellValueFactory(cellData -> {
            // Use the row index to get the corresponding quantity
            int index = orderDetailView.getItems().indexOf(cellData.getValue());
            return new SimpleIntegerProperty(getQuantity(index)).asObject();
        });
        totalColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            int index = orderDetailView.getItems().indexOf(product);
            double total = product.getPrice() * getQuantity(index);
            DecimalFormat format = new DecimalFormat("#.##");
            String formattedString = format.format(total);
            total = Double.parseDouble(formattedString);
            return new SimpleDoubleProperty(total).asObject();
        });
        categoryColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            String category = Datasource.getInstance().getCategoryName(product.getCategory_id());
            return new SimpleStringProperty(category);
        });
        addActionColumn();
    }

    @FXML
    private void addBtnClick(){
        if(tempProduct == null){
            return;
        }
        boolean check = false;
        for(Product product : productList){
            if(tempProduct.getName().equals(product.getName())){
                int index = productList.indexOf(product);
                quantities.set(index, quantities.get(index)+quantitySpinner.getValue());
                if(quantities.get(index) > product.getQuantity()){
                    quantities.set(index, product.getQuantity());
                    //invalid.setText("Not enough stock to add");
                    noStock.setFill(Color.RED);
                    productHBox.getChildren().add(noStock);
                }
                check = true;
            }
        }
        if(!check){
            productList.add(tempProduct);
            quantities.add(quantitySpinner.getValue());
        }
        orderDetailView.setItems(productList);
        tempProduct = null;
        idField.setText("");
        productNameField.setText("");
        SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.ListSpinnerValueFactory<>(
                FXCollections.observableArrayList(0));
        quantitySpinner.setValueFactory(spinnerValue);
        totalField.setText("0");
        orderDetailView.refresh();
    }

    private void addActionColumn(){
        TableColumn<Product, Void> actionColumn = new TableColumn<>("Action");
        actionColumn.setCellFactory(col -> new TableCell<Product, Void>() {
            private final Button editButton = new Button("Edit");
            private final Button deleteButton = new Button("Delete");

            {
                // Set the action for the Edit button
                editButton.setOnAction(e -> {
                    Product product = getTableView().getItems().get(getIndex());
                    System.out.println("Edit: " + product.getName());
                    searchField.setText(product.getName());
                    onClickSearch();
                    Platform.runLater(() -> {
                        quantitySpinner.getValueFactory().setValue(quantities.get(getIndex()));
                        suggestionList.setVisible(false);
                        productList.remove(getIndex());
                        quantities.remove(getIndex());
                    });
                });

                // Set the action for the Delete button
                deleteButton.setOnAction(e -> {
                    Product product = getTableView().getItems().get(getIndex());
                    System.out.println("Delete: " + product.getName());
                    // Add your delete logic here
                    //getTableView().getItems().remove(product);
                    productList.remove(getIndex());
                    quantities.remove(getIndex());
                    //System.out.println(getIndex());
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    // Add buttons to the cell
                    HBox hbox = new HBox(editButton, deleteButton);
                    setGraphic(hbox);
                }
            }
        });
        actionColumn.setMinWidth(200);  // Changed from 100
        actionColumn.setPrefWidth(300); // Changed from 150
        actionColumn.setMaxWidth(5000);
        orderDetailView.getColumns().add(actionColumn);
    }

    private int getQuantity(int index) {
        return quantities.get(index);
    }

    private void paymentBoxLoader(){
        totalText.setText("");
        finalText.setText("0");
        discountText.setText("0");
        ListChangeListener<Object> changeListener = change -> {
            while (change.next()) {
                Platform.runLater(() -> {
                    double total = 0;
                    double fin = 0;
                    double temp = 0;
                    double discount = 0;
                    if (couponField.getText().isEmpty() || coupons.isEmpty()) {
                        discount = 0;
                    } else {
                        //int couponID = Integer.parseInt(couponField.getText());
                        discount = (double) coupons.getFirst().getDiscount() / 100;
                    }
                    DecimalFormat format = new DecimalFormat("#.##");
                    for (int i = 0; i < productList.size(); i++) {
                        temp = productList.get(i).getPrice() * quantities.get(i);
                        total += temp;
                    }
                    fin = total * (1 - discount);

                    String formattedString = format.format(total);
                    if(discount != 0){
                        totalText.setText(formattedString);
                        totalText.setVisible(true);
                    }
                    else{
                        totalText.setText(formattedString);
                        totalText.setVisible(false);
                    }

                    formattedString = format.format(fin);
                    finalText.setText(String.valueOf(formattedString));

                    //formattedString = format.format(discount);
                    discountText.setText(String.valueOf(discount * 100) + "%");
                });
            }
        };
        productList.addListener(changeListener);
        quantities.addListener(changeListener);
        coupons.addListener(changeListener);
    }

    private void checkBoxLoader(){
        checkTakeAway.setOnAction(event -> {
            if (checkTakeAway.isSelected()) {
                //System.out.println("enabled");
                order_table = null;
                tableComboBox.setDisable(true);
                tableComboBox.setValue(null);
            } else {
                //System.out.println("disabled");
                tableComboBox.setDisable(false);
            }
        });
        Platform.runLater(() -> {
            checkTakeAway.setSelected(true);
        });

    }

    @FXML
    private void createClick() throws SQLException {
        Coupon coupon = new Coupon();
        double discount = 0;
        if(!coupons.isEmpty()){
            coupon = coupons.getFirst();
            discount = coupon.getDiscount();
        }
        else{
            coupon = null;
        }

        if(!productList.isEmpty()){
            Datasource.getInstance().createOrderWithDetails(
                    dateField.getText(),
                    customer,
                    order_table,
                    coupon,
                    productList,
                    quantities,
                    Double.parseDouble(totalText.getText()),
                    discount,
                    Double.parseDouble(finalText.getText())
            );
            System.out.println("ok");
            HelperMethods.alertBox("Insert Order to Database successfully", null, "Insert data");
            changeToOrderView();
            //return;
        }
        else{
            System.out.println("No product !");
        }
    }

    private void changeToOrderView(){
        mainDashboardController.btnOrdersOnClick(new ActionEvent());
    }

    public void setAdminMainDashboardController(MainDashboardController controller){
        this.mainDashboardController = controller;
    }
}

================
File: src/main/java/controller/admin/pages/orders/UserOrdersController.java
================
package controller.admin.pages.orders;

import controller.admin.MainDashboardController;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import model.Customer;
import model.Datasource;
import model.Order;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class UserOrdersController implements Initializable {
    public TableView<Order> tableOrdersPage;
    public TableColumn<Order, Integer> idColumn;
    public TableColumn<Order, Double> paidColumn;
    public TableColumn<Order, String> dateColumn;
    public TableColumn<Order, String> employeeColumn;
    public TableColumn<Order, Integer> couponColumn;
    public TableColumn<Order, Integer> tableColumn;
    public TableColumn<Order, String> customerColumn;
    public TextField searchField;
    public ComboBox<String> searchComboBox;

    private ObservableList<Order> orderList;
    private ObservableList<Order> filteredList;

    public MainDashboardController mainDashboardController;

    @FXML
    public void listOrders() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        paidColumn.setCellValueFactory(new PropertyValueFactory<>("fin"));
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("order_date"));
        couponColumn.setCellValueFactory(new PropertyValueFactory<>("discount"));
        tableColumn.setCellValueFactory(new PropertyValueFactory<>("tableID"));
        employeeColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer emid = filteredList.get(index).getEmployeeID();
            return new SimpleStringProperty(Datasource.getInstance().searchOneEmployeeById(emid).getFullname());
        });
        customerColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer cusid = filteredList.get(index).getCustomerID();
            if (cusid == null) {
                return new SimpleStringProperty(""); // Or any default value you'd prefer when the customer ID is null
            } else {
                Customer customer = Datasource.getInstance().searchOneCustomerById(cusid);
                if (customer != null) {
                    return new SimpleStringProperty(customer.getName());
                } else {
                    return new SimpleStringProperty(""); // Return an empty string or a default message if customer is not found
                }
            }
        });


        addActionButton();
        //filteredList = FXCollections.observableArrayList(orderList);
        tableOrdersPage.setItems(filteredList);
    }

    @FXML
    private void addActionButton() {
        TableColumn<Order, Void> actionColumn = new TableColumn<>("Action");
        actionColumn.setCellFactory(col -> new TableCell<Order, Void>() {
            private final Button viewButton = new Button("View");

            {
                viewButton.setOnAction(e -> {
                    try {
                        mainDashboardController.viewOrderDetail(new ActionEvent(), getTableRow().getItem());
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(viewButton);
                    setGraphic(hbox);
                }
            }
        });
        actionColumn.setMinWidth(100);
        actionColumn.setPrefWidth(150);
        tableOrdersPage.getColumns().add(actionColumn);
    }

    public void btnOrdersSearchOnAction(ActionEvent actionEvent) {
        System.out.println("TODO: Add orders search functionality.");
    }

    private void applyFilter(String filterOption, String search) {
        filteredList.clear();
        if (search.isEmpty()) {
            filteredList.addAll(orderList);
            return;
        }
        switch (filterOption) {
            case "All":
                filteredList.addAll(orderList);
                break;
            case "By id":
                filteredList.addAll(orderList.filtered(order -> String.valueOf(order.getId()).contains(search)));
                break;
            case "By employee name":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getEmployeeID() == null) {
                        return true;
                    }
                    String name = Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname().toLowerCase();
                    return name.contains(search.toLowerCase());
                }));
                break;
            case "By customer name":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getCustomerID() == null) {
                        return true;
                    }
                    String name = Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName().toLowerCase();
                    return name.contains(search.toLowerCase());
                }));
                break;
            case "By date":
                filteredList.addAll(orderList.filtered(order -> order.getOrder_date().contains(search)));
                break;
            case "By table":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getTableID() == null) {
                        return "take away".contains(search.toLowerCase());
                    }
                    return String.valueOf(order.getTableID()).contains(search);
                }));
                break;
            case "By coupon id":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getCouponID() == null) {
                        return "no coupon".contains(search.toLowerCase());
                    }
                    return String.valueOf(order.getCouponID()).contains(search);
                }));
                break;
            default:
                filteredList.addAll(orderList);
                break;
        }
    }

    public void loadSearch() {
        searchComboBox.getItems().addAll("All", "By id", "By employee name", "By customer name", "By date", "By table", "By coupon id");

        searchComboBox.valueProperty().addListener((obs, oldValue, newValue) -> {
            searchField.setText("");
            searchField.setDisable(newValue.equals("All"));
        });
        searchField.textProperty().addListener((obs, oldText, newText) -> applyFilter(searchComboBox.getValue(), newText));
        searchComboBox.setValue("All");
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        orderList = FXCollections.observableArrayList(Datasource.getInstance().getAllOrder());
        filteredList = FXCollections.observableArrayList(orderList);
        listOrders();
        loadSearch();
    }

    public void setAdminMainDashboardController(MainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }
}

================
File: src/main/java/controller/admin/pages/orders/UserOrdersController.java~
================
package controller.admin.pages.orders;

import controller.admin.MainDashboardController;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import model.Datasource;
import model.Order;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class UserOrdersController implements Initializable {
    public TableView<Order> tableOrdersPage;
    public TableColumn<Order, Integer> idColumn;
    public TableColumn<Order, Double> paidColumn;
    public TableColumn<Order, String> dateColumn;
    public TableColumn<Order, String> employeeColumn;
    public TableColumn<Order, Integer> couponColumn;
    public TableColumn<Order, Integer> tableColumn;
    public TableColumn<Order, String> customerColumn;
    public TextField searchField;
    public ComboBox<String> searchComboBox;

    private ObservableList<Order> orderList;
    private ObservableList<Order> filteredList;

    public MainDashboardController mainDashboardController;

    @FXML
    public void listOrders() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        paidColumn.setCellValueFactory(new PropertyValueFactory<>("fin"));
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("order_date"));
        couponColumn.setCellValueFactory(new PropertyValueFactory<>("discount"));
        tableColumn.setCellValueFactory(new PropertyValueFactory<>("tableID"));
        employeeColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer emid = filteredList.get(index).getEmployeeID();
            return new SimpleStringProperty(Datasource.getInstance().searchOneEmployeeById(emid).getFullname());
        });
        customerColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer cusid = filteredList.get(index).getCustomerID();
            if (cusid == null) {
                return new SimpleStringProperty(""); // Or any default value you'd prefer when the customer ID is null
            } else {
                Customer customer = Datasource.getInstance().searchOneCustomerById(cusid);
                if (customer != null) {
                    return new SimpleStringProperty(customer.getName());
                } else {
                    return new SimpleStringProperty(""); // Return an empty string or a default message if customer is not found
                }
            }
        });


        addActionButton();
        //filteredList = FXCollections.observableArrayList(orderList);
        tableOrdersPage.setItems(filteredList);
    }

    @FXML
    private void addActionButton() {
        TableColumn<Order, Void> actionColumn = new TableColumn<>("Action");
        actionColumn.setCellFactory(col -> new TableCell<Order, Void>() {
            private final Button viewButton = new Button("View");

            {
                viewButton.setOnAction(e -> {
                    try {
                        mainDashboardController.viewOrderDetail(new ActionEvent(), getTableRow().getItem());
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    HBox hbox = new HBox(viewButton);
                    setGraphic(hbox);
                }
            }
        });
        actionColumn.setMinWidth(100);
        actionColumn.setPrefWidth(150);
        tableOrdersPage.getColumns().add(actionColumn);
    }

    public void btnOrdersSearchOnAction(ActionEvent actionEvent) {
        System.out.println("TODO: Add orders search functionality.");
    }

    private void applyFilter(String filterOption, String search) {
        filteredList.clear();
        if (search.isEmpty()) {
            filteredList.addAll(orderList);
            return;
        }
        switch (filterOption) {
            case "All":
                filteredList.addAll(orderList);
                break;
            case "By id":
                filteredList.addAll(orderList.filtered(order -> String.valueOf(order.getId()).contains(search)));
                break;
            case "By employee name":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getEmployeeID() == null) {
                        return true;
                    }
                    String name = Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname().toLowerCase();
                    return name.contains(search.toLowerCase());
                }));
                break;
            case "By customer name":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getCustomerID() == null) {
                        return true;
                    }
                    String name = Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName().toLowerCase();
                    return name.contains(search.toLowerCase());
                }));
                break;
            case "By date":
                filteredList.addAll(orderList.filtered(order -> order.getOrder_date().contains(search)));
                break;
            case "By table":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getTableID() == null) {
                        return "take away".contains(search.toLowerCase());
                    }
                    return String.valueOf(order.getTableID()).contains(search);
                }));
                break;
            case "By coupon id":
                filteredList.addAll(orderList.filtered(order -> {
                    if (order.getCouponID() == null) {
                        return "no coupon".contains(search.toLowerCase());
                    }
                    return String.valueOf(order.getCouponID()).contains(search);
                }));
                break;
            default:
                filteredList.addAll(orderList);
                break;
        }
    }

    public void loadSearch() {
        searchComboBox.getItems().addAll("All", "By id", "By employee name", "By customer name", "By date", "By table", "By coupon id");

        searchComboBox.valueProperty().addListener((obs, oldValue, newValue) -> {
            searchField.setText("");
            searchField.setDisable(newValue.equals("All"));
        });
        searchField.textProperty().addListener((obs, oldText, newText) -> applyFilter(searchComboBox.getValue(), newText));
        searchComboBox.setValue("All");
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        orderList = FXCollections.observableArrayList(Datasource.getInstance().getAllOrder());
        filteredList = FXCollections.observableArrayList(orderList);
        listOrders();
        loadSearch();
    }

    public void setAdminMainDashboardController(MainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }
}

================
File: src/main/java/controller/admin/pages/orders/ViewOrderController.java
================
package controller.admin.pages.orders;

import controller.admin.MainDashboardController; // Ensure this imports the correct controller
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import model.*;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

public class ViewOrderController implements Initializable {
    private MainDashboardController mainDashboardController; // Adjusted to use the correct dashboard controller

    @FXML
    public TextField orderIdField;
    @FXML
    public TextField employeeField;
    @FXML
    public TextField customerField;
    @FXML
    public TextField tableIdField;
    @FXML
    public TextField tableCapacity;
    @FXML
    public TextField couponIdField;
    @FXML
    public Text totalText;
    @FXML
    public Text finalText;
    @FXML
    public Text discountText;
    @FXML
    public TableView<Product> productTable;
    @FXML
    public TableColumn<Product, Integer> idColumn;
    @FXML
    public TableColumn<Product, String> nameColumn;
    @FXML
    public TableColumn<Product, Double> priceColumn;
    @FXML
    public TableColumn<Product, Integer> quantityColumn;
    @FXML
    public TableColumn<Product, Double> totalColumn;
    @FXML
    public TableColumn<Product, String> categoryColumn;
    @FXML
    public Button backToOrderBtn;

    private ObservableList<Product> productList = FXCollections.observableArrayList();
    private ObservableList<OrderDetail> orderDetailsList;

    private Order order;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        loadTable(); // Load table columns on initialization
    }

    // Method to set the dashboard controller
    public void setAdminMainDashboardController(MainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }

    public void setOrder(Order order) {
        this.order = order;
        loadOrderDetails(); // Load order details when the order is set
    }

    public void setOrderDetailsList(List<OrderDetail> list){
        orderDetailsList = FXCollections.observableArrayList(list);
        loadProductList(); // Load product list based on order details
    }

    private void loadOrderDetails() {
        if (order != null) {
            orderIdField.setText(String.valueOf(order.getId()));
            employeeField.setText(Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname());
            customerField.setText(order.getCustomerID() != null
                    ? Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName()
                    : "");
            tableIdField.setText(order.getTableID() != null
                    ? String.valueOf(order.getTableID())
                    : "Take Away");
            tableCapacity.setText(order.getTableID() != null
                    ? String.valueOf(Datasource.getInstance().getOneTable(order.getTableID()).getCapacity())
                    : "");
            couponIdField.setText(order.getCouponID() != null
                    ? String.valueOf(order.getCouponID())
                    : "");
            totalText.setText(String.valueOf(order.getTotal()));
            finalText.setText(String.valueOf(order.getFin()));
            discountText.setText(order.getDiscount() + "%");
        }
    }

    public void loadProductList() {
        productList.clear(); // Clear existing items before loading new
        for (OrderDetail detail : orderDetailsList) {
            Product product = Datasource.getInstance().searchOneProductById(detail.getProductID());
            productList.add(product);
        }
        productTable.setItems(productList);
    }

    public void loadTable() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        categoryColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            String category = Datasource.getInstance().getCategoryName(product.getCategory_id());
            return new SimpleStringProperty(category);
        });
        quantityColumn.setCellValueFactory(cellData -> {
            int index = productTable.getItems().indexOf(cellData.getValue());
            return new SimpleIntegerProperty(orderDetailsList.get(index).getQuantity()).asObject();
        });
        totalColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            int index = productTable.getItems().indexOf(product);
            return new SimpleDoubleProperty(orderDetailsList.get(index).getTotal()).asObject();
        });
    }

    @FXML
    private void toOrder() {
        mainDashboardController.btnOrdersOnClick(new ActionEvent()); // Navigate back to orders
    }
}

================
File: src/main/java/controller/admin/pages/products/AddProductController.java
================
package controller.admin.pages.products;

import javafx.collections.FXCollections;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import model.Categories;
import model.Datasource;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class AddProductController extends ProductsController {

    @FXML
    public ComboBox<Categories> fieldAddProductCategoryId;
    public TextField fieldAddProductName;
    public TextField fieldAddProductPrice;
    public TextField fieldAddProductQuantity;
    public TextArea fieldAddProductDescription;
    public Text viewProductResponse;
    public ImageView productImageView; // New
    public Button selectImageButton; // New

    private File selectedImageFile; // New
    private static final String IMAGE_UPLOAD_PATH = "/view/resources/img/coffee_pictures/"; // New

    @FXML
    private void initialize() {
        fieldAddProductCategoryId.setItems(FXCollections.observableArrayList(
                Datasource.getInstance().getProductCategories(Datasource.ORDER_BY_ASC)));

        TextFormatter<Double> textFormatterDouble = formatDoubleField();
        TextFormatter<Integer> textFormatterInt = formatIntField();
        fieldAddProductPrice.setTextFormatter(textFormatterDouble);
        fieldAddProductQuantity.setTextFormatter(textFormatterInt);

        // Initialize image view with placeholder
        productImageView.setFitHeight(200);
        productImageView.setFitWidth(200);
        productImageView.setPreserveRatio(true);
        productImageView.setImage(DEFAULT_IMAGE);
    }

    @FXML
    private void selectImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Product Image");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );

        selectedImageFile = fileChooser.showOpenDialog(selectImageButton.getScene().getWindow());
        if (selectedImageFile != null) {
            Image image = new Image(selectedImageFile.toURI().toString());
            productImageView.setImage(image);
        }
    }

    private String saveImageFile() {
        if (selectedImageFile == null) {
            return null;
        }

        try {
            String projectPath = System.getProperty("user.dir");
            String fileName = System.currentTimeMillis() + "_" + selectedImageFile.getName();
            Path destinationPath = Paths.get(projectPath, "src/main/resources" + IMAGE_UPLOAD_PATH, fileName);

            // Create directories if they don't exist
            Files.createDirectories(destinationPath.getParent());

            // Copy the file
            Files.copy(selectedImageFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);

            return IMAGE_UPLOAD_PATH + fileName;
        } catch (Exception e) {
            System.err.println("Error saving image: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    @FXML
    private void btnAddProductOnAction() {
        Categories category = fieldAddProductCategoryId.getSelectionModel().getSelectedItem();
        int cat_id = 0;
        if (category != null) {
            cat_id = category.getId();
        }

        assert category != null;
        if (areProductInputsValid(fieldAddProductName.getText(), fieldAddProductDescription.getText(),
                fieldAddProductPrice.getText(), fieldAddProductQuantity.getText(), cat_id)) {

            String productName = fieldAddProductName.getText();
            String productDescription = fieldAddProductDescription.getText();
            double productPrice = Double.parseDouble(fieldAddProductPrice.getText());
            int productQuantity = Integer.parseInt(fieldAddProductQuantity.getText());
            int productCategoryId = category.getId();
            String imagePath = saveImageFile();
            boolean isEnabled = true; // Change this logic as per your requirements


            Task<Boolean> addProductTask = new Task<Boolean>() {
                @Override
                protected Boolean call() {
                    return Datasource.getInstance().insertNewProduct(
                            productName, productDescription, productPrice,
                            productQuantity, productCategoryId, imagePath, isEnabled);
                }
            };

            addProductTask.setOnSucceeded(e -> {
                if (addProductTask.valueProperty().get()) {
                    viewProductResponse.setVisible(true);
                    System.out.println("Product added!");

                    // Clear the form
                    clearForm();

                    // Refresh the products list
                    listProducts();
                }
            });

            new Thread(addProductTask).start();
        }
    }

    private void clearForm() {
        fieldAddProductName.clear();
        fieldAddProductDescription.clear();
        fieldAddProductPrice.clear();
        fieldAddProductQuantity.clear();
        fieldAddProductCategoryId.getSelectionModel().clearSelection();
        productImageView.setImage(DEFAULT_IMAGE);
        selectedImageFile = null;
    }
}

================
File: src/main/java/controller/admin/pages/products/CategoryController.java
================
package controller.admin.pages.products;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML; // Import the FXML annotation
import javafx.scene.control.Alert;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import model.Categories; // Use your Categories model class
import model.Datasource; // Import the Datasource class

public class CategoryController {
    @FXML
    public TextField fieldCategoryName;
    @FXML
    public TextField fieldCategoryDescription;
    @FXML
    public TableView<Categories> categoriesTable; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, Integer> categoryIdColumn; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, String> categoryNameColumn; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, String> descriptionColumn; // Specify the type for type safety

    private ObservableList<Categories> categoryList; // Store the categories in an observable list
    private Datasource datasource; // Reference to the Datasource

    public CategoryController() {
        datasource = Datasource.getInstance(); // Get the instance of Datasource
        categoryList = FXCollections.observableArrayList(); // Create the observable list
        // Do not load categories here
    }

    @FXML
    private void initialize() {
        loadCategories(); // Load categories once the UI components are initialized
    }

    private void loadCategories() {
        categoryList.setAll(datasource.getAllCategories()); // Fetch categories from the datasource
        categoriesTable.setItems(categoryList); // Set the items for the TableView
    }

    public void btnAddCategoryOnClick(ActionEvent actionEvent) {
        String name = fieldCategoryName.getText();
        String description = fieldCategoryDescription.getText();

        if (name.isEmpty() || description.isEmpty()) {
            showAlert("Error", "Please fill in all fields.");
            return;
        }

        Categories newCategory = new Categories(); // Create a new Categories object
        newCategory.setName(name);
        newCategory.setDescription(description);

        // Add the new category to the datasource
        if (datasource.addCategory(newCategory)) {
            categoryList.add(newCategory); // Add to the observable list
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not add the category. Please try again.");
        }
    }

    public void btnEditCategoryOnClick(ActionEvent actionEvent) {
        Categories selectedCategory = categoriesTable.getSelectionModel().getSelectedItem();

        if (selectedCategory == null) {
            showAlert("Error", "Please select a category to edit.");
            return;
        }

        String name = fieldCategoryName.getText();
        String description = fieldCategoryDescription.getText();

        if (name.isEmpty() || description.isEmpty()) {
            showAlert("Error", "Please fill in all fields.");
            return;
        }

        selectedCategory.setName(name); // Update the selected category
        selectedCategory.setDescription(description);

        // Update via datasource
        if (datasource.updateCategory(selectedCategory)) {
            categoriesTable.refresh(); // Refresh the table to reflect changes
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not update the category. Please try again.");
        }
    }

    public void btnDeleteCategoryOnClick(ActionEvent actionEvent) {
        Categories selectedCategory = categoriesTable.getSelectionModel().getSelectedItem();

        if (selectedCategory == null) {
            showAlert("Error", "Please select a category to delete.");
            return;
        }

        // Delete via datasource
        if (datasource.deleteCategory(selectedCategory.getId())) {
            categoryList.remove(selectedCategory); // Remove from the observable list
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not delete the category. Please try again.");
        }
    }

    private void clearFields() {
        fieldCategoryName.clear();
        fieldCategoryDescription.clear();
        categoriesTable.getSelectionModel().clearSelection(); // Clear selection in the table
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: src/main/java/controller/admin/pages/products/EditProductController.java
================
package controller.admin.pages.products;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import model.Categories;
import model.Datasource;
import model.Product;
import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class EditProductController extends ProductsController {

    @FXML
    public Text viewProductResponse;
    public TextField fieldEditProductName;
    public TextField fieldEditProductPrice;
    public TextField fieldEditProductQuantity;
    public ComboBox<Categories> fieldEditProductCategoryId;
    public TextArea fieldEditProductDescription;
    public TextField fieldEditProductId;
    public Text viewProductName;
    public ImageView productImageView; // New
    public Button selectImageButton; // New

    private File selectedImageFile; // New
    private static final String IMAGE_UPLOAD_PATH = "/view/resources/img/coffee_pictures/"; // New

    @FXML
    private void initialize() {
        fieldEditProductCategoryId.setItems(FXCollections.observableArrayList(Datasource.getInstance().getProductCategories(Datasource.ORDER_BY_ASC)));

        TextFormatter<Double> textFormatterDouble = formatDoubleField();
        TextFormatter<Integer> textFormatterInt = formatIntField();
        fieldEditProductPrice.setTextFormatter(textFormatterDouble);
        fieldEditProductQuantity.setTextFormatter(textFormatterInt);

        // Initialize image view with placeholder
        productImageView.setFitHeight(200);
        productImageView.setFitWidth(200);
        productImageView.setPreserveRatio(true);
        productImageView.setImage(DEFAULT_IMAGE);
    }

    @FXML
    private void selectImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Product Image");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );

        selectedImageFile = fileChooser.showOpenDialog(selectImageButton.getScene().getWindow());
        if (selectedImageFile != null) {
            Image image = new Image(selectedImageFile.toURI().toString());
            productImageView.setImage(image);
        }
    }

    private String saveImageFile() {
        if (selectedImageFile == null) {
            return null;
        }

        try {
            String fileName = System.currentTimeMillis() + "_" + selectedImageFile.getName();
            String relativePath = "/view/resources/img/coffee_pictures/" + fileName;
            Path destinationPath = Paths.get(System.getProperty("user.dir"), "src/main/resources" + relativePath);

            // Create directories if they don't exist
            Files.createDirectories(destinationPath.getParent());

            // Copy the file
            Files.copy(selectedImageFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);

            return relativePath;  // Return the relative path instead of just IMAGE_UPLOAD_PATH + fileName
        } catch (Exception e) {
            System.err.println("Error saving image: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    @FXML
    private void btnEditProductOnAction() {
        Categories category = fieldEditProductCategoryId.getSelectionModel().getSelectedItem();
        int cat_id = category != null ? category.getId() : 0; // Only set if a category is selected

        // Validate the product inputs
        if (areProductInputsValid(
                fieldEditProductName.getText(),
                fieldEditProductDescription.getText(),
                fieldEditProductPrice.getText(),
                fieldEditProductQuantity.getText(),
                cat_id)) {

            int productId = Integer.parseInt(fieldEditProductId.getText());
            String productName = fieldEditProductName.getText();
            String productDescription = fieldEditProductDescription.getText();
            double productPrice = Double.parseDouble(fieldEditProductPrice.getText());
            int productQuantity = Integer.parseInt(fieldEditProductQuantity.getText());

            // Attempt to save the new image
            String newImagePath = saveImageFile(); // This will return null if no new image was selected

            // If no new image is selected, retain the existing image path
            String finalImagePath = (newImagePath != null) ? newImagePath : getCurrentImagePath(productId);
            boolean isEnabled = true; // Change this logic as per your requirements


            // Prepare and execute update task
            Task<Boolean> editProductTask = new Task<Boolean>() {
                @Override
                protected Boolean call() {
                    return Datasource.getInstance().updateOneProduct(
                            productId, productName, productDescription,
                            productPrice, productQuantity, cat_id, finalImagePath, isEnabled);
                }
            };

            editProductTask.setOnSucceeded(e -> {
                if (editProductTask.valueProperty().get()) {
                    viewProductResponse.setVisible(true);
                    System.out.println("Product edited!");
                    clearForm(); // Optionally clear the form
                }
            });

            new Thread(editProductTask).start();
        }
    }

    private String getCurrentImagePath(int productId) {
        Product product = Datasource.getInstance().getOneProduct(productId);
        return product != null ? product.getImage() : null;
    }




    public void fillEditingProductFields(int product_id) {
        Task<ObservableList<Product>> fillProductTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(Datasource.getInstance().getOneProduct(product_id));
            }
        };

        fillProductTask.setOnSucceeded(e -> {
            if (!fillProductTask.valueProperty().getValue().isEmpty()) {
                Product product = fillProductTask.valueProperty().getValue().get(0);
                viewProductName.setText("Editing: " + product.getName());
                fieldEditProductId.setText(String.valueOf(product.getId()));
                fieldEditProductName.setText(product.getName());
                fieldEditProductPrice.setText(String.valueOf(product.getPrice()));
                fieldEditProductQuantity.setText(String.valueOf(product.getQuantity()));
                fieldEditProductDescription.setText(product.getDescription());

                // Set the selected category correctly
                Categories category = new Categories();
                category.setId(product.getCategory_id());
                category.setName(product.getCategory_name());
                fieldEditProductCategoryId.getSelectionModel().select(category);

                // Load the product image
                loadProductImage(product.getImage());
            }
        });

        new Thread(fillProductTask).start();
    }

    private void loadProductImage(String imagePath) {
        if (imagePath != null && !imagePath.isEmpty()) {
            try {
                String resourcePath = imagePath.startsWith("/") ? imagePath : "/view/resources/img/coffee_pictures/" + imagePath;
                URL imageUrl = getClass().getResource(resourcePath);

                if (imageUrl != null) {
                    productImageView.setImage(new Image(imageUrl.toString()));
                } else {
                    // If the image is not found in resources, try to load from the file system
                    File imageFile = new File(System.getProperty("user.dir"), "src/main/resources" + resourcePath);
                    if (imageFile.exists()) {
                        productImageView.setImage(new Image(imageFile.toURI().toString()));
                    } else {
                        System.err.println("Image not found: " + imagePath);
                        productImageView.setImage(DEFAULT_IMAGE);
                    }
                }
            } catch (Exception e) {
                System.err.println("Error loading image: " + e.getMessage());
                productImageView.setImage(DEFAULT_IMAGE);
            }
        } else {
            productImageView.setImage(DEFAULT_IMAGE);
        }
    }


    private void loadDefaultImage() {
        productImageView.setImage(DEFAULT_IMAGE);
        System.out.println("Loaded default image.");
    }

    private void clearForm() {
        fieldEditProductName.clear();
        fieldEditProductDescription.clear();
        fieldEditProductPrice.clear();
        fieldEditProductQuantity.clear();
        fieldEditProductCategoryId.getSelectionModel().clearSelection();
        productImageView.setImage(DEFAULT_IMAGE);
        selectedImageFile = null;
    }
}

================
File: src/main/java/controller/admin/pages/products/ProductsController.java
================
package controller.admin.pages.products;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import app.utils.HelperMethods;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.util.StringConverter;
import model.Datasource;
import model.Product;
import javafx.scene.control.ButtonType;

import java.io.File;
import java.net.URL;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;

public class ProductsController {

    @FXML
    public TextField fieldProductsSearch;
    @FXML
    public Text viewProductResponse;
    @FXML
    public GridPane formEditProductView;
    @FXML
    private FlowPane productsContainer;
    @FXML
    private StackPane productsContent;
    @FXML
    private TableView<Product> tableProductsPage;
    private TableColumn<Product, Void> colBtnEdit;
    @FXML
    private Button toggleStatusButton;

    public static TextFormatter<Double> formatDoubleField() {
        Pattern validEditingState = Pattern.compile("-?(([1-9][0-9]*)|0)?(\\.[0-9]*)?");
        UnaryOperator<TextFormatter.Change> filter = c -> {
            String text = c.getControlNewText();
            if (validEditingState.matcher(text).matches()) {
                return c;
            } else {
                return null;
            }
        };
        StringConverter<Double> converter = new StringConverter<Double>() {
            @Override
            public Double fromString(String s) {
                if (s.isEmpty() || "-".equals(s) || ".".equals(s) || "-.".equals(s)) {
                    return 0.0;
                } else {
                    return Double.valueOf(s);
                }
            }

            @Override
            public String toString(Double d) {
                return d.toString();
            }
        };

        return new TextFormatter<>(converter, 0.0, filter);
    }

    public static TextFormatter<Integer> formatIntField() {
        Pattern validEditingState = Pattern.compile("^[0-9]+$");
        UnaryOperator<TextFormatter.Change> filter = c -> {
            String text = c.getControlNewText();
            if (validEditingState.matcher(text).matches()) {
                return c;
            } else {
                return null;
            }
        };
        StringConverter<Integer> converter = new StringConverter<Integer>() {
            @Override
            public Integer fromString(String s) {
                if (s.isEmpty() || "-".equals(s) || ".".equals(s) || "-.".equals(s)) {
                    return 0;
                } else {
                    return Integer.valueOf(s);
                }
            }

            @Override
            public String toString(Integer d) {
                return d.toString();
            }
        };

        return new TextFormatter<>(converter, 0, filter);
    }

    public static final Image DEFAULT_IMAGE = new Image(
            ProductsController.class.getResourceAsStream("/view/resources/img/coffee_pictures/placeholder.png"),
            250, 250, true, true
    );

    @FXML
    private void initialize() {
        System.out.println("Project Directory: " + System.getProperty("user.dir"));

        try {
            URL resourceUrl = getClass().getResource("/view/resources/img/coffee_pictures/");
            if (resourceUrl != null) {
                System.out.println("Resources directory exists at: " + resourceUrl);
                File resourceDir = new File(resourceUrl.toURI());
                if (resourceDir.exists() && resourceDir.isDirectory()) {
                    System.out.println("Contents of image directory:");
                    for (File file : resourceDir.listFiles()) {
                        System.out.println(" - " + file.getName());
                    }
                }
            } else {
                System.out.println("Resources directory not found!");
            }
        } catch (Exception e) {
            System.err.println("Error checking resources:");
            e.printStackTrace();
        }

        setupImageColumn();
        listProducts();
    }

    private void setupImageColumn() {
        TableColumn<Product, ImageView> imageColumn = (TableColumn<Product, ImageView>) tableProductsPage.getColumns()
                .stream()
                .filter(col -> col.getText().equals("Image"))
                .findFirst()
                .orElse(null);

        if (imageColumn != null) {
            imageColumn.setCellValueFactory(null);
            imageColumn.setCellFactory(col -> new TableCell<Product, ImageView>() {
                @Override
                protected void updateItem(ImageView item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty || getTableRow() == null || getTableRow().getItem() == null) {
                        setGraphic(null);
                    } else {
                        Product product = (Product) getTableRow().getItem();
                        if (product.getImageView() != null) {
                            setGraphic(product.getImageView());
                        } else {
                            setGraphic(null);
                        }
                    }
                }
            });
        }
    }

    @FXML
    public void listProducts() {
        Task<ObservableList<Product>> getAllProductsTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(Datasource.getInstance().getAllProducts(Datasource.ORDER_BY_NONE));
            }
        };

        getAllProductsTask.setOnSucceeded(e -> {
            productsContainer.getChildren().clear();
            ObservableList<Product> products = getAllProductsTask.getValue();
            for (Product product : products) {
                try {
                    addProductCard(product);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        new Thread(getAllProductsTask).start();
    }

    private void addProductCard(Product product) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/admin/pages/products/product-card.fxml"));
        VBox productCard = loader.load();

        // Get UI elements
        ImageView productImage = (ImageView) productCard.lookup("#productImage");
        Text productName = (Text) productCard.lookup("#productName");
        Text productCategory = (Text) productCard.lookup("#productCategory");
        Text productPrice = (Text) productCard.lookup("#productPrice");
        Text productStock = (Text) productCard.lookup("#productStock");
        Button editButton = (Button) productCard.lookup("#editButton");
        Button toggleStatusButton = (Button) productCard.lookup("#toggleStatusButton");

        productImage.setOnMouseClicked(event -> showProductDescription(product));
        updateProductCardStatus(product, productCard, productName, toggleStatusButton);

        // Toggle status button action
        toggleStatusButton.setOnAction(event -> {
            product.setDisabled(!product.isDisabled());
            if (Datasource.getInstance().updateProductStatus(product.getId(), product.isDisabled())) {
                updateProductCardStatus(product, productCard, productName, toggleStatusButton);
            } else {
                new Alert(Alert.AlertType.ERROR, "Failed to update the product status. Please try again.").showAndWait();
            }
        });

        // Load image asynchronously
        Task<Image> loadImageTask = new Task<Image>() {
            @Override
            protected Image call() {
                if (product.getImage() != null && !product.getImage().isEmpty()) {
                    try {
                        URL resourceUrl = getClass().getResource(product.getImage());
                        if (resourceUrl != null) {
                            return new Image(resourceUrl.toString(), 350, 250, false, true);
                        }
                        Path absolutePath = Paths.get(System.getProperty("user.dir"), "src/main/resources" + product.getImage());
                        if (Files.exists(absolutePath)) {
                            return new Image(absolutePath.toUri().toString(), 350, 250, false, true);
                        }
                    } catch (Exception ignored) {}
                }
                return DEFAULT_IMAGE;
            }
        };

        loadImageTask.setOnSucceeded(event -> {
            productImage.setImage(loadImageTask.getValue());
            productImage.setFitWidth(350);
            productImage.setFitHeight(250);
            productImage.setPreserveRatio(false);
        });

        loadImageTask.setOnFailed(event -> productImage.setImage(DEFAULT_IMAGE));
        new Thread(loadImageTask).start();

        // Set product information
        productName.setText(product.getName());
        productCategory.setText(product.getCategory_name());
        productPrice.setText(String.format("$%.2f", product.getPrice()));
        productStock.setText(String.format("Stock: %d", product.getQuantity()));
        productCard.setStyle(productCard.getStyle() + "; -fx-cursor: hand;");

        // Set up edit button action
        editButton.setOnAction(event -> btnEditProduct(product.getId()));

        productsContainer.getChildren().add(productCard);
    }

    private void updateProductCardStatus(Product product, VBox productCard, Text productName, Button toggleStatusButton) {
        if (product.isDisabled()) {
            productCard.getStyleClass().add("disabled");
            productName.getStyleClass().add("unavailable");
            productName.setText(product.getName() + " (Unavailable)");
            toggleStatusButton.setText("Enable");
            toggleStatusButton.getStyleClass().remove("warning");
            toggleStatusButton.getStyleClass().add("enable");
        } else {
            productCard.getStyleClass().remove("disabled");
            productName.getStyleClass().remove("unavailable");
            productName.setText(product.getName());
            toggleStatusButton.setText("Disable");
            toggleStatusButton.getStyleClass().remove("enable");
            toggleStatusButton.getStyleClass().add("warning");
        }
    }

    private void showProductDescription(Product product) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(product.getName() + " Description");
        alert.setHeaderText(null);
        alert.setContentText(product.getDescription());
        alert.getButtonTypes().setAll(ButtonType.OK);
        alert.showAndWait();
    }

    @FXML
    private void btnProductsSearchOnAction() {
        Task<ObservableList<Product>> searchProductsTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(
                        Datasource.getInstance().searchProducts(
                                fieldProductsSearch.getText().toLowerCase(),
                                Datasource.ORDER_BY_NONE,
                                false // Set to true if you want to include disabled products
                        ));
            }
        };

        searchProductsTask.setOnSucceeded(e -> {
            productsContainer.getChildren().clear();
            ObservableList<Product> products = searchProductsTask.getValue();
            for (Product product : products) {
                try {
                    addProductCard(product);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        new Thread(searchProductsTask).start();
    }



    @FXML
    private void btnAddProductOnClick() {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/admin/pages/products/add-product.fxml"));
            AnchorPane root = fxmlLoader.load();

            URL cssUrl = getClass().getResource("/css/form.css");
            if (cssUrl != null) {
                root.getStylesheets().add(cssUrl.toExternalForm());
            }

            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void btnEditProduct(int product_id) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/admin/pages/products/edit-product.fxml"));
            AnchorPane root = fxmlLoader.load();

            URL cssUrl = getClass().getResource("/css/form.css");
            if (cssUrl != null) {
                root.getStylesheets().add(cssUrl.toExternalForm());
            }

            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);

            EditProductController controller = fxmlLoader.getController();
            controller.fillEditingProductFields(product_id);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    boolean areProductInputsValid(String fieldAddProductName, String fieldAddProductDescription, String fieldAddProductPrice, String fieldAddProductQuantity, int productCategoryId) {
        System.out.println("TODO: Better validate inputs.");
        String errorMessage = "";

        if (fieldAddProductName == null || fieldAddProductName.length() < 3) {
            errorMessage += "please enter a valid name!\n";
        }
        if (fieldAddProductDescription == null || fieldAddProductDescription.length() < 5) {
            errorMessage += "Description is not valid!\n";
        }
        if (!HelperMethods.validateProductPrice(fieldAddProductPrice)) {
            errorMessage += "Price is not valid!\n";
        }
        if (!HelperMethods.validateProductQuantity(fieldAddProductQuantity)) {
            errorMessage += "Not valid quantity!\n";
        }

        if (errorMessage.length() == 0) {
            return true;
        } else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Invalid Fields");
            alert.setHeaderText("Please correct invalid fields");
            alert.setContentText(errorMessage);
            alert.showAndWait();
            return false;
        }
    }

    @FXML
    public void btnManageCategoryOnClick(ActionEvent actionEvent) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/admin/pages/products/categories.fxml"));
            AnchorPane root = fxmlLoader.load();
            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

================
File: src/main/java/controller/admin/pages/SettingsController.java
================
package controller.admin.pages;

public class SettingsController {
    // TODO
    //  Options Page
}

================
File: src/main/java/controller/admin/pages/users/CreateUserController.java
================
package controller.admin.pages.users;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.text.Text;
import model.Datasource;  // Assuming UserModel is a class where your insert function is defined
import app.utils.PasswordUtils; // Assuming PasswordUtils contains your password hashing methods

public class CreateUserController {

    @FXML
    private TextField fieldCreateUserName;

    @FXML
    private TextField fieldCreateUserEmail;

    @FXML
    private TextField fieldCreateUserUsername;

    @FXML
    private PasswordField fieldCreateUserPassword;

    @FXML
    private ComboBox<String> fieldCreateUserStatus;

    @FXML
    private Text viewCreateUserResponse;

    public void initializeForm() {
        // Initialize combo box or other fields here
        fieldCreateUserStatus.getItems().addAll("Active", "Inactive");
    }


    @FXML
    public void btnCreateUserOnAction() {
        String fullName = fieldCreateUserName.getText();
        String email = fieldCreateUserEmail.getText();
        String username = fieldCreateUserUsername.getText();
        String password = fieldCreateUserPassword.getText();

        // Validate the input
        if (fullName.isEmpty() || email.isEmpty() || username.isEmpty() || password.isEmpty()) {
            viewCreateUserResponse.setText("All fields are required.");
            viewCreateUserResponse.setVisible(true);
            return;
        }

        // Generate salt and hash the password
        String salt = PasswordUtils.getSalt(30); // Generating a salt (length 30)
        String securePassword = PasswordUtils.generateSecurePassword(password, salt); // Hash the password

        // Use the UserModel to insert the new user into the database
        Datasource userModel = Datasource.getInstance();  // Singleton pattern to get the instance
        boolean success = userModel.insertNewUser(fullName, username, email, securePassword, salt);

        if (success) {
            viewCreateUserResponse.setText("User created successfully!");
            viewCreateUserResponse.setFill(javafx.scene.paint.Color.GREEN);
        } else {
            viewCreateUserResponse.setText("Failed to create user.");
            viewCreateUserResponse.setFill(javafx.scene.paint.Color.RED);
        }

        viewCreateUserResponse.setVisible(true);
    }
}

================
File: src/main/java/controller/admin/pages/users/EditUserController.java
================
package controller.admin.pages.users;

import javafx.collections.FXCollections;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import model.User;
import model.Datasource;
import javafx.scene.text.Text;

import java.util.List;

public class EditUserController {

    @FXML
    private TextField fieldEditCustomerName;
    @FXML
    private TextField fieldEditCustomerEmail;
    @FXML
    private TextField fieldEditCustomerUsername;
    @FXML
    private ComboBox<String> fieldEditCustomerStatus;
    @FXML
    private Text viewCustomerResponse;
    @FXML
    private TextField fieldEditCustomerId;

    @FXML
    private void initialize() {
        // Populate the status combo box with predefined statuses
        fieldEditCustomerStatus.setItems(FXCollections.observableArrayList("Active", "Inactive", "Banned"));
    }

    @FXML
    private void btnEditCustomerOnAction() {
        int customerId = Integer.parseInt(fieldEditCustomerId.getText());
        String fullname = fieldEditCustomerName.getText();
        String email = fieldEditCustomerEmail.getText();
        String username = fieldEditCustomerUsername.getText();
        String status = fieldEditCustomerStatus.getValue();

        if (areCustomerInputsValid(fullname, email, username, status)) {
            Task<Boolean> updateCustomerTask = new Task<Boolean>() {
                @Override
                protected Boolean call() {
                    return Datasource.getInstance().updateOneUser(customerId, fullname, username, email, status);
                }
            };

            updateCustomerTask.setOnSucceeded(e -> {
                if (updateCustomerTask.valueProperty().get()) {
                    viewCustomerResponse.setText("User updated successfully!");
                    viewCustomerResponse.setVisible(true);
                } else {
                    viewCustomerResponse.setText("Failed to update customer.");
                    viewCustomerResponse.setVisible(true);
                }
            });

            updateCustomerTask.setOnFailed(e -> {
                Throwable throwable = updateCustomerTask.getException();
                viewCustomerResponse.setText("Error: " + throwable.getMessage());
                viewCustomerResponse.setVisible(true);
            });

            new Thread(updateCustomerTask).start();
        } else {
            viewCustomerResponse.setText("Please fill in all fields correctly.");
            viewCustomerResponse.setVisible(true);
        }
    }

    public void fillEditingCustomerFields(int customer_id) {
        Task<List<User>> fillCustomerTask = new Task<List<User>>() {
            @Override
            protected List<User> call() {
                return Datasource.getInstance().getOneUser(customer_id); // Returns a list of customers
            }
        };

        fillCustomerTask.setOnSucceeded(e -> {
            List<User> users = fillCustomerTask.getValue();
            if (users != null && !users.isEmpty()) { // Check if the list is not null and not empty
                User user = users.get(0); // Get the first user from the list
                fieldEditCustomerId.setText(String.valueOf(user.getId()));
                fieldEditCustomerName.setText(user.getFullname());
                fieldEditCustomerEmail.setText(user.getEmail());
                fieldEditCustomerUsername.setText(user.getUsername());
                fieldEditCustomerStatus.setValue(user.getStatus());
            } else {
                viewCustomerResponse.setText("User not found.");
                viewCustomerResponse.setVisible(true);
            }
        });

        fillCustomerTask.setOnFailed(e -> {
            Throwable throwable = fillCustomerTask.getException();
            viewCustomerResponse.setText("Error: " + throwable.getMessage());
            viewCustomerResponse.setVisible(true);
        });

        new Thread(fillCustomerTask).start();
    }

    /**
     * Validates customer inputs.
     */
    private boolean areCustomerInputsValid(String fullname, String email, String username, String status) {
        // Implement validation logic (e.g., check for nulls, email format, etc.)
        return !fullname.isEmpty() && !email.isEmpty() && !username.isEmpty() && (status != null);
    }
}

================
File: src/main/java/controller/admin/pages/users/UsersController.java
================
package controller.admin.pages.users;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.util.Callback;
import model.User;
import model.Datasource;

import java.io.IOException;
import java.util.Optional;

/**
 * This class handles the admin customers page.
 */
public class UsersController {

    @FXML
    public TextField fieldCustomersSearch;
    @FXML
    private StackPane customersContent;
    @FXML
    private TableView<User> tableCustomersPage;
    @FXML
    private Button btnAddUser;

    @FXML
    public void listUsers() {
        Task<ObservableList<User>> getAllCustomersTask = new Task<ObservableList<User>>() {
            @Override
            protected ObservableList<User> call() {
                return FXCollections.observableArrayList(Datasource.getInstance().getAllUsers(Datasource.ORDER_BY_NONE));
            }
        };

        tableCustomersPage.itemsProperty().bind(getAllCustomersTask.valueProperty());
        addActionButtonsToTable();
        new Thread(getAllCustomersTask).start();
    }

    @FXML
    private void addActionButtonsToTable() {
        TableColumn<User, Void> colBtnEdit = new TableColumn<>("Actions");

        Callback<TableColumn<User, Void>, TableCell<User, Void>> cellFactory = new Callback<TableColumn<User, Void>, TableCell<User, Void>>() {
            @Override
            public TableCell<User, Void> call(final TableColumn<User, Void> param) {
                return new TableCell<User, Void>() {
                    private final Button editButton = new Button("Edit");
                    private final Button deleteButton = new Button("Delete");
                    private final HBox buttonsPane = new HBox(editButton, deleteButton);

                    {
                        buttonsPane.setSpacing(10);
                        editButton.getStyleClass().addAll("button", "xs", "primary");
                        deleteButton.getStyleClass().addAll("button", "xs", "danger");

                        editButton.setOnAction(event -> {
                            User userData = getTableView().getItems().get(getIndex());
                            btnEditUser(userData.getId());
                        });

                        deleteButton.setOnAction(event -> {
                            User userData = getTableView().getItems().get(getIndex());
                            deleteUser(userData);
                        });
                    }

                    @Override
                    public void updateItem(Void item, boolean empty) {
                        super.updateItem(item, empty);
                        setGraphic(empty ? null : buttonsPane);
                    }
                };
            }
        };

        colBtnEdit.setCellFactory(cellFactory);
        tableCustomersPage.getColumns().add(colBtnEdit);
    }

    private void deleteUser(User userData) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setHeaderText("Are you sure that you want to delete " + userData.getFullname() + "?");
        alert.setTitle("Delete " + userData.getFullname() + "?");
        Optional<ButtonType> deleteConfirmation = alert.showAndWait();

        if (deleteConfirmation.isPresent() && deleteConfirmation.get() == ButtonType.OK) {
            if (Datasource.getInstance().deleteSingleUser(userData.getId())) {
                tableCustomersPage.getItems().remove(userData);
            }
        }
    }

    @FXML
    public void btnUsersSearchOnAction() {
        Task<ObservableList<User>> searchCustomersTask = new Task<ObservableList<User>>() {
            @Override
            protected ObservableList<User> call() {
                return FXCollections.observableArrayList(
                        Datasource.getInstance().searchUsers(fieldCustomersSearch.getText().toLowerCase(), Datasource.ORDER_BY_NONE));
            }
        };

        tableCustomersPage.itemsProperty().bind(searchCustomersTask.valueProperty());
        new Thread(searchCustomersTask).start();
    }

    @FXML
    private void btnEditUser(int customerId) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/admin/pages/users/edit-user.fxml"));
            AnchorPane root = fxmlLoader.load();
            customersContent.getChildren().clear();
            customersContent.getChildren().add(root);

            EditUserController editController = fxmlLoader.getController();
            editController.fillEditingCustomerFields(customerId); // Call the method to load customer data
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    private void btnAddUserOnAction() {
        try {
            // Load the Create User form (FXML) into the existing layout
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/admin/pages/users/add-user.fxml"));
            AnchorPane root = fxmlLoader.load();

            // Clear current content and add the new "Create User" form
            customersContent.getChildren().clear();
            customersContent.getChildren().add(root);

            // Get the controller and initialize if needed
            CreateUserController createUserController = fxmlLoader.getController();
            createUserController.initializeForm(); // Add a method in CreateUserController to initialize the form if needed

        } catch (IOException e) {
            e.printStackTrace();
        }
    }



}

================
File: src/main/java/controller/admin/pages/ViewOrderController.java~
================
package controller.admin.pages;

import controller.admin.MainDashboardController;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import model.Order;

import java.net.URL;
import java.util.ResourceBundle;

public class ViewOrderController implements Initializable {
    public MainDashboardController mainDashboardController;

    public TextField orderIdField;

    private Order order;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        //orderIdField.setText(String.valueOf(order.getId()));
    }

    public void setAdminMainDashboardController(UserMainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }

    public void setOrder(Order order) {
        this.order = order;
    }
}

================
File: src/main/java/controller/LoginController.java
================
package controller;

import app.utils.HelperMethods;
import app.utils.PasswordUtils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Label;  // Ensure this line is present
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.User;

import java.io.IOException;
import java.sql.SQLException;

public class LoginController {
    @FXML
    public TextField usernameField;
    @FXML
    public PasswordField passwordField;
    @FXML
    public Label messageLabel;  // Declare the messageLabel here
    Stage dialogStage = new Stage();
    Scene scene;

    public void handleLoginButtonAction(ActionEvent event) throws SQLException, IOException {
        String username = usernameField.getText();
        String providedPassword = passwordField.getText();
        messageLabel.setText(""); // Clear previous messages

        if (username.isEmpty() || providedPassword.isEmpty()) {
            messageLabel.setText("Please enter the Username and Password.");
        } else if (!HelperMethods.validateUsername(username)) {
            messageLabel.setText("Please enter a valid Username!");
        } else {
            User user = model.Datasource.getInstance().getUserByUsername(username);
            if (user.getPassword() == null || user.getPassword().isEmpty()) {
                messageLabel.setText("There is no user registered with that username!");
            } else {
                boolean passwordMatch = PasswordUtils.verifyUserPassword(providedPassword, user.getPassword(), user.getSalt());

                if (passwordMatch) {
                    UserSessionController.setUserId(user.getId());
                    UserSessionController.setUserFullName(user.getFullname());
                    UserSessionController.setUserName(user.getUsername());
                    UserSessionController.setUserEmail(user.getEmail());
                    UserSessionController.setUserAdmin(user.getAdmin());
                    UserSessionController.setUserStatus(user.getStatus());

                    Node node = (Node) event.getSource();
                    dialogStage = (Stage) node.getScene().getWindow();
                    dialogStage.close();

                    // Load appropriate dashboard based on user role
                    if (user.getAdmin() == 0) {
                        scene = new Scene(FXMLLoader.load(getClass().getResource("/view/users/main-dashboard.fxml")));
                    } else {
                        scene = new Scene(FXMLLoader.load(getClass().getResource("/view/admin/main-dashboard.fxml")));
                    }
                    dialogStage.setScene(scene);
                    dialogStage.show();
                } else {
                    messageLabel.setText("Incorrect username or password.");
                }
            }
        }
    }

    public void handleRegisterButtonAction(ActionEvent actionEvent) throws IOException {
        Stage dialogStage;
        Node node = (Node) actionEvent.getSource();
        dialogStage = (Stage) node.getScene().getWindow();
        dialogStage.close();
        Scene scene = new Scene(FXMLLoader.load(getClass().getResource("/view/register.fxml")));
        dialogStage.setScene(scene);
        dialogStage.show();
    }
}

================
File: src/main/java/controller/RegisterController.java
================
package controller;

import app.utils.HelperMethods;
import app.utils.PasswordUtils;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Label; // Import Label for error messages
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.Datasource;
import model.User;

import java.io.IOException;
import java.sql.SQLException;

public class RegisterController {

    @FXML
    private TextField fullNameField;
    @FXML
    private TextField usernameField;
    @FXML
    private TextField emailField;
    @FXML
    private PasswordField passwordField;
    @FXML
    private Label messageLabel; // Declare messageLabel for displaying errors

    Stage dialogStage = new Stage();
    Scene scene;

    public void handleLoginButtonAction(ActionEvent actionEvent) throws IOException {
        Node node = (Node) actionEvent.getSource();
        dialogStage = (Stage) node.getScene().getWindow();
        dialogStage.close();
        scene = new Scene(FXMLLoader.load(getClass().getResource("/view/login.fxml")));
        dialogStage.setScene(scene);
        dialogStage.show();
    }

    public void handleRegisterButtonAction(ActionEvent actionEvent) throws SQLException {
        String validationErrors = "";
        boolean errors = false;
        String fullName = fullNameField.getText();
        String username = usernameField.getText();
        String email = emailField.getText();
        String providedPassword = passwordField.getText();

        // Validate Full Name
        if (fullName == null || fullName.isEmpty()) {
            validationErrors += "Please enter your Name and Surname!\n";
            errors = true;
        } else if (!HelperMethods.validateFullName(fullName)) {
            validationErrors += "Please enter a valid Name and Surname!\n";
            errors = true;
        }

        // Validate Username
        if (username == null || username.isEmpty()) {
            validationErrors += "Please enter a username!\n";
            errors = true;
        } else if (!HelperMethods.validateUsername(username)) {
            validationErrors += "Please enter a valid Username!\n";
            errors = true;
        } else {
            User userByUsername = Datasource.getInstance().getUserByUsername(username);
            if (userByUsername != null && userByUsername.getUsername() != null) {
                validationErrors += "There is already a user registered with this username!\n";
                errors = true;
            }
        }

        // Validate Email
        if (email == null || email.isEmpty()) {
            validationErrors += "Please enter an email address!\n";
            errors = true;
        } else if (!HelperMethods.validateEmail(email)) {
            validationErrors += "Please enter a valid Email address!\n";
            errors = true;
        } else {
            User userByEmail = Datasource.getInstance().getUserByEmail(email);
            if (userByEmail != null && userByEmail.getEmail() != null) {
                validationErrors += "There is already a user registered with this email address!\n";
                errors = true;
            }
        }

        // Validate Password
        if (providedPassword == null || providedPassword.isEmpty()) {
            validationErrors += "Please enter the password!\n";
            errors = true;
        } else if (!HelperMethods.validatePassword(providedPassword)) {
            validationErrors += "Password must be at least 6 and maximum 16 characters!\n";
            errors = true;
        }

        // Display validation errors or proceed
        if (errors) {
            messageLabel.setText(validationErrors); // Set error message in the label
            return; // Early exit if there are validation errors
        }

        // Proceed with user registration
        String salt = PasswordUtils.getSalt(30);
        String securePassword = PasswordUtils.generateSecurePassword(providedPassword, salt);

        Task<Boolean> addUserTask = new Task<Boolean>() {
            @Override
            protected Boolean call() {
                return Datasource.getInstance().insertNewUser(fullName, username, email, securePassword, salt);
            }
        };

        addUserTask.setOnSucceeded(e -> {
            if (addUserTask.getValue()) {
                User user;
                try {
                    user = Datasource.getInstance().getUserByEmail(email);
                } catch (SQLException err) {
                    err.printStackTrace();
                    return;
                }

                if (user != null) {
                    UserSessionController.setUserId(user.getId());
                    UserSessionController.setUserFullName(user.getFullname());
                    UserSessionController.setUserName(user.getUsername());
                    UserSessionController.setUserEmail(user.getEmail());
                    UserSessionController.setUserAdmin(user.getAdmin());
                    UserSessionController.setUserStatus(user.getStatus());

                    Node node = (Node) actionEvent.getSource();
                    dialogStage = (Stage) node.getScene().getWindow();
                    dialogStage.close();
                    try {
                        scene = new Scene(FXMLLoader.load(getClass().getResource(user.getAdmin() == 0 ? "/view/users/main-dashboard.fxml" : "/view/admin/main-dashboard.fxml")));
                    } catch (IOException ioException) {
                        ioException.printStackTrace();
                    }
                    dialogStage.setScene(scene);
                    dialogStage.show();
                }
            } else {
                messageLabel.setText("Registration failed! Please try again.");
            }
        });

        new Thread(addUserTask).start();
    }
}

================
File: src/main/java/controller/users/pages/orders/NewOrderController.java
================
package controller.users.pages.orders;

import app.utils.HelperMethods;
import controller.UserSessionController;
import controller.users.UserMainDashboardController;
import javafx.application.Platform;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import model.*;

import java.net.URL;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

public class NewOrderController implements Initializable {
    public TextField eName;
    public TextField dateField;
    public ComboBox<Integer> tableComboBox;
    public HBox couponHBox;
    public TextField couponField;
    public Button checkCouponBtn;
    public Button resetCouponBtn;
    public TextField searchField;
    public ListView<String> suggestionList;
    public TextField idField;
    public TextField productNameField;
    public Spinner<Integer> quantitySpinner;
    public TextField totalField;
    public HBox searchHBox;
    public Button addBtn;
    public TableView<Product> orderDetailView;
    //public TableColumn<Product, String> imageColumn;
    public TableColumn<Product, String> categoryColumn;
    public TableColumn<Product, String> nameColumn;
    public TableColumn<Product, Double> priceColumn;
    public TableColumn<Product, Integer> quantityColumn;
    public TableColumn<Product, Double> totalColumn;
    public HBox productHBox;
    public HBox paymentHBox;
    public Text totalText;
    public Text finalText;
    public Text discountText;
    public Button createOrderBtn;
    public CheckBox checkTakeAway;
    public TextField customerNameField;

    private UserMainDashboardController mainDashboardController;

    Text valid = new Text("valid");
    Text invalid = new Text("invalid");
    Text noStock = new Text("not enough stock");

    ObservableList<String> suggestions = FXCollections.observableArrayList(getProductNameList());

    //List<Product> productList = new ArrayList<>();
    ObservableList<Product> productList = FXCollections.observableArrayList();

    Product tempProduct = new Product();
    ObservableList<Integer> quantities = FXCollections.observableArrayList();
    ObservableList<Coupon> coupons = FXCollections.observableArrayList();

    Table order_table = new Table();
    Customer customer = new Customer();
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        userNameAndDateLoader();
        tableComboBoxLoader();
        couponLoader();
        suggestionListLoader();
        productDetailLoader();
        tableLoader();
        paymentBoxLoader();
        checkBoxLoader();
    }

    private void userNameAndDateLoader(){
        order_table = null;
        customer = null;
        tempProduct = null;
        String username = UserSessionController.getUserFullName();
        eName.setText(username);
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formatted_date = today.format(formatter);
        dateField.setText(formatted_date);
    }

    private void tableComboBoxLoader(){
        List<Integer> list = Datasource.getInstance().getAllTableID();
        ObservableList<Integer> options = FXCollections.observableArrayList(list);
        tableComboBox.setItems(options);
        tableComboBox.valueProperty().addListener((obs, oldVal, newVal) ->{
                if(newVal != null){
                    order_table = Datasource.getInstance().getOneTable(newVal);
                    checkTakeAway.setSelected(false);
                }
            }
        );
    }

    @FXML
    private boolean checkCoupon(){
        if(couponHBox.getChildren().contains(valid)){
            couponHBox.getChildren().remove(valid);
        }
        if(couponHBox.getChildren().contains(invalid)){
            couponHBox.getChildren().remove(invalid);
        }
        List<Coupon> list = Datasource.getInstance().getAllCoupon();
        String cf = couponField.getText();
        for(Coupon coupon: list){
            if(String.valueOf(coupon.getId()).equals(cf)){
                if(!checkExpire(coupon.getExpiry())){
                    valid.setText("valid");
                    valid.setFill(Color.GREEN);
                    valid.setFont(new Font(15));
                    couponHBox.getChildren().add(valid);
                    couponField.setEditable(false);
                    coupons.clear();
                    coupons.add(coupon);
                    return true;
                }
                else{
                    invalid.setText("coupon expired");
                    invalid.setFill(Color.RED);
                    invalid.setFont(new Font(15));
                    couponHBox.getChildren().add(invalid);
                    coupons.clear();
                    return false;
                }
            }
        }

        invalid.setText("invalid");
        invalid.setFill(Color.RED);
        invalid.setFont(new Font(15));
        couponHBox.getChildren().add(invalid);
        coupons.clear();
        return false;
    }

    @FXML
    private boolean resetCoupon(){
        if(couponHBox.getChildren().contains(valid)){
            couponHBox.getChildren().remove(valid);
        }
        if(couponHBox.getChildren().contains(invalid)){
            couponHBox.getChildren().remove(invalid);
        }
        couponField.setText("");
        couponField.setEditable(true);
        coupons.clear();
        return true;
    }

    private boolean checkExpire(String expiry){
        //System.out.println(expiry);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDate expiryDate = LocalDate.parse(expiry, formatter);
        LocalDate today = LocalDate.now();
        return expiryDate.isBefore(today);
        //return false;
    }

    private List<String> getProductNameList(){
        List<Product> list = Datasource.getInstance().getAllProducts(Datasource.ORDER_BY_NONE);
        List<String> nameList = new ArrayList<>();
        for(Product product: list){
            if(!product.isDisabled()){
                nameList.add(product.getName());
            }
        }
        return nameList;
    }

    private void couponLoader(){
        couponField.textProperty().addListener(((observableValue, oldValue, newValue) ->{
            if(couponHBox.getChildren().contains(valid)){
                couponHBox.getChildren().remove(valid);
            }
            if(couponHBox.getChildren().contains(invalid)){
                couponHBox.getChildren().remove(invalid);
            }
        } ));
    }

    private void suggestionListLoader(){
        suggestionList.setVisible(false); // Initially hide the suggestions list
        //suggestionList.setPrefHeight(100); // Set a preferred height for the suggestion list
        suggestionList.prefWidthProperty().bind(searchField.widthProperty()); // Bind width to searchField
        //suggestionList.setItems(suggestions);
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            if(searchHBox.getChildren().contains(invalid)){
                searchHBox.getChildren().remove(invalid);
            }
            if (newValue.isEmpty()) {
                suggestionList.setVisible(false);
            } else {
                // Filter suggestions
                List<String> filteredSuggestions = suggestions.stream()
                        .filter(s -> s.toLowerCase().contains(newValue.toLowerCase()))
                        .toList();
                ObservableList<String> inputList = FXCollections.observableArrayList(filteredSuggestions);
               // Integer value = quantitySpinner.getValue();
                if (!filteredSuggestions.isEmpty()) {
                    suggestionList.setItems(inputList);
                    suggestionList.setVisible(true);
                } else {
                    suggestionList.setVisible(false);
                }

                // Update position of the suggestion list to be directly below the searchField
                //suggestionList.setTranslateX(searchField.getLayoutX());
                //suggestionList.setTranslateY(searchField.getLayoutY() + searchField.getHeight());
            }
        });

        // Handle selection from the suggestions list
        suggestionList.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                searchField.setText(newValue);
                searchField.positionCaret(searchField.getText().length());
                suggestionList.setVisible(false);// Hide suggestions after selection

                Platform.runLater(() -> {
                    suggestionList.getSelectionModel().clearSelection();
                    onClickSearch();
                });
            }
        });
    }

    @FXML
    private void onClickSearch(){
        if(productHBox.getChildren().contains(invalid) || productHBox.getChildren().contains(noStock)){
            productHBox.getChildren().remove(invalid);
            productHBox.getChildren().remove(noStock);
        }
        String searchName = searchField.getText();
        //Product product = new Product();
        tempProduct = Datasource.getInstance().searchOneProductByName(searchName);
        if(tempProduct != null && !tempProduct.isDisabled()){
            if(tempProduct.getQuantity() == 0){
                invalid.setText("Product has no stock remain");
                invalid.setFill(Color.RED);
                searchHBox.getChildren().add(invalid);
                return;
            }
            quantitySpinner.setDisable(false);
            idField.setText(String.valueOf(tempProduct.getId()));
            productNameField.setText(tempProduct.getName());
            SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, tempProduct.getQuantity(), 1);
            quantitySpinner.setValueFactory(spinnerValue);
            searchField.setText("");
            //return;
        }
        else if(tempProduct == null || tempProduct.isDisabled()){
            invalid.setText("No product found or product is disabled");
            invalid.setFill(Color.RED);
            searchHBox.getChildren().add(invalid);
            //return;
        }
    }

    private void productDetailLoader(){
        if(tempProduct == null){
            SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,999,0);
            quantitySpinner.setValueFactory(spinnerValue);
            totalField.setText("0");
            quantitySpinner.setDisable(true);
        }
        quantitySpinner.valueProperty().addListener(new ChangeListener<Integer>() {
            @Override
            public void changed(ObservableValue<? extends Integer> observable, Integer oldValue, Integer newValue) {
                if(tempProduct == null){
                    SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,999,0);
                    quantitySpinner.setValueFactory(spinnerValue);
                    totalField.setText("0");
                    quantitySpinner.setDisable(true);
                }
                else{
                    double total = newValue * tempProduct.getPrice();
                    DecimalFormat formattedTotal = new DecimalFormat("#.##");
                    String formattedValue = formattedTotal.format(total);
                    totalField.setText(formattedValue);
                    quantitySpinner.setDisable(false);
                }
//                if(productHBox.getChildren().contains(invalid) || productHBox.getChildren().contains(noStock)){
//                    productHBox.getChildren().remove(invalid);
//                    productHBox.getChildren().remove(noStock);
//                }
            }
        });
    }

    private void tableLoader(){
        //imageColumn.setCellValueFactory(new PropertyValueFactory<>("image"));
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        quantityColumn.setCellValueFactory(cellData -> {
            // Use the row index to get the corresponding quantity
            int index = orderDetailView.getItems().indexOf(cellData.getValue());
            return new SimpleIntegerProperty(getQuantity(index)).asObject();
        });
        totalColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            int index = orderDetailView.getItems().indexOf(product);
            double total = product.getPrice() * getQuantity(index);
            DecimalFormat format = new DecimalFormat("#.##");
            String formattedString = format.format(total);
            total = Double.parseDouble(formattedString);
            return new SimpleDoubleProperty(total).asObject();
        });
        categoryColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            String category = Datasource.getInstance().getCategoryName(product.getCategory_id());
            return new SimpleStringProperty(category);
        });
        addActionColumn();
    }

    @FXML
    private void addBtnClick(){
        if(tempProduct == null){
            return;
        }
        boolean check = false;
        for(Product product : productList){
            if(tempProduct.getName().equals(product.getName())){
                int index = productList.indexOf(product);
                quantities.set(index, quantities.get(index)+quantitySpinner.getValue());
                if(quantities.get(index) > product.getQuantity()){
                    quantities.set(index, product.getQuantity());
                    //invalid.setText("Not enough stock to add");
                    noStock.setFill(Color.RED);
                    productHBox.getChildren().add(noStock);
                }
                check = true;
            }
        }
        if(!check){
            productList.add(tempProduct);
            quantities.add(quantitySpinner.getValue());
        }
        orderDetailView.setItems(productList);
        tempProduct = null;
        idField.setText("");
        productNameField.setText("");
        SpinnerValueFactory<Integer> spinnerValue = new SpinnerValueFactory.ListSpinnerValueFactory<>(
                javafx.collections.FXCollections.observableArrayList(0));
        quantitySpinner.setValueFactory(spinnerValue);
        totalField.setText("0");
        orderDetailView.refresh();
    }

    private void addActionColumn(){
        TableColumn<Product, Void> actionColumn = new TableColumn<>("Action");
        actionColumn.setCellFactory(col -> new TableCell<Product, Void>() {
            private final Button editButton = new Button("Edit");
            private final Button deleteButton = new Button("Delete");

            {
                // Set the action for the Edit button
                editButton.setOnAction(e -> {
                    Product product = getTableView().getItems().get(getIndex());
                    System.out.println("Edit: " + product.getName());
                    //quantitySpinner.getValueFactory().setValue(quantities.get(getIndex()));
                    searchField.setText(product.getName());
                    onClickSearch();
                    Platform.runLater(() -> {
                        quantitySpinner.getValueFactory().setValue(quantities.get(getIndex()));
                        suggestionList.setVisible(false);
                        productList.remove(getIndex());
                        quantities.remove(getIndex());
                    });

                });

                // Set the action for the Delete button
                deleteButton.setOnAction(e -> {
                    Product product = getTableView().getItems().get(getIndex());
                    System.out.println("Delete: " + product.getName());
                    // Add your delete logic here
                    //getTableView().getItems().remove(product);
                    productList.remove(getIndex());
                    quantities.remove(getIndex());
                    //System.out.println(getIndex());
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    // Add buttons to the cell
                    HBox hbox = new HBox(editButton, deleteButton);
                    setGraphic(hbox);
                }
            }
        });
        actionColumn.setMinWidth(200);
        actionColumn.setPrefWidth(300);
        actionColumn.setMaxWidth(5000);
        orderDetailView.getColumns().add(actionColumn);
    }

    private int getQuantity(int index) {
        return quantities.get(index);
    }

    private void paymentBoxLoader(){
        totalText.setText("");
        finalText.setText("0");
        discountText.setText("0");
        ListChangeListener<Object> changeListener = change -> {
            while (change.next()) {
                Platform.runLater(() -> {
                    double total = 0;
                    double fin = 0;
                    double temp = 0;
                    double discount = 0;
                    if (couponField.getText().isEmpty() || coupons.isEmpty()) {
                        discount = 0;
                    } else {
                        //int couponID = Integer.parseInt(couponField.getText());
                        discount = (double) coupons.getFirst().getDiscount() / 100;
                    }
                    DecimalFormat format = new DecimalFormat("#.##");
                    for (int i = 0; i < productList.size(); i++) {
                        temp = productList.get(i).getPrice() * quantities.get(i);
                        total += temp;
                    }
                    fin = total * (1 - discount);

                    String formattedString = format.format(total);
                    if(discount != 0){
                        totalText.setText(formattedString);
                        totalText.setVisible(true);
                    }
                    else{
                        totalText.setText(formattedString);
                        totalText.setVisible(false);
                    }

                    formattedString = format.format(fin);
                    finalText.setText(String.valueOf(formattedString));

                    //formattedString = format.format(discount);
                    discountText.setText(String.valueOf(discount * 100) + "%");
                });
            }
        };
        productList.addListener(changeListener);
        quantities.addListener(changeListener);
        coupons.addListener(changeListener);
    }

    private void checkBoxLoader(){
        checkTakeAway.setOnAction(event -> {
            if (checkTakeAway.isSelected()) {
                //System.out.println("enabled");
                order_table = null;
                tableComboBox.setDisable(true);
                tableComboBox.setValue(null);
            } else {
                //System.out.println("disabled");
                tableComboBox.setDisable(false);
            }
        });
        Platform.runLater(() -> {
            checkTakeAway.setSelected(true);
        });

    }

    @FXML
    private void createClick() throws SQLException {
        Coupon coupon = new Coupon();
        double discount = 0;
        if(!coupons.isEmpty()){
            coupon = coupons.getFirst();
            discount = coupon.getDiscount();
        }
        else{
            coupon = null;
        }

        if(!productList.isEmpty()){
            Datasource.getInstance().createOrderWithDetails(
                    dateField.getText(),
                    customer,
                    order_table,
                    coupon,
                    productList,
                    quantities,
                    Double.parseDouble(totalText.getText()),
                    discount,
                    Double.parseDouble(finalText.getText())
            );
            System.out.println("ok");
            HelperMethods.alertBox("Insert Order to Database successfully", null, "Insert data");
            changeToOrderView();
            //return;
        }
        else{
            System.out.println("No product !");
        }
    }

    private void changeToOrderView(){
        mainDashboardController.btnOrdersOnClick(new ActionEvent());
    }

    public void setMainDashboardController(UserMainDashboardController controller){
        this.mainDashboardController = controller;
    }
}

================
File: src/main/java/controller/users/pages/orders/UserOrdersController.java
================
package controller.users.pages.orders;

import controller.users.UserMainDashboardController;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import model.Datasource;
import model.Order;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class UserOrdersController implements Initializable {
    public TableView<Order> tableOrdersPage;
    public TableColumn<Order, Integer> idColumn;
    public TableColumn<Order, Double> paidColumn;
    public TableColumn<Order, String> dateColumn;
    public TableColumn<Order, String> employeeColumn;
    public TableColumn<Order, Integer> couponColumn;
    public TableColumn<Order, Integer> tableColumn;
    public TableColumn<Order, String> customerColumn;
    public TextField searchField;
    public ComboBox<String> searchComboBox;

    private ObservableList<Order> orderList;
    private ObservableList<Order> filteredList;

    public UserMainDashboardController mainDashboardController;

    @FXML
    public void listOrders() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        paidColumn.setCellValueFactory(new PropertyValueFactory<>("fin"));
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("order_date"));

        couponColumn.setCellValueFactory(new PropertyValueFactory<>("discount"));
        tableColumn.setCellValueFactory(new PropertyValueFactory<>("tableID"));
        employeeColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer emid = filteredList.get(index).getEmployeeID();
            return new SimpleStringProperty(Datasource.getInstance().searchOneEmployeeById(emid).getFullname());
        });
        customerColumn.setCellValueFactory(cellData -> {
            int index = tableOrdersPage.getItems().indexOf(cellData.getValue());
            Integer cusid = filteredList.get(index).getCustomerID();
            if(cusid == null){
                return null;
            }
            else{
                return new SimpleStringProperty(Datasource.getInstance().searchOneCustomerById(cusid).getName());
            }

        });
        addActionButton();
        //filteredList = FXCollections.observableArrayList(orderList);
        tableOrdersPage.setItems(filteredList);
    }

    @FXML
    private void addActionButton(){
        TableColumn<Order, Void> actionColumn = new TableColumn<>("Action");
        actionColumn.setCellFactory(col -> new TableCell<Order, Void>() {
            private final Button viewButton = new Button("View");
            //private final Button deleteButton = new Button("Delete");

            {
                // Set the action for the Edit button
                viewButton.setOnAction(e -> {
                    try {
                        mainDashboardController.viewOrderDetail(new ActionEvent(), getTableRow().getItem());
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    // Add buttons to the cell
                    HBox hbox = new HBox(viewButton);
                    setGraphic(hbox);
                }
            }
        });
        actionColumn.setMinWidth(100);
        actionColumn.setPrefWidth(150);
        actionColumn.setMaxWidth(5000);
        tableOrdersPage.getColumns().add(actionColumn);
    }

    public void btnOrdersSearchOnAction(ActionEvent actionEvent) {
        // TODO
        //  Add orders search functionality.
        System.out.println("TODO: Add orders search functionality.");
    }

    private void viewClick(){

    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        orderList = FXCollections.observableArrayList(Datasource.getInstance().getAllOrder());
        filteredList = FXCollections.observableArrayList(orderList);
        listOrders();
        loadSearch();
    }

    public void setMainDashboardController(UserMainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }

    public void loadSearch(){
        searchComboBox.getItems().addAll("All", "By id", "By employee name", "By customer name", "By date", "By table", "By coupon id");

        searchComboBox.valueProperty().addListener((obs, oldValue, newValue) -> {
            searchField.setText("");
            if(newValue.equals("All")){
                searchField.setDisable(true);
            }
            else {
                searchField.setDisable(false);
            }
        });
        searchField.textProperty().addListener((obs, oldText, newText) -> {
            applyFilter(searchComboBox.getValue(), newText);
            if(newText == null){
                applyFilter("All", newText);
            }
            if(searchComboBox.getValue().equals("All")){
                searchField.setDisable(true);
            }
            else {
                searchField.setDisable(false);
            }
        });
        searchComboBox.setValue("All");
    }

    private void applyFilter(String filterOption, String search) {
        filteredList.clear();
        if(search.isEmpty()){
            filteredList.addAll(orderList);
            return;
        }
        switch (filterOption) {
            case "All":
                filteredList.addAll(orderList);
                break;
            case "By id":
                filteredList.addAll(orderList.filtered(order -> String.valueOf(order.getId()).contains(search)));
                break;
            case "By employee name":
                filteredList.addAll(orderList.filtered(order -> {
                    if(order.getEmployeeID() == null){
                        return true;
                    }
                    //boolean check =
                    String name = Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname().toLowerCase();
                    //System.out.println(name);
                    return name.contains(search.toLowerCase());
                    //return check;
                }));
                break;
            case "By customer name":
                filteredList.addAll(orderList.filtered(order -> {
                    if(order.getCustomerID() == null){
                        return true;
                    }
                    String name = Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName().toLowerCase();
                    return name.contains(search.toLowerCase());
                }));
                break;
            case "By date":
                filteredList.addAll(orderList.filtered(order -> {
                    String date = order.getOrder_date();
                    return date.contains(search);
                }));
                break;
            case "By table":
                filteredList.addAll(orderList.filtered(order -> {
                    if(order.getTableID() == null){
                        if("take away".contains(search.toLowerCase())){
                            return true;
                        }
                        return false;
                    }
                    String table = String.valueOf(order.getTableID());
                    return table.contains(search);
                }));
                break;
            case "By coupon id":
                filteredList.addAll(orderList.filtered(order -> {
                    if(order.getCouponID() == null){
                        if("no coupon".contains(search.toLowerCase())){
                            return true;
                        }
                        return false;
                    }

                    String id = String.valueOf(order.getCouponID());
                    return id.contains(search);
                }));
                break;
            default:
                filteredList.addAll(orderList);
                break;

        }
    }
}

================
File: src/main/java/controller/users/pages/orders/ViewOrderController.java
================
package controller.users.pages.orders;

import controller.users.UserMainDashboardController;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import model.*;

import java.net.URL;
import java.text.DecimalFormat;
import java.util.List;
import java.util.ResourceBundle;

public class ViewOrderController implements Initializable {
    public UserMainDashboardController mainDashboardController;

    public TextField orderIdField;
    public TextField employeeField;
    public TextField customerField;
    public TextField tableIdField;
    public TextField tableCapacity;
    public TextField couponIdField;
    public Text totalText;
    public Text finalText;
    public Text discountText;
    public TableView<Product> productTable;
    public TableColumn<Product, Integer> idColumn;
    public TableColumn<Product, String> nameColumn;
    public TableColumn<Product, Double> priceColumn;
    public TableColumn<Product, Integer> quantityColumn;
    public TableColumn<Product, Double> totalColumn;
    public TableColumn<Product, String> categoryColumn;
    public Button backToOrderBtn;

    private ObservableList<Product> productList = FXCollections.observableArrayList();
    private ObservableList<OrderDetail> orderDetailsList;

    private Order order;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        //orderIdField.setText(String.valueOf(order.getId()));
        loadTable();
    }

    public void setMainDashboardController(UserMainDashboardController mainDashboardController) {
        this.mainDashboardController = mainDashboardController;
    }

    public void setOrder(Order order) {
        this.order = order;
    }
    public void setProductList(List<Product> list){
        productList = FXCollections.observableArrayList(list);
    }
    public void setOrderDetailsList(List<OrderDetail> list){
        orderDetailsList = FXCollections.observableArrayList(list);
    }

    public void loadProductList(){
        for(OrderDetail detail: orderDetailsList){
            Product product = Datasource.getInstance().searchOneProductById(detail.getProductID());
            productList.add(product);
            System.out.println(product.getName());
        }
        productTable.setItems(productList);
    }

    public void loadTable(){

        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        categoryColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            String category = Datasource.getInstance().getCategoryName(product.getCategory_id());
            return new SimpleStringProperty(category);
        });
        quantityColumn.setCellValueFactory(cellData -> {
            // Use the row index to get the corresponding quantity
            int index = productTable.getItems().indexOf(cellData.getValue());
            return new SimpleIntegerProperty(orderDetailsList.get(index).getQuantity()).asObject();
        });
        totalColumn.setCellValueFactory(cellData -> {
            Product product = cellData.getValue();
            int index = productTable.getItems().indexOf(product);
            return new SimpleDoubleProperty(orderDetailsList.get(index).getTotal()).asObject();
        });
    }

    @FXML
    private void toOrder(){
        mainDashboardController.btnOrdersOnClick(new ActionEvent());
    }
}

================
File: src/main/java/controller/users/pages/products/AddProductController.java
================
package controller.users.pages.products;

import javafx.collections.FXCollections;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import model.Categories;
import model.Datasource;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class AddProductController extends ProductsController {

    @FXML
    public ComboBox<Categories> fieldAddProductCategoryId;
    public TextField fieldAddProductName;
    public TextField fieldAddProductPrice;
    public TextField fieldAddProductQuantity;
    public TextArea fieldAddProductDescription;
    public Text viewProductResponse;
    public ImageView productImageView; // New
    public Button selectImageButton; // New

    private File selectedImageFile; // New
    private static final String IMAGE_UPLOAD_PATH = "/view/resources/img/coffee_pictures/"; // New

    @FXML
    private void initialize() {
        fieldAddProductCategoryId.setItems(FXCollections.observableArrayList(
                Datasource.getInstance().getProductCategories(Datasource.ORDER_BY_ASC)));

        TextFormatter<Double> textFormatterDouble = formatDoubleField();
        TextFormatter<Integer> textFormatterInt = formatIntField();
        fieldAddProductPrice.setTextFormatter(textFormatterDouble);
        fieldAddProductQuantity.setTextFormatter(textFormatterInt);

        // Initialize image view with placeholder
        productImageView.setFitHeight(200);
        productImageView.setFitWidth(200);
        productImageView.setPreserveRatio(true);
        productImageView.setImage(DEFAULT_IMAGE);
    }

    @FXML
    private void selectImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Product Image");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );

        selectedImageFile = fileChooser.showOpenDialog(selectImageButton.getScene().getWindow());
        if (selectedImageFile != null) {
            Image image = new Image(selectedImageFile.toURI().toString());
            productImageView.setImage(image);
        }
    }

    private String saveImageFile() {
        if (selectedImageFile == null) {
            return null;
        }

        try {
            String projectPath = System.getProperty("user.dir");
            String fileName = System.currentTimeMillis() + "_" + selectedImageFile.getName();
            Path destinationPath = Paths.get(projectPath, "src/main/resources" + IMAGE_UPLOAD_PATH, fileName);

            // Create directories if they don't exist
            Files.createDirectories(destinationPath.getParent());

            // Copy the file
            Files.copy(selectedImageFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);

            return IMAGE_UPLOAD_PATH + fileName;
        } catch (Exception e) {
            System.err.println("Error saving image: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    @FXML
    private void btnAddProductOnAction() {
        Categories category = fieldAddProductCategoryId.getSelectionModel().getSelectedItem();
        int cat_id = 0;
        if (category != null) {
            cat_id = category.getId();
        }

        assert category != null;
        if (areProductInputsValid(fieldAddProductName.getText(), fieldAddProductDescription.getText(),
                fieldAddProductPrice.getText(), fieldAddProductQuantity.getText(), cat_id)) {

            String productName = fieldAddProductName.getText();
            String productDescription = fieldAddProductDescription.getText();
            double productPrice = Double.parseDouble(fieldAddProductPrice.getText());
            int productQuantity = Integer.parseInt(fieldAddProductQuantity.getText());
            int productCategoryId = category.getId();
            String imagePath = saveImageFile();
            boolean isEnabled = true; // Change this logic as per your requirements

            Task<Boolean> addProductTask = new Task<Boolean>() {
                @Override
                protected Boolean call() {
                    return Datasource.getInstance().insertNewProduct(
                            productName, productDescription, productPrice,
                            productQuantity, productCategoryId, imagePath, isEnabled);
                }
            };

            addProductTask.setOnSucceeded(e -> {
                if (addProductTask.valueProperty().get()) {
                    viewProductResponse.setVisible(true);
                    System.out.println("Product added!");

                    // Clear the form
                    clearForm();

                    // Refresh the products list
                    listProducts();
                }
            });

            new Thread(addProductTask).start();
        }
    }

    private void clearForm() {
        fieldAddProductName.clear();
        fieldAddProductDescription.clear();
        fieldAddProductPrice.clear();
        fieldAddProductQuantity.clear();
        fieldAddProductCategoryId.getSelectionModel().clearSelection();
        productImageView.setImage(DEFAULT_IMAGE);
        selectedImageFile = null;
    }
}

================
File: src/main/java/controller/users/pages/products/CategoryController.java
================
package controller.users.pages.products;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import model.Categories;
import model.Datasource;

public class CategoryController {
    @FXML
    public TextField fieldCategoryName;
    @FXML
    public TextField fieldCategoryDescription;
    @FXML
    public TableView<Categories> categoriesTable; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, Integer> categoryIdColumn; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, String> categoryNameColumn; // Specify the type for type safety
    @FXML
    public TableColumn<Categories, String> descriptionColumn; // Specify the type for type safety

    private ObservableList<Categories> categoryList; // Store the categories in an observable list
    private Datasource datasource; // Reference to the Datasource

    public CategoryController() {
        datasource = Datasource.getInstance(); // Get the instance of Datasource
        categoryList = FXCollections.observableArrayList(); // Create the observable list
        // Do not load categories here
    }

    @FXML
    private void initialize() {
        loadCategories(); // Load categories once the UI components are initialized
    }

    private void loadCategories() {
        categoryList.setAll(datasource.getAllCategories()); // Fetch categories from the datasource
        categoriesTable.setItems(categoryList); // Set the items for the TableView
    }

    public void btnAddCategoryOnClick(ActionEvent actionEvent) {
        String name = fieldCategoryName.getText();
        String description = fieldCategoryDescription.getText();

        if (name.isEmpty() || description.isEmpty()) {
            showAlert("Error", "Please fill in all fields.");
            return;
        }

        Categories newCategory = new Categories(); // Create a new Categories object
        newCategory.setName(name);
        newCategory.setDescription(description);

        // Add the new category to the datasource
        if (datasource.addCategory(newCategory)) {
            categoryList.add(newCategory); // Add to the observable list
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not add the category. Please try again.");
        }
    }

    public void btnEditCategoryOnClick(ActionEvent actionEvent) {
        Categories selectedCategory = categoriesTable.getSelectionModel().getSelectedItem();

        if (selectedCategory == null) {
            showAlert("Error", "Please select a category to edit.");
            return;
        }

        String name = fieldCategoryName.getText();
        String description = fieldCategoryDescription.getText();

        if (name.isEmpty() || description.isEmpty()) {
            showAlert("Error", "Please fill in all fields.");
            return;
        }

        selectedCategory.setName(name); // Update the selected category
        selectedCategory.setDescription(description);

        // Update via datasource
        if (datasource.updateCategory(selectedCategory)) {
            categoriesTable.refresh(); // Refresh the table to reflect changes
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not update the category. Please try again.");
        }
    }

    public void btnDeleteCategoryOnClick(ActionEvent actionEvent) {
        Categories selectedCategory = categoriesTable.getSelectionModel().getSelectedItem();

        if (selectedCategory == null) {
            showAlert("Error", "Please select a category to delete.");
            return;
        }

        // Delete via datasource
        if (datasource.deleteCategory(selectedCategory.getId())) {
            categoryList.remove(selectedCategory); // Remove from the observable list
            clearFields(); // Clear input fields
        } else {
            showAlert("Error", "Could not delete the category. Please try again.");
        }
    }

    private void clearFields() {
        fieldCategoryName.clear();
        fieldCategoryDescription.clear();
        categoriesTable.getSelectionModel().clearSelection(); // Clear selection in the table
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: src/main/java/controller/users/pages/products/EditProductController.java
================
package controller.users.pages.products;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import model.Categories;
import model.Datasource;
import model.Product;
import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class EditProductController extends ProductsController {

    @FXML
    public Text viewProductResponse;
    public TextField fieldEditProductName;
    public TextField fieldEditProductPrice;
    public TextField fieldEditProductQuantity;
    public ComboBox<Categories> fieldEditProductCategoryId;
    public TextArea fieldEditProductDescription;
    public TextField fieldEditProductId;
    public Text viewProductName;
    public ImageView productImageView; // New
    public Button selectImageButton; // New

    private File selectedImageFile; // New
    private static final String IMAGE_UPLOAD_PATH = "/view/resources/img/coffee_pictures/"; // New

    @FXML
    private void initialize() {
        fieldEditProductCategoryId.setItems(FXCollections.observableArrayList(Datasource.getInstance().getProductCategories(Datasource.ORDER_BY_ASC)));

        TextFormatter<Double> textFormatterDouble = formatDoubleField();
        TextFormatter<Integer> textFormatterInt = formatIntField();
        fieldEditProductPrice.setTextFormatter(textFormatterDouble);
        fieldEditProductQuantity.setTextFormatter(textFormatterInt);

        // Initialize image view with placeholder
        productImageView.setFitHeight(200);
        productImageView.setFitWidth(200);
        productImageView.setPreserveRatio(true);
        productImageView.setImage(DEFAULT_IMAGE);
    }

    @FXML
    private void selectImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Product Image");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );

        selectedImageFile = fileChooser.showOpenDialog(selectImageButton.getScene().getWindow());
        if (selectedImageFile != null) {
            Image image = new Image(selectedImageFile.toURI().toString());
            productImageView.setImage(image);
        }
    }

    private String saveImageFile() {
        if (selectedImageFile == null) {
            return null;
        }

        try {
            String fileName = System.currentTimeMillis() + "_" + selectedImageFile.getName();
            String relativePath = "/view/resources/img/coffee_pictures/" + fileName;
            Path destinationPath = Paths.get(System.getProperty("user.dir"), "src/main/resources" + relativePath);

            // Create directories if they don't exist
            Files.createDirectories(destinationPath.getParent());

            // Copy the file
            Files.copy(selectedImageFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);

            return relativePath;  // Return the relative path instead of just IMAGE_UPLOAD_PATH + fileName
        } catch (Exception e) {
            System.err.println("Error saving image: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    @FXML
    private void btnEditProductOnAction() {
        Categories category = fieldEditProductCategoryId.getSelectionModel().getSelectedItem();
        int cat_id = category != null ? category.getId() : 0; // Only set if a category is selected

        // Validate the product inputs
        if (areProductInputsValid(
                fieldEditProductName.getText(),
                fieldEditProductDescription.getText(),
                fieldEditProductPrice.getText(),
                fieldEditProductQuantity.getText(),
                cat_id)) {

            int productId = Integer.parseInt(fieldEditProductId.getText());
            String productName = fieldEditProductName.getText();
            String productDescription = fieldEditProductDescription.getText();
            double productPrice = Double.parseDouble(fieldEditProductPrice.getText());
            int productQuantity = Integer.parseInt(fieldEditProductQuantity.getText());

            // Attempt to save the new image
            String newImagePath = saveImageFile(); // This will return null if no new image was selected

            // If no new image is selected, retain the existing image path
            String finalImagePath = (newImagePath != null) ? newImagePath : getCurrentImagePath(productId);
            boolean isEnabled = true; // Change this logic as per your requirements


            // Prepare and execute update task
            Task<Boolean> editProductTask = new Task<Boolean>() {
                @Override
                protected Boolean call() {
                    return Datasource.getInstance().updateOneProduct(
                            productId, productName, productDescription,
                            productPrice, productQuantity, cat_id, finalImagePath, isEnabled);
                }
            };

            editProductTask.setOnSucceeded(e -> {
                if (editProductTask.valueProperty().get()) {
                    viewProductResponse.setVisible(true);
                    System.out.println("Product edited!");
                    clearForm(); // Optionally clear the form
                }
            });

            new Thread(editProductTask).start();
        }
    }

    private String getCurrentImagePath(int productId) {
        Product product = Datasource.getInstance().getOneProduct(productId);
        return product != null ? product.getImage() : null;
    }




    public void fillEditingProductFields(int product_id) {
        Task<ObservableList<Product>> fillProductTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(Datasource.getInstance().getOneProduct(product_id));
            }
        };

        fillProductTask.setOnSucceeded(e -> {
            if (!fillProductTask.valueProperty().getValue().isEmpty()) {
                Product product = fillProductTask.valueProperty().getValue().get(0);
                viewProductName.setText("Editing: " + product.getName());
                fieldEditProductId.setText(String.valueOf(product.getId()));
                fieldEditProductName.setText(product.getName());
                fieldEditProductPrice.setText(String.valueOf(product.getPrice()));
                fieldEditProductQuantity.setText(String.valueOf(product.getQuantity()));
                fieldEditProductDescription.setText(product.getDescription());

                // Set the selected category correctly
                Categories category = new Categories();
                category.setId(product.getCategory_id());
                category.setName(product.getCategory_name());
                fieldEditProductCategoryId.getSelectionModel().select(category);

                // Load the product image
                loadProductImage(product.getImage());
            }
        });

        new Thread(fillProductTask).start();
    }

    private void loadProductImage(String imagePath) {
        if (imagePath != null && !imagePath.isEmpty()) {
            try {
                String resourcePath = imagePath.startsWith("/") ? imagePath : "/view/resources/img/coffee_pictures/" + imagePath;
                URL imageUrl = getClass().getResource(resourcePath);

                if (imageUrl != null) {
                    productImageView.setImage(new Image(imageUrl.toString()));
                } else {
                    // If the image is not found in resources, try to load from the file system
                    File imageFile = new File(System.getProperty("user.dir"), "src/main/resources" + resourcePath);
                    if (imageFile.exists()) {
                        productImageView.setImage(new Image(imageFile.toURI().toString()));
                    } else {
                        System.err.println("Image not found: " + imagePath);
                        productImageView.setImage(DEFAULT_IMAGE);
                    }
                }
            } catch (Exception e) {
                System.err.println("Error loading image: " + e.getMessage());
                productImageView.setImage(DEFAULT_IMAGE);
            }
        } else {
            productImageView.setImage(DEFAULT_IMAGE);
        }
    }


    private void loadDefaultImage() {
        productImageView.setImage(DEFAULT_IMAGE);
        System.out.println("Loaded default image.");
    }

    private void clearForm() {
        fieldEditProductName.clear();
        fieldEditProductDescription.clear();
        fieldEditProductPrice.clear();
        fieldEditProductQuantity.clear();
        fieldEditProductCategoryId.getSelectionModel().clearSelection();
        productImageView.setImage(DEFAULT_IMAGE);
        selectedImageFile = null;
    }
}

================
File: src/main/java/controller/users/pages/products/ProductsController.java
================
package controller.users.pages.products;
import javafx.geometry.Insets;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import app.utils.HelperMethods;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.StringConverter;
import model.Datasource;
import model.Product;
import javafx.scene.control.Dialog;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;


import java.io.File;
import java.net.URL;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;

public class ProductsController {


    @FXML
    public TextField fieldProductsSearch;
    @FXML
    public Text viewProductResponse;
    @FXML
    public GridPane formEditProductView;
    @FXML
    private FlowPane productsContainer;
    @FXML
    private StackPane productsContent;
    @FXML
    private TableView<Product> tableProductsPage;
    private TableColumn<Product, Void> colBtnEdit;

    public static TextFormatter<Double> formatDoubleField() {
        Pattern validEditingState = Pattern.compile("-?(([1-9][0-9]*)|0)?(\\.[0-9]*)?");
        UnaryOperator<TextFormatter.Change> filter = c -> {
            String text = c.getControlNewText();
            if (validEditingState.matcher(text).matches()) {
                return c;
            } else {
                return null;
            }
        };
        StringConverter<Double> converter = new StringConverter<Double>() {
            @Override
            public Double fromString(String s) {
                if (s.isEmpty() || "-".equals(s) || ".".equals(s) || "-.".equals(s)) {
                    return 0.0;
                } else {
                    return Double.valueOf(s);
                }
            }

            @Override
            public String toString(Double d) {
                return d.toString();
            }
        };

        return new TextFormatter<>(converter, 0.0, filter);
    }

    public static TextFormatter<Integer> formatIntField() {
        Pattern validEditingState = Pattern.compile("^[0-9]+$");
        UnaryOperator<TextFormatter.Change> filter = c -> {
            String text = c.getControlNewText();
            if (validEditingState.matcher(text).matches()) {
                return c;
            } else {
                return null;
            }
        };
        StringConverter<Integer> converter = new StringConverter<Integer>() {
            @Override
            public Integer fromString(String s) {
                if (s.isEmpty() || "-".equals(s) || ".".equals(s) || "-.".equals(s)) {
                    return 0;
                } else {
                    return Integer.valueOf(s);
                }
            }

            @Override
            public String toString(Integer d) {
                return d.toString();
            }
        };

        return new TextFormatter<>(converter, 0, filter);
    }

    public static final Image DEFAULT_IMAGE = new Image(
            ProductsController.class.getResourceAsStream("/view/resources/img/coffee_pictures/placeholder.png"),
            250, 250, true, true
    );

    @FXML
    private void initialize() {
        System.out.println("Project Directory: " + System.getProperty("user.dir"));

        try {
            URL resourceUrl = getClass().getResource("/view/resources/img/coffee_pictures/");
            if (resourceUrl != null) {
                System.out.println("Resources directory exists at: " + resourceUrl);
                File resourceDir = new File(resourceUrl.toURI());
                if (resourceDir.exists() && resourceDir.isDirectory()) {
                    System.out.println("Contents of image directory:");
                    for (File file : resourceDir.listFiles()) {
                        System.out.println(" - " + file.getName());
                    }
                }
            } else {
                System.out.println("Resources directory not found!");
            }
        } catch (Exception e) {
            System.err.println("Error checking resources:");
            e.printStackTrace();
        }

        setupImageColumn();
        listProducts();
    }

    private void setupImageColumn() {
        TableColumn<Product, ImageView> imageColumn = (TableColumn<Product, ImageView>) tableProductsPage.getColumns()
                .stream()
                .filter(col -> col.getText().equals("Image"))
                .findFirst()
                .orElse(null);

        if (imageColumn != null) {
            imageColumn.setCellValueFactory(null);

            imageColumn.setCellFactory(col -> new TableCell<Product, ImageView>() {
                @Override
                protected void updateItem(ImageView item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty || getTableRow() == null || getTableRow().getItem() == null) {
                        setGraphic(null);
                    } else {
                        Product product = (Product) getTableRow().getItem();
                        if (product.getImageView() != null) {
                            setGraphic(product.getImageView());
                        } else {
                            setGraphic(null);
                        }
                    }
                }
            });
        }
    }

    @FXML
    public void listProducts() {
        Task<ObservableList<Product>> getAllProductsTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(Datasource.getInstance().getAllProducts(Datasource.ORDER_BY_NONE));
            }
        };

        getAllProductsTask.setOnSucceeded(e -> {
            productsContainer.getChildren().clear();
            ObservableList<Product> products = getAllProductsTask.getValue();
            for (Product product : products) {
                try {
                    addProductCard(product);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        new Thread(getAllProductsTask).start();
    }

    private void addProductCard(Product product) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/users/pages/products/product-card.fxml"));
        VBox productCard = loader.load();

        ImageView productImage = (ImageView) productCard.lookup("#productImage");
        Text productName = (Text) productCard.lookup("#productName");
        Text productCategory = (Text) productCard.lookup("#productCategory");
        Text productPrice = (Text) productCard.lookup("#productPrice");
        Text productStock = (Text) productCard.lookup("#productStock");
        Button editButton = (Button) productCard.lookup("#editButton");
        Button toggleStatusButton = (Button) productCard.lookup("#toggleStatusButton");

        productImage.setOnMouseClicked(event -> showProductDescription(product));
        updateProductCardStatus(product, productCard, productName, toggleStatusButton);

        toggleStatusButton.setOnAction(event -> {
            product.setDisabled(!product.isDisabled());
            if (Datasource.getInstance().updateProductStatus(product.getId(), product.isDisabled())) {
                updateProductCardStatus(product, productCard, productName, toggleStatusButton);
            } else {
                new Alert(Alert.AlertType.ERROR, "Failed to update the product status. Please try again.").showAndWait();
            }
        });

        Task<Image> loadImageTask = new Task<Image>() {
            @Override
            protected Image call() {
                if (product.getImage() != null && !product.getImage().isEmpty()) {
                    try {
                        URL resourceUrl = getClass().getResource(product.getImage());
                        if (resourceUrl != null) {
                            return new Image(resourceUrl.toString(), 350, 250, false, true);
                        }
                        Path absolutePath = Paths.get(System.getProperty("user.dir"), "src/main/resources" + product.getImage());
                        if (Files.exists(absolutePath)) {
                            return new Image(absolutePath.toUri().toString(), 350, 250, false, true);
                        }
                    } catch (Exception ignored) {}
                }
                return DEFAULT_IMAGE;
            }
        };

        loadImageTask.setOnSucceeded(event -> {
            productImage.setImage(loadImageTask.getValue());
            productImage.setFitWidth(350);
            productImage.setFitHeight(250);
            productImage.setPreserveRatio(false);
        });

        loadImageTask.setOnFailed(event -> productImage.setImage(DEFAULT_IMAGE));
        new Thread(loadImageTask).start();

        productName.setText(product.getName());
        productCategory.setText(product.getCategory_name());
        productPrice.setText(String.format("$%.2f", product.getPrice()));
        productStock.setText(String.format("Stock: %d", product.getQuantity()));
        productCard.setStyle(productCard.getStyle() + "; -fx-cursor: hand;");

        editButton.setOnAction(event -> btnEditProduct(product.getId()));

        productsContainer.getChildren().add(productCard);
    }

    private void updateProductCardStatus(Product product, VBox productCard, Text productName, Button toggleStatusButton) {
        if (product.isDisabled()) {
            productCard.getStyleClass().add("disabled");
            productName.getStyleClass().add("unavailable");
            productName.setText(product.getName() + " (Unavailable)");
            toggleStatusButton.setText("Enable");
            toggleStatusButton.getStyleClass().remove("warning");
            toggleStatusButton.getStyleClass().add("enable");
        } else {
            productCard.getStyleClass().remove("disabled");
            productName.getStyleClass().remove("unavailable");
            productName.setText(product.getName());
            toggleStatusButton.setText("Disable");
            toggleStatusButton.getStyleClass().remove("enable");
            toggleStatusButton.getStyleClass().add("warning");
        }
    }

    private void showProductDescription(Product product) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(product.getName() + " Description");
        alert.setHeaderText(null);
        alert.setContentText(product.getDescription());

        alert.getButtonTypes().setAll(ButtonType.OK);
        alert.showAndWait();
    }

    @FXML
    private void addActionButtonsToTable() {
        if (colBtnEdit == null) {
            colBtnEdit = new TableColumn<>("Actions");

            Callback<TableColumn<Product, Void>, TableCell<Product, Void>> cellFactory = param -> new TableCell<Product, Void>() {
                private final Button editButton = new Button("Edit");
                private final HBox buttonsPane = new HBox();

                {
                    editButton.getStyleClass().addAll("button", "xs", "primary");
                    editButton.setOnAction((ActionEvent event) -> {
                        Product productData = getTableView().getItems().get(getIndex());
                        btnEditProduct(productData.getId());
                    });

                    buttonsPane.setSpacing(10);
                    buttonsPane.getChildren().add(editButton);
                }

                @Override
                public void updateItem(Void item, boolean empty) {
                    super.updateItem(item, empty);
                    setGraphic(empty ? null : buttonsPane);
                }
            };

            colBtnEdit.setCellFactory(cellFactory);
            tableProductsPage.getColumns().add(colBtnEdit);
        }
    }

    @FXML
    private void btnProductsSearchOnAction() {
        Task<ObservableList<Product>> searchProductsTask = new Task<ObservableList<Product>>() {
            @Override
            protected ObservableList<Product> call() {
                return FXCollections.observableArrayList(
                        Datasource.getInstance().searchProducts(
                                fieldProductsSearch.getText().toLowerCase(),
                                Datasource.ORDER_BY_NONE,
                                false // Set to true if you want to include disabled products
                        ));
            }
        };

        searchProductsTask.setOnSucceeded(e -> {
            productsContainer.getChildren().clear();
            ObservableList<Product> products = searchProductsTask.getValue();
            for (Product product : products) {
                try {
                    addProductCard(product);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        new Thread(searchProductsTask).start();
    }



    @FXML
    private void btnAddProductOnClick() {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/users/pages/products/add-product.fxml"));
            AnchorPane root = fxmlLoader.load();

            URL cssUrl = getClass().getResource("/css/form.css");
            if (cssUrl != null) {
                root.getStylesheets().add(cssUrl.toExternalForm());
            }

            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void btnEditProduct(int product_id) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/users/pages/products/edit-product.fxml"));
            AnchorPane root = fxmlLoader.load();

            URL cssUrl = getClass().getResource("/css/form.css");
            if (cssUrl != null) {
                root.getStylesheets().add(cssUrl.toExternalForm());
            }

            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);

            EditProductController controller = fxmlLoader.getController();
            controller.fillEditingProductFields(product_id);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    boolean areProductInputsValid(String fieldAddProductName, String fieldAddProductDescription, String fieldAddProductPrice, String fieldAddProductQuantity, int productCategoryId) {
        // TODO
        //  Better validate inputs.
        System.out.println("TODO: Better validate inputs.");
        String errorMessage = "";


        if (fieldAddProductName == null || fieldAddProductName.length() < 3) {
            errorMessage += "please enter a valid name!\n";
        }
        if (fieldAddProductDescription == null || fieldAddProductDescription.length() < 5) {
            errorMessage += "Description is not valid!\n";
        }
        if (!HelperMethods.validateProductPrice(fieldAddProductPrice)) {
            errorMessage += "Price is not valid!\n";
        }

        if (!HelperMethods.validateProductQuantity(fieldAddProductQuantity)) {
            errorMessage += "Not valid quantity!\n";
        }

        if (errorMessage.length() == 0) {
            return true;
        } else {
            // Show the error message.
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Invalid Fields");
            alert.setHeaderText("Please correct invalid fields");
            alert.setContentText(errorMessage);

            alert.showAndWait();

            return false;
        }

    }
    @FXML
    public void btnManageCategoryOnClick(ActionEvent actionEvent) {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/users/pages/products/categories.fxml"));
            AnchorPane root = fxmlLoader.load();
            productsContent.getChildren().clear();
            productsContent.getChildren().add(root);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

================
File: src/main/java/controller/users/pages/UserHomeController.java
================
package controller.users.pages;

import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Label;
import model.Datasource;

public class UserHomeController {

    @FXML
    public Label productsCount;
    @FXML
    public Label customersCount;
    @FXML
    public LineChart<String, Number> dataChart;

    @FXML
    public void initialize() {
        // Initialize the chart with product and customer data
        setupLineChart();
        // Load product and customer counts
        getDashboardProdCount();
        getDashboardCostCount();
    }

    private void setupLineChart() {
        XYChart.Series<String, Number> productSeries = new XYChart.Series<>();
        productSeries.setName("Products");

        XYChart.Series<String, Number> customerSeries = new XYChart.Series<>();
        customerSeries.setName("Customers");

        // Adding placeholder values (0) initially
        productSeries.getData().add(new XYChart.Data<>("Product Count", 0));
        customerSeries.getData().add(new XYChart.Data<>("Employee Count", 0));

        // Add the series to the chart
        dataChart.getData().addAll(productSeries, customerSeries);
    }

    public void getDashboardProdCount() {
        Task<Integer> getDashProdCount = new Task<Integer>() {
            @Override
            protected Integer call() {
                return Datasource.getInstance().countAllProducts();
            }
        };

        getDashProdCount.setOnSucceeded(e -> {
            int productCount = getDashProdCount.valueProperty().getValue();
            productsCount.setText(String.valueOf(productCount));

            // Update the chart with actual product count
            XYChart.Series<String, Number> productSeries = dataChart.getData().get(0); // Products series is the first one
            productSeries.getData().clear(); // Clear placeholder data
            productSeries.getData().add(new XYChart.Data<>("Product Count", productCount));
        });

        new Thread(getDashProdCount).start();
    }

    public void getDashboardCostCount() {
        Task<Integer> getDashCostCount = new Task<Integer>() {
            @Override
            protected Integer call() {
                return Datasource.getInstance().countAllCustomers();
            }
        };

        getDashCostCount.setOnSucceeded(e -> {
            int customerCount = getDashCostCount.valueProperty().getValue();
            customersCount.setText(String.valueOf(customerCount));

            // Update the chart with actual customer count
            XYChart.Series<String, Number> customerSeries = dataChart.getData().get(1); // Customers series is the second one
            customerSeries.getData().clear(); // Clear placeholder data
            customerSeries.getData().add(new XYChart.Data<>("Employee Count", customerCount));
        });

        new Thread(getDashCostCount).start();
    }
}

================
File: src/main/java/controller/users/UserMainDashboardController.java
================
package controller.users;

import controller.UserSessionController;
import controller.users.pages.*;
import controller.users.pages.orders.NewOrderController;
import controller.users.pages.orders.UserOrdersController;
import controller.users.pages.orders.ViewOrderController;
import javafx.event.ActionEvent;
import controller.users.pages.products.ProductsController;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import model.Datasource;
import model.Order;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

public class UserMainDashboardController implements Initializable {
    public Button btnHome;
    public Button btnProducts;
    public Button btnOrders;
    public Button lblLogOut;
    public AnchorPane dashHead;
    public Button btnNewOrder;
    @FXML
    private StackPane dashContent;
    @FXML
    private Label lblUsrName;

    public void btnHomeOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/home/home.fxml");
        UserHomeController homeController = fxmlLoader.getController();
        homeController.getDashboardProdCount();
        homeController.getDashboardCostCount();
    }

    public void btnOrdersOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/orders/orders.fxml");
        UserOrdersController ordersController = fxmlLoader.getController();
        ordersController.setMainDashboardController(this);
    }


    public void btnProductsOnClick(ActionEvent actionEvent) {
        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/products/products.fxml");
        ProductsController userController = fxmlLoader.getController();
        userController.listProducts();
    }


    public void btnLogOutOnClick(ActionEvent actionEvent) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setHeaderText("Are you sure that you want to log out?");
        alert.setTitle("Log Out?");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == ButtonType.OK) {
            UserSessionController.cleanUserSession();
            Stage dialogStage;
            new Stage();
            Node node = (Node) actionEvent.getSource();
            dialogStage = (Stage) node.getScene().getWindow();
            dialogStage.close();
            Scene scene = new Scene(FXMLLoader.load(getClass().getResource("/view/login.fxml")));
            dialogStage.setScene(scene);
            dialogStage.show();
        }
    }

    public void onClickNewOrder(ActionEvent actionEvent) throws IOException{
        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/orders/newOrder.fxml");
        NewOrderController controller = fxmlLoader.getController();
        controller.setMainDashboardController(this);
    }

    private FXMLLoader loadFxmlPage(String view_path) {
        FXMLLoader fxmlLoader = new FXMLLoader();
        try {
            fxmlLoader.load(getClass().getResource(view_path).openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        AnchorPane root = fxmlLoader.getRoot();
        dashContent.getChildren().clear();
        dashContent.getChildren().add(root);

        return fxmlLoader;
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        lblUsrName.setText(UserSessionController.getUserFullName());

        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/home/home.fxml");
        UserHomeController homeController = fxmlLoader.getController();
        homeController.getDashboardProdCount();
        homeController.getDashboardCostCount();
    }

    public void viewOrderDetail(ActionEvent actionEvent, Order order) throws IOException{
        FXMLLoader fxmlLoader = loadFxmlPage("/view/users/pages/orders/viewOrder.fxml");
        ViewOrderController controller = fxmlLoader.getController();
        controller.setMainDashboardController(this);
        controller.setOrder(order);
        controller.orderIdField.setText(String.valueOf(order.getId()));
        controller.employeeField.setText(Datasource.getInstance().searchOneEmployeeById(order.getEmployeeID()).getFullname());
        if(order.getCustomerID() == null){
            controller.customerField.setText("");
        }
        else{
            controller.customerField.setText(Datasource.getInstance().searchOneCustomerById(order.getCustomerID()).getName());
        }
        if(order.getTableID() == null){
            controller.tableIdField.setText("Take Away");
        }
        else{
            controller.tableIdField.setText(String.valueOf(order.getTableID()));
            controller.tableCapacity.setText(String.valueOf(Datasource.getInstance().getOneTable(order.getTableID()).getCapacity()));
        }
        if(order.getCouponID() == null){
            controller.couponIdField.setText("");
        }
        else{
            controller.couponIdField.setText(String.valueOf(order.getCouponID()));
        }

        controller.setOrderDetailsList(Datasource.getInstance().searchAllOrderDetailByOrderID(order.getId()));
        controller.loadProductList();
        controller.totalText.setText(String.valueOf(order.getTotal()));
        controller.finalText.setText(String.valueOf(order.getFin()));
        controller.discountText.setText(String.valueOf(order.getDiscount()) + "%");
    }
}

================
File: src/main/java/controller/UserSessionController.java
================
package controller;


public class UserSessionController {


    private static final UserSessionController instance = new UserSessionController();
    private static int userId;
    private static String userFullName;
    private static String userName;
    private static String userEmail;
    private static String userStatus;
    private static int userAdmin;

    private UserSessionController() {
    }

    public static UserSessionController getInstance() {
        return instance;
    }


    public static String getUserFullName() {
        return userFullName;
    }

    public static void setUserFullName(String userFullName) {
        UserSessionController.userFullName = userFullName;
    }

    public static int getUserId() {
        return userId;
    }

    public static void setUserId(int userId) {
        UserSessionController.userId = userId;
    }

    public static String getUserName() {
        return userName;
    }

    public static void setUserName(String userName) {
        UserSessionController.userName = userName;
    }

    public static String getUserEmail() {
        return userEmail;
    }

    public static void setUserEmail(String userEmail) {
        UserSessionController.userEmail = userEmail;
    }

    public static String getUserStatus() {
        return userStatus;
    }

    public static void setUserStatus(String userStatus) {
        UserSessionController.userStatus = userStatus;
    }

    public static int getUserAdmin() {
        return userAdmin;
    }

    public static void setUserAdmin(int userAdmin) {
        UserSessionController.userAdmin = userAdmin;
    }

    public static void cleanUserSession() {
        userId = 0;
        userFullName = null;
        userName = null;
        userEmail = null;
        userAdmin = 0;
        userStatus = null;
    }

}

================
File: src/main/java/model/Categories.java
================
package model;

public class Categories {
    private int id;
    private String name;
    private String description;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public String toString() {
        return this.getName();
    }
}

================
File: src/main/java/model/Coupon.java
================
package model;

public class Coupon {
    private int id;
    private String expiry;
    private int discount;

    public int getId() {
        return id;
    }

    public int getDiscount() {
        return discount;
    }

    public String getExpiry() {
        return expiry;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setDiscount(int discount) {
        this.discount = discount;
    }

    public void setExpiry(String expiry) {
        this.expiry = expiry;
    }
}

================
File: src/main/java/model/Customer.java
================
package model;

public class Customer {
    private int id;
    private String name;
    private String address;
    private String contact_info;
    private int points;
    private int type;

    public int getId() {
        return id;
    }

    public int getPoints() {
        return points;
    }

    public int getType() {
        return type;
    }

    public String getAddress() {
        return address;
    }

    public String getContact_info() {
        return contact_info;
    }

    public String getName() {
        return name;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setContact_info(String contact_info) {
        this.contact_info = contact_info;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setPoints(int points) {
        this.points = points;
    }

    public void setType(int type) {
        this.type = type;
    }
}

================
File: src/main/java/model/Datasource.java
================
package model;

import controller.UserSessionController;

import java.sql.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.io.File;
import java.net.URL;
public class Datasource extends Product {

    public static final String DB_NAME = "store_manager.sqlite";
    public static final String CONNECTION_STRING = "jdbc:sqlite:"
            + System.getProperty("user.dir")
            + "/src/main/java/app/db/"
            + DB_NAME;
    public static final String TABLE_PRODUCTS = "products";
    public static final String COLUMN_PRODUCTS_ID = "id";
    public static final String COLUMN_PRODUCTS_NAME = "name";
    public static final String COLUMN_PRODUCTS_DESCRIPTION = "description";
    public static final String COLUMN_PRODUCTS_PRICE = "price";
    public static final String COLUMN_PRODUCTS_QUANTITY = "quantity";
    public static final String COLUMN_PRODUCTS_CATEGORY_ID = "category_id";
    public static final String COLUMN_PRODUCTS_IMAGE = "image";
    public static final String COLUMN_PRODUCTS_ACTIVE = "active"; // New column for isDisabled



    public static final String TABLE_CATEGORIES = "categories";
    public static final String COLUMN_CATEGORIES_ID = "id";
    public static final String COLUMN_CATEGORIES_NAME = "name";
    public static final String COLUMN_CATEGORIES_DESCRIPTION = "description";

    public static final String TABLE_ORDERS = "orders";
    public static final String COLUMN_ORDERS_ID = "id";
    public static final String COLUMN_ORDERS_PRODUCT_ID = "product_id";
    public static final String COLUMN_ORDERS_USER_ID = "user_id";
    public static final String COLUMN_ORDERS_ORDER_DATE = "order_date";
    public static final String COLUMN_ORDERS_ORDER_STATUS = "order_status";

    public static final String TABLE_USERS = "users";
    public static final String COLUMN_USERS_ID = "id";
    public static final String COLUMN_USERS_FULLNAME = "fullname";
    public static final String COLUMN_USERS_USERNAME = "username";
    public static final String COLUMN_USERS_EMAIL = "email";
    public static final String COLUMN_USERS_PASSWORD = "password";
    public static final String COLUMN_USERS_SALT = "salt";
    public static final String COLUMN_USERS_ADMIN = "admin";
    public static final String COLUMN_USERS_STATUS = "status";

    public static final int ORDER_BY_NONE = 1;
    public static final int ORDER_BY_ASC = 2;
    public static final int ORDER_BY_DESC = 3;
    private static final Datasource instance = new Datasource();
    private Connection conn;

    private Datasource() {
    }
    public static Datasource getInstance() {
        return instance;
    }

    public boolean open() {
        try {
            conn = DriverManager.getConnection(CONNECTION_STRING);
            return true;
        } catch (SQLException e) {
            System.out.println("Couldn't connect to database: " + e.getMessage());
            return false;
        }
    }
    public void close() {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            System.out.println("Couldn't close connection: " + e.getMessage());
        }
    }
    public List<Product> getAllProducts(int sortOrder) {
        StringBuilder queryProducts = queryProducts();

        if (sortOrder != ORDER_BY_NONE) {
            queryProducts.append(" ORDER BY ");
            queryProducts.append(COLUMN_PRODUCTS_NAME);
            if (sortOrder == ORDER_BY_DESC) {
                queryProducts.append(" DESC");
            } else {
                queryProducts.append(" ASC");
            }
        }

        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(queryProducts.toString())) {

            List<Product> products = new ArrayList<>();
            while (results.next()) {
                try {
                    Product product = new Product();
                    product.setId(results.getInt(1));
                    product.setName(results.getString(2));
                    product.setDescription(results.getString(3));
                    product.setPrice(results.getDouble(4));
                    product.setQuantity(results.getInt(5));
                    product.setCategory_name(results.getString(6));
                    product.setImage(results.getString(7));
                    product.setCategory_id(results.getInt(8));
                    product.setDisabled(results.getBoolean(9)); // Set isDisabled field

                    products.add(product);

                } catch (Exception e) {
                    System.err.println("Error processing product from database:");
                    e.printStackTrace();
                    continue;
                }
            }
            return products;

        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }


    public Product getOneProduct(int product_id) {
        StringBuilder queryProducts = queryProducts();
        queryProducts.append(" WHERE " + TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_ID + " = ? LIMIT 1");

        try (PreparedStatement statement = conn.prepareStatement(String.valueOf(queryProducts))) {
            statement.setInt(1, product_id);
            ResultSet results = statement.executeQuery();

            if (results.next()) { // Check if there is a result
                Product product = new Product();
                product.setId(results.getInt("id"));  // Use column names for clarity
                product.setName(results.getString("name"));
                product.setDescription(results.getString("description"));
                product.setPrice(results.getDouble("price"));
                product.setQuantity(results.getInt("quantity"));
                product.setCategory_id(results.getInt("category_id"));
                product.setImage(results.getString("image"));  // Ensure this is the correct column
                return product;  // Return the single product
            }
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
        }
        return null; // Return null if no product is found
    }
    public List<Product> searchProducts(String searchString, int sortOrder, boolean includeDisabled) {
        StringBuilder query = queryProducts();

        boolean hasSearchString = searchString != null && !searchString.trim().isEmpty();

        // Add WHERE clause only if there's a search string
        if (hasSearchString) {
            query.append(" WHERE (")
                    .append(TABLE_PRODUCTS).append(".").append(COLUMN_PRODUCTS_NAME).append(" LIKE ? OR ")
                    .append("category_name LIKE ?)");
        }

        // Apply sorting based on sortOrder
        if (sortOrder != ORDER_BY_NONE) {
            query.append(" ORDER BY ").append(COLUMN_PRODUCTS_NAME);
            query.append(sortOrder == ORDER_BY_DESC ? " DESC" : " ASC");
        }

        try (PreparedStatement statement = conn.prepareStatement(query.toString())) {
            int paramIndex = 1;

            // Set search parameters only if there’s a search string
            if (hasSearchString) {
                statement.setString(paramIndex++, "%" + searchString + "%"); // For product name
                statement.setString(paramIndex++, "%" + searchString + "%"); // For category name
            }

            ResultSet results = statement.executeQuery();
            List<Product> products = new ArrayList<>();

            while (results.next()) {
                Product product = new Product();
                product.setId(results.getInt(COLUMN_PRODUCTS_ID));
                product.setName(results.getString(COLUMN_PRODUCTS_NAME));
                product.setDescription(results.getString(COLUMN_PRODUCTS_DESCRIPTION));
                product.setPrice(results.getDouble(COLUMN_PRODUCTS_PRICE));
                product.setQuantity(results.getInt(COLUMN_PRODUCTS_QUANTITY));
                product.setCategory_name(results.getString("category_name"));  // Category alias from query
                product.setImage(results.getString(COLUMN_PRODUCTS_IMAGE));
                product.setDisabled(results.getInt(COLUMN_PRODUCTS_ACTIVE) == 1);  // Set based on active status
                products.add(product);
            }

            return products;

        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }




    private StringBuilder queryProducts() {
        return new StringBuilder("SELECT " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_ID + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_NAME + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_DESCRIPTION + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_PRICE + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_QUANTITY + ", " +
                TABLE_CATEGORIES + "." + COLUMN_CATEGORIES_NAME + " AS category_name, " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_IMAGE + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_CATEGORY_ID + ", " +
                TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_ACTIVE + // Include isDisabled column
                " FROM " + TABLE_PRODUCTS +
                " LEFT JOIN " + TABLE_CATEGORIES +
                " ON " + TABLE_PRODUCTS + "." + COLUMN_PRODUCTS_CATEGORY_ID +
                " = " + TABLE_CATEGORIES + "." + COLUMN_CATEGORIES_ID
        );
    }
    //not using
//    public boolean deleteSingleProduct(int productId) {
//        String sql = "DELETE FROM " + TABLE_PRODUCTS + " WHERE " + COLUMN_PRODUCTS_ID + " = ?";
//
//        try (PreparedStatement statement = conn.prepareStatement(sql)) {
//            statement.setInt(1, productId);
//            int rows = statement.executeUpdate();
//            System.out.println(rows + " record(s) deleted.");
//            return true;
//        } catch (SQLException e) {
//            System.out.println("Query failed: " + e.getMessage());
//            return false;
//        }
//    }
    public boolean insertNewProduct(String name, String description, double price,
                                    int quantity, int category_id, String imagePath, boolean isDisabled) {
        String sql = "INSERT INTO " + TABLE_PRODUCTS + " ("
                + COLUMN_PRODUCTS_NAME + ", "
                + COLUMN_PRODUCTS_DESCRIPTION + ", "
                + COLUMN_PRODUCTS_PRICE + ", "
                + COLUMN_PRODUCTS_QUANTITY + ", "
                + COLUMN_PRODUCTS_CATEGORY_ID + ", "
                + COLUMN_PRODUCTS_IMAGE + ", "
                + COLUMN_PRODUCTS_ACTIVE + // Include the isDisabled column in insert
                ") VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setDouble(3, price);
            statement.setInt(4, quantity);
            statement.setInt(5, category_id);
            statement.setString(6, imagePath);
            statement.setBoolean(7, isDisabled); // Set isDisabled value
            statement.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println("Insert failed: " + e.getMessage());
            return false;
        }
    }
    public boolean updateOneProduct(int product_id, String name, String description,
                                    double price, int quantity, int category_id,
                                    String imagePath, boolean isDisabled) {
        String sql = "UPDATE " + TABLE_PRODUCTS + " SET "
                + COLUMN_PRODUCTS_NAME + " = ?, "
                + COLUMN_PRODUCTS_DESCRIPTION + " = ?, "
                + COLUMN_PRODUCTS_PRICE + " = ?, "
                + COLUMN_PRODUCTS_QUANTITY + " = ?, "
                + COLUMN_PRODUCTS_CATEGORY_ID + " = ?, "
                + COLUMN_PRODUCTS_IMAGE + " = ?, "
                + COLUMN_PRODUCTS_ACTIVE + " = ? " // Update isDisabled field
                + "WHERE " + COLUMN_PRODUCTS_ID + " = ?";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setDouble(3, price);
            statement.setInt(4, quantity);
            statement.setInt(5, category_id);
            statement.setString(6, imagePath);
            statement.setBoolean(7, isDisabled); // Set isDisabled value
            statement.setInt(8, product_id);
            statement.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println("Update failed: " + e.getMessage());
            return false;
        }
    }
    public boolean updateProductStatus(int productId, boolean isDisabled) {
        String updateQuery = "UPDATE " + TABLE_PRODUCTS + " SET " + COLUMN_PRODUCTS_ACTIVE + " = ? WHERE " + COLUMN_PRODUCTS_ID + " = ?";
        try (PreparedStatement statement = conn.prepareStatement(updateQuery)) {
            statement.setBoolean(1, isDisabled);
            statement.setInt(2, productId);
            int affectedRows = statement.executeUpdate();
            return affectedRows == 1;
        } catch (SQLException e) {
            System.out.println("Status update failed: " + e.getMessage());
            return false;
        }
    }
    public List<Categories> getProductCategories(int sortOrder) {
        StringBuilder queryCategories = new StringBuilder("SELECT " +
                TABLE_CATEGORIES + "." + COLUMN_CATEGORIES_ID + ", " +
                TABLE_CATEGORIES + "." + COLUMN_CATEGORIES_NAME + ", " +
                TABLE_CATEGORIES + "." + COLUMN_CATEGORIES_DESCRIPTION +
                " FROM " + TABLE_CATEGORIES
        );
        if (sortOrder != ORDER_BY_NONE) {
            queryCategories.append(" ORDER BY ");
            queryCategories.append(COLUMN_CATEGORIES_ID);
            if (sortOrder == ORDER_BY_DESC) {
                queryCategories.append(" DESC");
            } else {
                queryCategories.append(" ASC");
            }
        }
        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(queryCategories.toString())) {
            List<Categories> categories = new ArrayList<>();
            while (results.next()) {
                Categories category = new Categories();
                category.setId(results.getInt(1));
                category.setName(results.getString(2));
                categories.add(category);
            }
            return categories;
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }
    public List<User> getAllUsers(int sortOrder) {
        StringBuilder queryCustomers = queryUsers();
        if (sortOrder != ORDER_BY_NONE) {
            queryCustomers.append(" ORDER BY ");
            queryCustomers.append(COLUMN_USERS_FULLNAME);
            if (sortOrder == ORDER_BY_DESC) {
                queryCustomers.append(" DESC");
            } else {
                queryCustomers.append(" ASC");
            }
        }
        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(queryCustomers.toString())) {

            List<User> users = new ArrayList<>();
            while (results.next()) {
                User user = new User();
                user.setId(results.getInt(1));
                user.setFullname(results.getString(2));
                user.setEmail(results.getString(3));
                user.setUsername(results.getString(4));
                user.setOrders(results.getInt(5));
                user.setStatus(results.getString(6));
                users.add(user);
            }
            return users;
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }
    public List<User> getOneUser(int customer_id) {
        StringBuilder queryCustomers = queryUsers();
        queryCustomers.append(" AND " + TABLE_USERS + "." + COLUMN_USERS_ID + " = ?");
        try (PreparedStatement statement = conn.prepareStatement(String.valueOf(queryCustomers))) {
            statement.setInt(1, customer_id);
            ResultSet results = statement.executeQuery();
            List<User> users = new ArrayList<>();
            while (results.next()) {
                User user = new User();
                user.setId(results.getInt(1));
                user.setFullname(results.getString(2));
                user.setEmail(results.getString(3));
                user.setUsername(results.getString(4));
                user.setOrders(results.getInt(5));
                user.setStatus(results.getString(6));
                users.add(user);
            }
            return users;
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }

    public boolean updateOneUser(int customer_id, String fullName, String username, String email, String status) {
        String sql = "UPDATE " + TABLE_USERS + " SET "
                + COLUMN_USERS_FULLNAME + " = ?, "
                + COLUMN_USERS_USERNAME + " = ?, "
                + COLUMN_USERS_EMAIL + " = ?, "
                + COLUMN_USERS_STATUS + " = ? "
                + "WHERE " + COLUMN_USERS_ID + " = ? AND " + COLUMN_USERS_ADMIN + " = 0";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, fullName);
            statement.setString(2, username);
            statement.setString(3, email);
            statement.setString(4, status);
            statement.setInt(5, customer_id);

            System.out.println("Updating User: " + customer_id + ", " + fullName + ", " + email + ", " + username + ", " + status);
            statement.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return false;
        }
    }
    private StringBuilder queryUsers() {
        return new StringBuilder("SELECT " +
                TABLE_USERS + "." + COLUMN_USERS_ID + ", " +
                TABLE_USERS + "." + COLUMN_USERS_FULLNAME + ", " +
                TABLE_USERS + "." + COLUMN_USERS_EMAIL + ", " +
                TABLE_USERS + "." + COLUMN_USERS_USERNAME + ", " +
                " (SELECT COUNT(*) FROM " + TABLE_ORDERS + " WHERE " + TABLE_ORDERS + "." + COLUMN_ORDERS_USER_ID + " = " + TABLE_USERS + "." + COLUMN_USERS_ID + ") AS orders" + ", " +
                TABLE_USERS + "." + COLUMN_USERS_STATUS +
                " FROM " + TABLE_USERS +
                " WHERE " + TABLE_USERS + "." + COLUMN_USERS_ADMIN + " = 0"
        );
    }
    public List<User> searchUsers(String searchString, int sortOrder) {
        StringBuilder queryCustomers = queryUsers();
        queryCustomers.append(" AND (" + TABLE_USERS + "." + COLUMN_USERS_FULLNAME + " LIKE ? OR " + TABLE_USERS + "." + COLUMN_USERS_USERNAME + " LIKE ?)");

        if (sortOrder != ORDER_BY_NONE) {
            queryCustomers.append(" ORDER BY ");
            queryCustomers.append(COLUMN_USERS_FULLNAME);
            if (sortOrder == ORDER_BY_DESC) {
                queryCustomers.append(" DESC");
            } else {
                queryCustomers.append(" ASC");
            }
        }
        try (PreparedStatement statement = conn.prepareStatement(queryCustomers.toString())) {
            statement.setString(1, "%" + searchString + "%");
            statement.setString(2, "%" + searchString + "%");
            ResultSet results = statement.executeQuery();

            List<User> users = new ArrayList<>();
            while (results.next()) {
                User user = new User();
                user.setId(results.getInt(1));
                user.setFullname(results.getString(2));
                user.setEmail(results.getString(3));
                user.setUsername(results.getString(4));
                user.setOrders(results.getInt(5));
                user.setStatus(results.getString(6));
                users.add(user);
            }
            return users;

        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }
    public boolean deleteSingleUser(int customerId) {
        String sql = "DELETE FROM " + TABLE_USERS + " WHERE " + COLUMN_USERS_ID + " = ?";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setInt(1, customerId);
            int rows = statement.executeUpdate();
            System.out.println(rows + " " + TABLE_USERS + " record(s) deleted.");


            String sql2 = "DELETE FROM " + TABLE_ORDERS + " WHERE " + COLUMN_ORDERS_USER_ID + " = ?";

            try (PreparedStatement statement2 = conn.prepareStatement(sql2)) {
                statement2.setInt(1, customerId);
                int rows2 = statement2.executeUpdate();
                System.out.println(rows2 + " " + TABLE_ORDERS + " record(s) deleted.");
                return true;
            } catch (SQLException e) {
                System.out.println("Query failed: " + e.getMessage());
                return false;
            }

        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return false;
        }
    }
    public User getUserByEmail(String email) throws SQLException {

        PreparedStatement preparedStatement = conn.prepareStatement("SELECT * FROM " + TABLE_USERS + " WHERE " + COLUMN_USERS_EMAIL + " = ?");
        preparedStatement.setString(1, email);
        ResultSet results = preparedStatement.executeQuery();

        User user = new User();
        if (results.next()) {

            user.setId(results.getInt("id"));
            user.setFullname(results.getString("fullname"));
            user.setUsername(results.getString("username"));
            user.setEmail(results.getString("email"));
            user.setPassword(results.getString("password"));
            user.setSalt(results.getString("salt"));
            user.setAdmin(results.getInt("admin"));
            user.setStatus(results.getString("status"));

        }

        return user;
    }

    public User getUserByUsername(String username) throws SQLException {

        PreparedStatement preparedStatement = conn.prepareStatement("SELECT * FROM " + TABLE_USERS + " WHERE " + COLUMN_USERS_USERNAME + " = ?");
        preparedStatement.setString(1, username);
        ResultSet results = preparedStatement.executeQuery();

        User user = new User();
        if (results.next()) {

            user.setId(results.getInt("id"));
            user.setFullname(results.getString("fullname"));
            user.setUsername(results.getString("username"));
            user.setEmail(results.getString("email"));
            user.setPassword(results.getString("password"));
            user.setSalt(results.getString("salt"));
            user.setAdmin(results.getInt("admin"));
            user.setStatus(results.getString("status"));

        }
        return user;
    }
    public boolean insertNewUser(String fullName, String username, String email, String password, String salt) {
        if (conn == null) {
            System.out.println("Connection is not established. Please open the connection first.");
            return false;
        }

        String sql = "INSERT INTO " + TABLE_USERS + " ("
                + COLUMN_USERS_FULLNAME + ", "
                + COLUMN_USERS_USERNAME + ", "
                + COLUMN_USERS_EMAIL + ", "
                + COLUMN_USERS_PASSWORD + ", "
                + COLUMN_USERS_SALT + ", "
                + COLUMN_USERS_ADMIN + ", "
                + COLUMN_USERS_STATUS +
                ") VALUES (?, ?, ?, ?, ?, 0, 'enabled')";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, fullName);
            statement.setString(2, username);
            statement.setString(3, email);
            statement.setString(4, password);  // Hash the password before storing
            statement.setString(5, salt);  // Store the salt

            statement.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return false;
        }
    }
    public Integer countAllProducts() {
        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery("SELECT COUNT(*) FROM " + TABLE_PRODUCTS)) {
            if (results.next()) {
                return results.getInt(1);
            } else {
                return 0;
            }
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return 0;
        }
    }
    public Integer countAllCustomers() {
        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery("SELECT COUNT(*) FROM " + TABLE_USERS +
                     " WHERE " + COLUMN_USERS_ADMIN + "= 0"
             )
        ) {
            if (results.next()) {
                return results.getInt(1);
            } else {
                return 0;
            }
        } catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return 0;
        }
    }
    public List<Integer> getAllTableID(){
        String query = "SELECT id FROM \"table\"";

        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(query)){
            List<Integer> list = new ArrayList<>();
            while (results.next()) {
                list.add(results.getInt("id"));
            }
            return list;

        }catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }

    public List<Coupon> getAllCoupon(){
        String query = "SELECT * FROM coupon";

        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(query)){
            List<Coupon> list = new ArrayList<>();
            while (results.next()) {
                Coupon c = new Coupon();
                c.setId(results.getInt("couponID"));
                c.setDiscount(results.getInt("discount"));
                c.setExpiry(results.getString("expiry"));
                list.add(c);
//                System.out.println(c.getId());
//                System.out.println(c.getExpiry());
//                System.out.println(c.getDiscount());
            }
            return list;

        }catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }

    public Product searchOneProductByName(String searchName){
        String query = "SELECT * FROM products WHERE name = '" + searchName + "'";
        Product product = new Product();
        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(query)){
            if (results.next()) {
                product.setId(results.getInt("id"));
                product.setName(results.getString("name"));
                product.setDescription(results.getString("description"));
                product.setPrice(results.getDouble("price"));
                product.setQuantity(results.getInt("quantity"));
                product.setCategory_id(results.getInt("category_id"));
                product.setImage(results.getString("image"));
                product.setDisabled(results.getBoolean("active"));
                return product;
            }
            else{
                System.out.println("No product found with search name");
                return null;
            }

        }catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }
    }
    public Table getOneTable(int id){
        String query = "SELECT * FROM 'table' WHERE id = ?";
        try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                Table table = new Table();
                table.setId(resultSet.getInt("id"));
                table.setStatus(resultSet.getInt("status"));
                table.setCapacity(resultSet.getInt("capacity"));
                return table;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public int searchCouponDiscountByID(int id){
        String query = "SELECT * FROM coupon WHERE couponID = ?";
        try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt("discount");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public void createOrderWithDetails(String date,
                                       Customer customer,
                                       Table table, Coupon coupon,
                                       List<Product> productList,
                                       List<Integer> quantities,
                                       double total, double discount, double fin) throws SQLException
    {
        conn.setAutoCommit(false);

        try {
            String orderSql = "INSERT INTO [order] " +
                    "(employeeID, " +
                    "customerID, " +
                    "couponID, " +
                    "tableID, " +
                    "orderDate, " +
                    "total, " +
                    "discount, " +
                    "final) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement orderStmt = conn.prepareStatement(orderSql, PreparedStatement.RETURN_GENERATED_KEYS)) {
                orderStmt.setInt(1, UserSessionController.getUserId());
                if (customer != null) {
                    orderStmt.setInt(2, customer.getId());
                }
                else{
                    orderStmt.setNull(2, java.sql.Types.INTEGER);
                }

                if (coupon != null) {
                    orderStmt.setInt(3, coupon.getId());
                }
                else{
                    orderStmt.setNull(3, java.sql.Types.INTEGER);
                }

                if (table != null) {
                    orderStmt.setInt(4, table.getId());
                }
                else{
                    orderStmt.setNull(4, java.sql.Types.INTEGER);
                }

                orderStmt.setString(5, date);
                orderStmt.setDouble(6, total);
                orderStmt.setDouble(7, discount);
                orderStmt.setDouble(8, fin);
                orderStmt.executeUpdate();
                // Get the generated order_id
                ResultSet rs = orderStmt.getGeneratedKeys();
                if (rs.next()) {
                    int orderId = rs.getInt(1);

                    //Insert into OrderDetail table for each product
                    String detailSql = "INSERT INTO orderDetail (orderID, productID, quantity, total) VALUES (?, ?, ?, ?)";
                    String updateProductSql = "UPDATE products SET quantity = quantity - ? WHERE id = ?";
                    PreparedStatement updateProductStmt = conn.prepareStatement(updateProductSql);
                    try (PreparedStatement detailStmt = conn.prepareStatement(detailSql)) {
                        for (int i = 0; i < productList.size(); i++) {
                            detailStmt.setInt(1, orderId); // Set the foreign key from Order
                            detailStmt.setInt(2, productList.get(i).getId()); // Product ID
                            detailStmt.setInt(3, quantities.get(i)); // quantity

                            double productTotal = productList.get(i).getPrice() * quantities.get(i);
                            DecimalFormat format = new DecimalFormat("#.##");
                            String formattedTotal = format.format(productTotal);
                            detailStmt.setDouble(4, Double.parseDouble(formattedTotal));// product total

                            try {
                                updateProductStmt.setInt(1, quantities.get(i)); // Quantity to subtract
                                updateProductStmt.setInt(2, productList.get(i).getId()); // Product ID to update

                                updateProductStmt.addBatch(); // addbatch
                            }
                            catch (SQLException e){
                                System.out.println(e.getMessage());
                            }

                            detailStmt.addBatch();
                        }
                        detailStmt.executeBatch();
                        updateProductStmt.executeBatch();
                    }
                } else {
                    throw new SQLException("Order ID retrieval failed, no ID returned.");
                }
            }

            // Commit the transaction if everything is successful
            conn.commit();
        }catch (SQLException e) {
            // Rollback in case of an error
            conn.rollback();
            throw e;
        } finally {
            // Restore auto-commit
            conn.setAutoCommit(true);
        }
    }
    public String getCategoryName(int id){
        String query = "SELECT * FROM categories WHERE id = ?";
        try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getString("name");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    public boolean deleteCategory(int id) {
        String query = "DELETE FROM " + TABLE_CATEGORIES + " WHERE " + COLUMN_CATEGORIES_ID + " = ?";

        try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setInt(1, id);

            int affectedRows = preparedStatement.executeUpdate();
            return affectedRows > 0; // Return true if at least one row was deleted
        } catch (SQLException e) {
            System.out.println("Error deleting category: " + e.getMessage());
            return false;
        }
    }
    public boolean updateCategory(Categories category) {
        String query = "UPDATE " + TABLE_CATEGORIES + " SET " +
                COLUMN_CATEGORIES_NAME + " = ?, " +
                COLUMN_CATEGORIES_DESCRIPTION + " = ? " +
                "WHERE " + COLUMN_CATEGORIES_ID + " = ?";

        try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
            preparedStatement.setString(1, category.getName());
            preparedStatement.setString(2, category.getDescription());
            preparedStatement.setInt(3, category.getId());

            int affectedRows = preparedStatement.executeUpdate();
            return affectedRows > 0; // Return true if at least one row was updated
        } catch (SQLException e) {
            System.out.println("Error updating category: " + e.getMessage());
            return false;
        }
    }
    public boolean addCategory(Categories category) {
        String query = "INSERT INTO " + TABLE_CATEGORIES + " (" +
                COLUMN_CATEGORIES_NAME + ", " +
                COLUMN_CATEGORIES_DESCRIPTION + ") VALUES (?, ?)";

        try (PreparedStatement preparedStatement = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, category.getName());
            preparedStatement.setString(2, category.getDescription());

            int affectedRows = preparedStatement.executeUpdate();
            if (affectedRows == 0) {
                return false; // No rows inserted
            }

            // Get the generated keys (category ID)
            try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    category.setId(generatedKeys.getInt(1)); // Set the generated ID
                } else {
                    return false; // Failed to get ID
                }
            }
            return true; // Successfully added category
        } catch (SQLException e) {
            System.out.println("Error adding category: " + e.getMessage());
            return false;
        }
    }
    public List<Categories> getAllCategories() {
        List<Categories> categories = new ArrayList<>();
        String query = "SELECT * FROM " + TABLE_CATEGORIES;

        try (Statement statement = conn.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                Categories category = new Categories();
                category.setId(resultSet.getInt(COLUMN_CATEGORIES_ID));
                category.setName(resultSet.getString(COLUMN_CATEGORIES_NAME));
                category.setDescription(resultSet.getString(COLUMN_CATEGORIES_DESCRIPTION));
                categories.add(category);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return categories;
    }

    public List<Order> getAllOrder(){
        String query = "SELECT * FROM [order]";

        try (Statement statement = conn.createStatement();
             ResultSet results = statement.executeQuery(query)){
            List<Order> list = new ArrayList<>();
            while (results.next()) {
              Order o = new Order();
              o.setId(results.getInt("id"));
              o.setEmployeeID((Integer) results.getObject("employeeID"));
              o.setCustomerID((Integer) results.getObject("customerID"));
              o.setCouponID((Integer) results.getObject("couponID"));
              o.setTableID((Integer) results.getObject("tableID"));
              o.setOrder_date(results.getString("orderDate"));
              o.setTotal(results.getDouble("total"));
              o.setDiscount(results.getInt("discount"));
              o.setFin(results.getDouble("final"));
              list.add(o);
            }
            return list;

        }catch (SQLException e) {
            System.out.println("Query failed: " + e.getMessage());
            return null;
        }

    }

    public Product searchOneProductById(Integer id){
        String query = "SELECT * FROM products WHERE id = ?";
        Product product = new Product();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet results = stmt.executeQuery();

            if (results.next()) {
                product.setId(results.getInt("id"));
                product.setName(results.getString("name"));
                product.setDescription(results.getString("description"));
                product.setPrice(results.getDouble("price"));
                product.setQuantity(results.getInt("quantity"));
                product.setCategory_id(results.getInt("category_id"));
                product.setImage(results.getString("image"));
                return product;

            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public Customer searchOneCustomerById(Integer id){
        String query = "SELECT * FROM customer WHERE id = ?";
        Customer customer = new Customer();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet results = stmt.executeQuery();

            if (results.next()) {
                customer.setId(results.getInt("id"));
                customer.setName(results.getString("name"));
                customer.setAddress(results.getString("address"));
                customer.setContact_info(results.getString("contact"));
                customer.setPoints(results.getInt("points"));
                customer.setType(results.getInt("type"));

                return customer;

            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public User searchOneEmployeeById(Integer id){
        String query = "SELECT * FROM users WHERE id = ?";
        User user = new User();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet results = stmt.executeQuery();

            if (results.next()) {
                user.setId(results.getInt("id"));
                user.setUsername(results.getString("username"));
                user.setFullname(results.getString("fullname"));

                return user;

            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public List<OrderDetail> searchAllOrderDetailByOrderID(int id){
        String query = "SELECT * FROM orderDetail WHERE orderID = ?";
        List<OrderDetail> list = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet results = stmt.executeQuery();

            while (results.next()) {
                OrderDetail orderDetail = new OrderDetail();
                orderDetail.setId(results.getInt("id"));
                orderDetail.setOrderID(results.getInt("orderID"));
                orderDetail.setProductID(results.getInt("productID"));
                orderDetail.setQuantity(results.getInt("quantity"));
                orderDetail.setTotal(results.getDouble("total"));
                list.add(orderDetail);
            }
            return list;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public boolean isExistCouponId(int id) throws SQLException{
        String query = "SELECT COUNT(*) FROM coupon WHERE couponID = ?";

        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            ResultSet resultSet = stmt.executeQuery();
            resultSet.next();
            return resultSet.getInt(1) > 0;
        }
    }

    public void saveToDatabase(int id, String expiryDate, int discount) throws SQLException{
        String sql = "INSERT INTO coupon (couponID, expiry, discount) VALUES (?, ?, ?)";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.setString(2, expiryDate);
            stmt.setInt(3, discount);
            stmt.executeUpdate();
        }
    }
}

================
File: src/main/java/model/Employee.java~
================
package model;

public class Customer {

    private int id;
    private String fullname;
    private String email;
    private String username;
    private int orders;
    private String status;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getFullname() {
        return fullname;
    }

    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public int getOrders() {
        return orders;
    }

    public void setOrders(int orders) {
        this.orders = orders;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}

================
File: src/main/java/model/Order.java
================
package model;


public class Order {
    private int id;
    private Integer employeeID;
    private Integer customerID;
    private Integer couponID;
    private Integer tableID;
    private String order_date;
    private Double total;
    private int discount;
    private Double fin;

    public int getId() {
        return id;
    }

    public int getDiscount() {
        return discount;
    }

    public Double getFin() {
        return fin;
    }

    public Double getTotal() {
        return total;
    }

    public Integer getCouponID() {
        return couponID;
    }

    public Integer getCustomerID() {
        return customerID;
    }

    public Integer getEmployeeID() {
        return employeeID;
    }

    public Integer getTableID() {
        return tableID;
    }

    public String getOrder_date() {
        return order_date;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setDiscount(int discount) {
        this.discount = discount;
    }

    public void setTotal(Double total) {
        this.total = total;
    }

    public void setCouponID(Integer couponID) {
        this.couponID = couponID;
    }

    public void setCustomerID(Integer customerID) {
        this.customerID = customerID;
    }

    public void setEmployeeID(Integer employeeID) {
        this.employeeID = employeeID;
    }

    public void setFin(Double fin) {
        this.fin = fin;
    }

    public void setOrder_date(String order_date) {
        this.order_date = order_date;
    }

    public void setTableID(Integer tableID) {
        this.tableID = tableID;
    }
}

================
File: src/main/java/model/OrderDetail.java
================
package model;

public class OrderDetail {
    private int id;
    private int orderID;
    private int productID;
    private int quantity;
    private Double total;

    public int getId() {
        return id;
    }

    public int getOrderID() {
        return orderID;
    }

    public int getProductID() {
        return productID;
    }

    public int getQuantity() {
        return quantity;
    }

    public Double getTotal() {
        return total;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setOrderID(int orderID) {
        this.orderID = orderID;
    }

    public void setProductID(int productID) {
        this.productID = productID;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public void setTotal(Double total) {
        this.total = total;
    }
}

================
File: src/main/java/model/Product.java
================
package model;


import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.io.File;
import java.net.URL;

public class Product {

    private int id;
    private String name;
    private String description;
    private double price;
    private int quantity;
    private int category_id;
    private String category_name;
    private String image;
    private ImageView imageView;
    private boolean isDisabled; // Renamed field to indicate disabled status

    // Getters and Setters for isDisabled
    public boolean isDisabled() {
        return isDisabled;
    }

    public void setDisabled(boolean isDisabled) {
        this.isDisabled = isDisabled;
    }


    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public int getCategory_id() {
        return category_id;
    }

    public void setCategory_id(int category_id) {
        this.category_id = category_id;
    }

    public String getCategory_name() {
        return category_name;
    }

    public void setCategory_name(String category_name) {
        this.category_name = category_name;
    }



    public String getImage() {
        return image;
    }

    public void setImage(String imagePath) {
        this.image = imagePath;

        if (imagePath == null || imagePath.isEmpty()) {
            // Load default placeholder image
            URL placeholderUrl = getClass().getResource("/view/resources/img/coffee_pictures/placeholder.png");
            if (placeholderUrl != null) {
                imageView = new ImageView(new Image(placeholderUrl.toString()));
            }
            return;
        }

        try {
            Image img = null;

            // Try loading from resources first
            String resourcePath = imagePath.startsWith("/") ? imagePath : "/" + imagePath;
            URL resourceUrl = getClass().getResource("/src/main/resources" + resourcePath);

            if (resourceUrl != null) {
                img = new Image(resourceUrl.toString());
            } else {
                // Try loading from file system
                String projectPath = System.getProperty("user.dir");
                File imageFile = new File(projectPath + "/src/main/resources" + resourcePath);

                if (imageFile.exists()) {
                    img = new Image(imageFile.toURI().toString());
                }
            }

            // If image is still null, load placeholder
            if (img == null) {
                URL placeholderUrl = getClass().getResource("/view/resources/img/coffee_pictures/placeholder.png");
                if (placeholderUrl != null) {
                    img = new Image(placeholderUrl.toString());
                }
            }

            // Create ImageView with the loaded image
            if (img != null) {
                imageView = new ImageView(img);
                imageView.setFitHeight(100);
                imageView.setFitWidth(100);
                imageView.setPreserveRatio(true);
            }

        } catch (Exception e) {
            System.err.println("Error loading image: " + imagePath);
            e.printStackTrace();
        }
    }




    public ImageView getImageView() {
        return imageView;
    }

}

================
File: src/main/java/model/Table.java
================
package model;

public class Table {
    private int id;
    private int status;
    private int capacity;

    public int getId() {
        return id;
    }

    public int getCapacity() {
        return capacity;
    }

    public int getStatus() {
        return status;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    public void setStatus(int status) {
        this.status = status;
    }
}

================
File: src/main/java/model/User.java
================
package model;

import java.util.Date;

public class User {

    private int id;
    private String fullname;
    private String username;
    private String email;
    private String password;
    private String salt;
    private int admin;
    private String status;
    private int orders;
    private Date dateOfBirth;
    private String phoneNumber;
    private Gender gender; // Enum for gender

    // Enum to restrict gender to valid values
    public enum Gender {
        MALE, FEMALE, OTHER
    }

    // Getters and Setters
    public int getOrders() {
        return orders;
    }

    public void setOrders(int orders) {
        this.orders = orders;
    }

    public String getFullname() {
        return fullname;
    }

    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getSalt() {
        return salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public int getAdmin() {
        return admin;
    }

    public void setAdmin(int admin) {
        this.admin = admin;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }
}

================
File: src/main/java/module-info.java
================
module app {
    requires javafx.controls;
    requires javafx.fxml;
    requires java.sql;
    requires org.slf4j; // Add this line

    // Export the packages you want other modules to access (if any)
    exports app;
    exports controller;
    exports model;

    // Open packages for JavaFX's reflection, e.g., for FXML loaders
    opens app to javafx.fxml;
    opens controller to javafx.fxml;
    opens controller.admin to javafx.fxml; // Add this line
    opens controller.admin.pages to javafx.fxml;
    opens controller.admin.pages.products to javafx.fxml;
    opens controller.users to javafx.fxml; // Add this line
    opens controller.users.pages to javafx.fxml;
    opens controller.admin.pages.users to javafx.fxml;
    opens controller.users.pages.products to javafx.fxml;
    opens controller.admin.pages.orders to javafx.fxml;
    opens controller.users.pages.orders to javafx.fxml;
    opens model to javafx.fxml;
}

================
File: src/main/resources/view/admin/main-dashboard.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.effect.DropShadow?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.paint.Color?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane id="AnchorPane" minHeight="600.0" minWidth="800.0" prefHeight="600.0" prefWidth="800.0" stylesheets="@../resources/css/dashboard.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.MainDashboardController">
    <StackPane layoutY="-9.0" prefHeight="800.0" prefWidth="1280.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
            <left>
                <AnchorPane fx:id="acDashBord">
                    <AnchorPane prefWidth="127.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                  <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                     <children>
                              <Button fx:id="btnHome" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnHomeOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Home" />
                              <Button fx:id="btnProducts" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnProductsOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Menu" />
                              <Button fx:id="btnNewOrder" contentDisplay="TOP" mnemonicParsing="false" onAction="#onClickNewOrder" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="New Order" />
                              <Button fx:id="btnOrders" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnOrdersOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Orders" />
                              <Button fx:id="btnCustomers" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnCustomersOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Employee" />
                              <Button fx:id="btnSettings" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnSettingsOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Settings" />
                        <Button fx:id="btnCoupon" contentDisplay="TOP" layoutX="10.0" layoutY="265.0" mnemonicParsing="false" onAction="#btnCouponOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Coupon" />
                     </children>
                  </VBox>
                    </AnchorPane>
                </AnchorPane>
            </left>
            <center>
                <StackPane fx:id="dashContent" prefHeight="150.0" prefWidth="200.0" />
            </center>
            <top>
                <AnchorPane fx:id="dashHead" prefHeight="42.0" prefWidth="753.0" BorderPane.alignment="CENTER">
                    <effect>
                        <DropShadow height="50.0" radius="12.0" spread="0.15" width="0.0">
                            <color>
                                <Color red="0.7368420958518982" green="0.7368420958518982" blue="0.7368420958518982" />
                            </color>
                        </DropShadow>
                    </effect>
                    <GridPane layoutX="14.0" layoutY="-15.0" prefHeight="60.0" prefWidth="751.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                        </rowConstraints>
                        <HBox alignment="CENTER_LEFT" prefHeight="100.0" prefWidth="200.0">
                     <children>
                               <ImageView fitHeight="47.0" fitWidth="45.0" preserveRatio="true">
                                   <image>
                                       <Image url="@../resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png" />
                                   </image>
                               </ImageView>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Coffee Management System" wrappingWidth="228.810546875">
                           <font>
                              <Font name="System Italic" size="17.0" />
                           </font>
                        </Text>
                     </children>
                        </HBox>
                        <AnchorPane prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1">
                        </AnchorPane>
                        <HBox alignment="CENTER_RIGHT" prefHeight="60.0" prefWidth="200.0" GridPane.columnIndex="2">
                            <Label alignment="TOP_RIGHT" text="Hi " textAlignment="RIGHT">
                            </Label>
                            <Label fx:id="lblUsrName" alignment="TOP_RIGHT" textAlignment="RIGHT">
                            </Label>
                            <Button fx:id="lblLogOut" contentDisplay="TOP" layoutY="300.0" mnemonicParsing="false" onAction="#btnLogOutOnClick" styleClass="button, xs, danger" text="Log Out">
                                <HBox.margin>
                                    <Insets left="10.0" right="10.0" />
                                </HBox.margin>
                            </Button>
                        </HBox>
                    </GridPane>
                </AnchorPane>
            </top>
        </BorderPane>
    </StackPane>
</AnchorPane>

================
File: src/main/resources/view/admin/main-dashboard.fxml~
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.effect.DropShadow?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.paint.Color?>

<AnchorPane id="AnchorPane" minHeight="600.0" minWidth="800.0" prefHeight="600.0" prefWidth="800.0" style="-fx-background-color: #fff;" stylesheets="@../resources/css/dashboard.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.MainDashboardController">
    <StackPane layoutY="-9.0" prefHeight="800.0" prefWidth="1280.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
            <left>
                <AnchorPane fx:id="acDashBord">
                    <AnchorPane prefWidth="127.0">
                        <Button fx:id="btnHome" contentDisplay="TOP" layoutY="13.0" mnemonicParsing="false" onAction="#btnHomeOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Home" />
                        <Button fx:id="btnProducts" contentDisplay="TOP" layoutY="103.0" mnemonicParsing="false" onAction="#btnProductsOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Menu" />
                        <Button fx:id="btnNewOrder" contentDisplay="TOP" layoutY="193.0" mnemonicParsing="false" onAction="#onClickNewOrder" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="New Order"/>
                        <Button fx:id="btnOrders" contentDisplay="TOP" layoutY="283.0" mnemonicParsing="false" onAction="#btnOrdersOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Orders" />
                        <Button fx:id="btnCustomers" contentDisplay="TOP" layoutY="373.0" mnemonicParsing="false" onAction="#btnCustomersOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Employee" />
                        <Button fx:id="btnSettings" contentDisplay="TOP" layoutY="463.0" mnemonicParsing="false" onAction="#btnSettingsOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Settings" />
                    </AnchorPane>
                </AnchorPane>
            </left>
            <center>
                <StackPane fx:id="dashContent" prefHeight="150.0" prefWidth="200.0" />
            </center>
            <top>
                <AnchorPane fx:id="dashHead" prefHeight="42.0" prefWidth="753.0" BorderPane.alignment="CENTER">
                    <effect>
                        <DropShadow height="50.0" radius="12.0" spread="0.15" width="0.0">
                            <color>
                                <Color red="0.7368420958518982" green="0.7368420958518982" blue="0.7368420958518982" />
                            </color>
                        </DropShadow>
                    </effect>
                    <GridPane layoutX="14.0" layoutY="-15.0" prefHeight="60.0" prefWidth="751.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                        </rowConstraints>
                        <HBox alignment="CENTER_LEFT" prefHeight="100.0" prefWidth="200.0">
                            <ImageView fitHeight="50.0" fitWidth="120.0" preserveRatio="true">
                                <image>
                                    <Image url="@../resources/img/brand/360_F_784277349_wCyNJz9BpCaDeZ3OqGUBD6SMKPEeMTDI.jpg" />
                                </image>
                                <HBox.margin>
                                    <Insets left="10.0" />
                                </HBox.margin>
                            </ImageView>
                        </HBox>
                        <AnchorPane prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1">
                        </AnchorPane>
                        <HBox alignment="CENTER_RIGHT" prefHeight="60.0" prefWidth="200.0" GridPane.columnIndex="2">
                            <Label alignment="TOP_RIGHT" text="Hi " textAlignment="RIGHT">
                            </Label>
                            <Label fx:id="lblUsrName" alignment="TOP_RIGHT" textAlignment="RIGHT">
                            </Label>
                            <Button fx:id="lblLogOut" contentDisplay="TOP" layoutY="300.0" mnemonicParsing="false" onAction="#btnLogOutOnClick" styleClass="button, xs, danger" text="Log Out">
                                <HBox.margin>
                                    <Insets left="10.0" right="10.0" />
                                </HBox.margin>
                            </Button>
                        </HBox>
                    </GridPane>
                </AnchorPane>
            </top>
        </BorderPane>
    </StackPane>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/coupon.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>


<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.CouponController">
   <children>
      <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <DatePicker fx:id="expiryPicker" prefHeight="30.0" prefWidth="200.0" promptText=" expiry date (dd-MM-yyyy)" />
            <HBox alignment="CENTER" prefHeight="50.0" prefWidth="200.0">
               <children>
                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Discount (%): ">
                     <font>
                        <Font name="System Bold" size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <TextField fx:id="discountField" prefWidth="60.0" />
               </children>
            </HBox>
            <Button fx:id="generateBtn" mnemonicParsing="false" onAction="#generateCoupon" prefHeight="35.0" prefWidth="200.0" text="Generate Coupon">
               <font>
                  <Font size="15.0" />
               </font>
            </Button>
            <Label fx:id="statusLabel" text="Label" textFill="RED">
               <font>
                  <Font size="18.0" />
               </font>
            </Label>
         </children>
      </VBox>
   </children>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/home/home.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.chart.CategoryAxis?>
<?import javafx.scene.chart.LineChart?>
<?import javafx.scene.chart.NumberAxis?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.paint.Color?>
<?import javafx.scene.paint.LinearGradient?>
<?import javafx.scene.paint.RadialGradient?>
<?import javafx.scene.paint.Stop?>
<?import javafx.scene.text.Font?>

<AnchorPane prefHeight="600.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.HomeController">

    <GridPane prefHeight="728.0" prefWidth="1120.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <columnConstraints>
            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
        </columnConstraints>
        <rowConstraints>
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
            <RowConstraints minHeight="10.0" prefHeight="300.0" vgrow="ALWAYS" /> <!-- Added for chart row -->
        </rowConstraints>
        <children>
            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.rowIndex="2">
                <children>
                    <Label fx:id="productsCount" alignment="CENTER_RIGHT" text="0">
                        <font>
                            <Font size="50.0" />
                        </font>
                  <textFill>
                     <RadialGradient centerX="0.5" centerY="0.5" radius="0.5">
                        <stops>
                           <Stop>
                              <color>
                                 <Color red="0.46000000834465027" green="0.2070000022649765" blue="0.2070000022649765" />
                              </color>
                           </Stop>
                           <Stop offset="1.0">
                              <color>
                                 <Color red="0.4588235318660736" green="0.2078431397676468" blue="0.2078431397676468" />
                              </color>
                           </Stop>
                        </stops>
                     </RadialGradient>
                  </textFill>
                    </Label>
                    <Label text="Products">
                        <font>
                            <Font size="30.0" />
                        </font>
                        <HBox.margin>
                            <Insets left="10.0" />
                        </HBox.margin>
                  <textFill>
                     <LinearGradient endX="1.0" endY="1.0">
                        <stops>
                           <Stop>
                              <color>
                                 <Color red="0.46000000834465027" green="0.2070000022649765" blue="0.2070000022649765" />
                              </color>
                           </Stop>
                           <Stop offset="1.0">
                              <color>
                                 <Color red="0.4588235318660736" green="0.2078431397676468" blue="0.2078431397676468" />
                              </color>
                           </Stop>
                        </stops>
                     </LinearGradient>
                  </textFill>
                    </Label>
                </children>
            </HBox>
            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="2">
                <children>
                    <Label fx:id="customersCount" alignment="CENTER_RIGHT" text="0">
                        <font>
                            <Font size="50.0" />
                        </font>
                    </Label>
                    <Label text="Employees">
                        <font>
                            <Font size="30.0" />
                        </font>
                        <HBox.margin>
                            <Insets left="10.0" />
                        </HBox.margin>
                    </Label>
                </children>
            </HBox>

            <!-- LineChart for displaying product and users data -->
            <LineChart fx:id="dataChart" GridPane.columnSpan="2" GridPane.rowIndex="4">
                <xAxis>
                    <CategoryAxis label="Category" />
                </xAxis>
                <yAxis>
                    <NumberAxis label="Count" />
                </yAxis>
                <padding>
                    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
                </padding>
            </LineChart>
        </children>
    </GridPane>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/orders/newOrder.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.CheckBox?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.Spinner?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1000.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.orders.NewOrderController">
   <children>
      <StackPane prefHeight="100.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="5.0">
               <children>
                  <HBox alignment="CENTER" maxHeight="25.0" minHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text fx:id="emName" strokeType="OUTSIDE" strokeWidth="0.0" text="Employee name:" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="eName" editable="false" />
                     </children>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="25.0" minHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Date:" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="dateField" editable="false" />
                     </children>
                     <VBox.margin>
                        <Insets />
                     </VBox.margin>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="25.0" maxWidth="1000.0" minHeight="25.0" minWidth="400.0" prefHeight="25.0" prefWidth="672.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Customer Name:" textAlignment="CENTER" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="customerNameField" editable="false">
                           <HBox.margin>
                              <Insets right="10.0" />
                           </HBox.margin>
                        </TextField>
                        <Button mnemonicParsing="false" text="Add new customer">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                     </children>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table Number:">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="12.0" />
                           </HBox.margin>
                        </Text>
                        <ComboBox fx:id="tableComboBox" maxHeight="25.0" maxWidth="100.0" minHeight="25.0" minWidth="100.0" prefHeight="25.0" prefWidth="150.0" promptText="Table">
                           <HBox.margin>
                              <Insets right="10.0" />
                           </HBox.margin></ComboBox>
                        <CheckBox fx:id="checkTakeAway" mnemonicParsing="false" text="Take Away">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </CheckBox>
                     </children>
                  </HBox>
                  <HBox fx:id="couponHBox" alignment="CENTER" maxHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="couponField" maxHeight="25.0" maxWidth="300.0" minHeight="25.0" minWidth="300.0" prefHeight="25.0" prefWidth="300.0" promptText="coupon id">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button fx:id="checkCouponBtn" mnemonicParsing="false" onAction="#checkCoupon" text="check coupon">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                        <Button fx:id="resetCouponBtn" layoutX="514.0" layoutY="15.0" mnemonicParsing="false" onAction="#resetCoupon" text="reset">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                     </children>
                     <VBox.margin>
                        <Insets bottom="5.0" />
                     </VBox.margin>
                  </HBox>
                  <HBox fx:id="searchHBox" alignment="CENTER" maxHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="searchField" maxHeight="25.0" maxWidth="300.0" minHeight="25.0" minWidth="300.0" prefHeight="25.0" prefWidth="200.0" promptText="search product name to add">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button mnemonicParsing="false" onAction="#onClickSearch" text="search">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Button>
                     </children>
                  </HBox>
                  <HBox fx:id="productHBox" alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="idField" editable="false" maxHeight="25.0" maxWidth="50.0" minHeight="25.0" promptText="id">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                           <font>
                              <Font size="13.0" />
                           </font>
                        </TextField>
                        <TextField fx:id="productNameField" editable="false" maxHeight="25.0" maxWidth="200.0" minHeight="25.0" promptText="product name">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                           <font>
                              <Font size="13.0" />
                           </font>
                        </TextField>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Quantity:">
                           <font>
                              <Font size="15.0" />
                           </font>
                        </Text>
                        <Spinner fx:id="quantitySpinner" editable="true" maxHeight="20.0" maxWidth="80.0" minHeight="20.0" minWidth="80.0">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Spinner>
                        <Text layoutX="428.0" layoutY="31.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Total:">
                           <font>
                              <Font size="15.0" />
                           </font>
                        </Text>
                        <TextField fx:id="totalField" editable="false" maxHeight="25.0" maxWidth="150.0" minHeight="25.0" promptText="total">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button fx:id="addBtn" mnemonicParsing="false" onAction="#addBtnClick" text="Add to order" />
                     </children>
                     <VBox.margin>
                        <Insets bottom="5.0" />
                     </VBox.margin>
                  </HBox>
                  <TableView fx:id="orderDetailView" maxHeight="800.0" minHeight="300.0" prefHeight="200.0" prefWidth="200.0" style="-fx-border-color: black;">
                     <columns>
                        <TableColumn fx:id="nameColumn" editable="false" prefWidth="240.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Name" />
                        <TableColumn fx:id="categoryColumn" editable="false" minWidth="0.0" prefWidth="140.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Categories" />
                        <TableColumn fx:id="priceColumn" editable="false" minWidth="0.0" prefWidth="100.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Price" />
                        <TableColumn fx:id="quantityColumn" editable="false" minWidth="0.0" prefWidth="100.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Quantity" />
                        <TableColumn fx:id="totalColumn" editable="false" minWidth="0.0" prefWidth="120.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Total" />
                     </columns>
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" />
                     </VBox.margin>
                  </TableView>
                  <HBox fx:id="paymentHBox" alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Total:" underline="true">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="totalText" strikethrough="true" strokeType="OUTSIDE" strokeWidth="0.0" text="total">
                           <font>
                              <Font size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="finalText" layoutX="517.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="final">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="7.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="discountText" fill="#03ff00" strokeType="OUTSIDE" strokeWidth="0.0" text="discount">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                        </Text>
                     </children>
                  </HBox>
                  <Button fx:id="createOrderBtn" mnemonicParsing="false" onAction="#createClick" text="Create Order">
                     <VBox.margin>
                        <Insets top="10.0" />
                     </VBox.margin>
                     <font>
                        <Font size="15.0" />
                     </font>
                  </Button>
               </children>
               <StackPane.margin>
                  <Insets />
               </StackPane.margin>
            </VBox>
            <ListView fx:id="suggestionList" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="100.0" prefWidth="350.0" translateX="-45.0" translateY="-70.0" />
         </children>
      </StackPane>
   </children>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/orders/orders.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.orders.UserOrdersController">

    <BorderPane layoutX="238.0" layoutY="136.0" prefHeight="521.0" prefWidth="743.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <padding>
            <Insets left="30.0" right="30.0" />
        </padding>
        <top>
            <GridPane>
                <columnConstraints>
                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                </columnConstraints>
                <rowConstraints>
                    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                </rowConstraints>
                <children>
                    <AnchorPane prefHeight="200.0" prefWidth="200.0">
                        <children>
                            <TextField fx:id="searchField" layoutX="1.0" layoutY="2.0" prefHeight="25.0" prefWidth="291.0" promptText="search orders" />
                            <ComboBox fx:id="searchComboBox" layoutX="305.0" layoutY="4.0" maxWidth="600.0" minWidth="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="3.0" AnchorPane.leftAnchor="305.0" AnchorPane.rightAnchor="155.0" AnchorPane.topAnchor="2.0" />
                        </children>
                    </AnchorPane>
                </children>
                <BorderPane.margin>
                    <Insets top="20.0" />
                </BorderPane.margin>
            </GridPane>
        </top>
        <center>
            <TableView fx:id="tableOrdersPage" editable="true" prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
                <columns>
                    <TableColumn fx:id="idColumn" prefWidth="124.0" text="Order ID">
                        <cellValueFactory>
                            <PropertyValueFactory property="product_name" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="paidColumn" prefWidth="167.0" text="Paid">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_price" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="dateColumn" prefWidth="114.0" text="Order Date">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_date" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="employeeColumn" prefWidth="236.0" text="Employee Name">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_status" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="couponColumn" prefWidth="147.0" text="Coupon discount">
                        <cellValueFactory>
                            <PropertyValueFactory property="user_full_name" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="tableColumn" prefWidth="141.0" text="Table" />
                    <TableColumn fx:id="customerColumn" prefWidth="293.0" text="Customer Name" />
                </columns>
                <columnResizePolicy>
                    <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
                </columnResizePolicy>
                <BorderPane.margin>
                    <Insets top="10.0" />
                </BorderPane.margin>
            </TableView>
        </center>
        <bottom>
            <HBox alignment="CENTER_RIGHT" prefHeight="100.0" prefWidth="200.0" spacing="10.0" BorderPane.alignment="CENTER">
            </HBox>
        </bottom>
    </BorderPane>

</AnchorPane>

================
File: src/main/resources/view/admin/pages/orders/viewOrder.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1000.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.orders.ViewOrderController">
   <children>
      <HBox alignment="CENTER_LEFT" maxHeight="30.0" minHeight="30.0" prefHeight="30.0" prefWidth="1000.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <Button fx:id="backToOrderBtn" mnemonicParsing="false" onAction="#toOrder" text="Back to Order">
               <HBox.margin>
                  <Insets left="10.0" top="10.0" />
               </HBox.margin></Button>
         </children>
      </HBox>
      <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="30.0">
         <children>
            <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Order Detail">
               <font>
                  <Font size="20.0" />
               </font>
               <VBox.margin>
                  <Insets bottom="10.0" />
               </VBox.margin>
            </Text>
            <HBox prefHeight="100.0" prefWidth="200.0">
               <children>
                  <VBox prefHeight="100.0" prefWidth="331.0">
                     <children>
                        <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Employee Name:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="employeeField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Customer Name: " wrappingWidth="120.078125">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="customerField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="60.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Order id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="orderIdField" editable="false" />
                           </children>
                        </HBox>
                     </children>
                  </VBox>
                  <VBox layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="331.0">
                     <children>
                        <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="tableIdField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table capacity:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="tableCapacity" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="60.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Coupon id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="couponIdField" editable="false" />
                           </children>
                        </HBox>
                     </children>
                  </VBox>
               </children>
            </HBox>
            <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Product List">
               <font>
                  <Font size="15.0" />
               </font>
               <VBox.margin>
                  <Insets top="10.0" />
               </VBox.margin>
            </Text>
            <TableView fx:id="productTable" prefHeight="247.0" prefWidth="600.0">
               <columns>
                  <TableColumn fx:id="idColumn" prefWidth="122.0" text="id" />
                  <TableColumn fx:id="nameColumn" prefWidth="166.0" text="name" />
                  <TableColumn fx:id="categoryColumn" prefWidth="135.0" text="category" />
                  <TableColumn fx:id="priceColumn" prefWidth="145.0" text="price " />
                  <TableColumn fx:id="quantityColumn" prefWidth="183.0" text="quantity" />
                  <TableColumn fx:id="totalColumn" prefWidth="211.0" text="total" />
               </columns>
            </TableView>
            <HBox alignment="CENTER" maxHeight="30.0" minHeight="30.0" prefHeight="100.0" prefWidth="200.0">
               <children>
                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Total:">
                     <font>
                        <Font size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="totalText" layoutX="392.0" layoutY="34.0" strikethrough="true" strokeType="OUTSIDE" strokeWidth="0.0" text="total">
                     <font>
                        <Font size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="finalText" layoutX="410.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="final">
                     <font>
                        <Font name="System Bold" size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="discountText" fill="#05bc24" layoutX="441.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="discount">
                     <font>
                        <Font size="20.0" />
                     </font>
                  </Text>
               </children>
            </HBox>
         </children>
      </VBox>
   </children>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/products/add-product.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>  <!-- Import VBox -->
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" styleClass="root" stylesheets="@../../../resources/css/form.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.products.AddProductController">
    <children>
        <VBox alignment="CENTER" spacing="20" AnchorPane.leftAnchor="0" AnchorPane.rightAnchor="0" AnchorPane.topAnchor="0" AnchorPane.bottomAnchor="0">
            <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="heading-text" text="Add new product" />

            <BorderPane styleClass="border-pane" VBox.vgrow="ALWAYS">
                <center>
                    <GridPane styleClass="grid-pane" alignment="CENTER" hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" />
                            <ColumnConstraints hgrow="SOMETIMES" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />

                        </rowConstraints>



                        <Label styleClass="label" text="Product Name" />
                        <TextField fx:id="fieldAddProductName" styleClass="text-field" promptText="product name" GridPane.columnIndex="1"/>



                        <Label styleClass="label" text="Product Price" GridPane.rowIndex="1" />
                        <TextField fx:id="fieldAddProductPrice" styleClass="text-field" promptText="0.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label styleClass="label" text="Product Stock" GridPane.rowIndex="2" />
                        <TextField fx:id="fieldAddProductQuantity" styleClass="text-field" promptText="0" GridPane.columnIndex="1" GridPane.rowIndex="2" />


                        <Label styleClass="label" text="Product Category" GridPane.rowIndex="3"/>
                        <ComboBox fx:id="fieldAddProductCategoryId" styleClass="combo-box" GridPane.columnIndex="1" GridPane.rowIndex="3" />


                        <Label styleClass="label" text="Description" GridPane.rowIndex="4" GridPane.columnSpan="2"/>
                        <TextArea fx:id="fieldAddProductDescription" styleClass="text-area" prefHeight="200.0" prefWidth="522.0" promptText="description here" GridPane.rowIndex="5" GridPane.columnSpan="2"  />




                        <HBox spacing="20" alignment="CENTER_LEFT" GridPane.rowIndex="6" GridPane.columnIndex="0" GridPane.columnSpan="2">

                            <VBox alignment="CENTER" spacing="10" styleClass="image-view-container" >


                                <ImageView fx:id="productImageView" fitHeight="200" fitWidth="200" preserveRatio="true"/>

                                <Button fx:id="selectImageButton" layoutX="106.0" layoutY="481.0" mnemonicParsing="false" onAction="#selectImage"  styleClass="button"  text="Select Image" />

                            </VBox>



                        </HBox>





                        <Button mnemonicParsing="false" onAction="#btnAddProductOnAction"  styleClass="button success" text="Add Product"  GridPane.columnIndex="1" GridPane.rowIndex="7" GridPane.halignment="RIGHT" />


                        <Text fx:id="viewProductResponse" styleClass="message-text" strokeType="OUTSIDE" strokeWidth="0.0" text="Product updated!" visible="false"  GridPane.columnIndex="0" GridPane.rowIndex="7"   />

                    </GridPane>

                </center>


            </BorderPane>






        </VBox>




    </children>

</AnchorPane>

================
File: src/main/resources/view/admin/pages/products/categories.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<AnchorPane prefHeight="600.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.products.CategoryController">
    <BorderPane>
        <top>
            <VBox spacing="10.0">
                <padding>
                    <Insets top="20.0" right="20.0" bottom="20.0" left="20.0" /> <!-- Correct Padding -->
                </padding>
                <Label text="Manage Categories" style="-fx-font-size: 24px; -fx-font-weight: bold;" />
            </VBox>
        </top>

        <center>
            <VBox spacing="15">
                <padding>
                    <Insets top="20.0" right="20.0" bottom="20.0" left="20.0" /> <!-- Correct Padding -->
                </padding>
                <!-- TableView for displaying categories -->
                <TableView fx:id="categoriesTable" prefHeight="300.0" prefWidth="760.0">
                    <columns>
                        <TableColumn fx:id="categoryIdColumn" text="Category ID" prefWidth="200.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="id" />
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn fx:id="categoryNameColumn" text="Category Name" prefWidth="300.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="name" />
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn fx:id="descriptionColumn" text="Description" prefWidth="260.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="description" />
                            </cellValueFactory>
                        </TableColumn>

                    </columns>
                </TableView>

                <!-- Form for Add/Edit -->
                <GridPane hgap="10.0" vgap="10.0" alignment="CENTER_LEFT">
                    <Label text="Category Name:" />
                    <TextField fx:id="fieldCategoryName" GridPane.columnIndex="1" promptText="Enter category name" />
                    <Label text="Description:" GridPane.rowIndex="1" />
                    <TextField fx:id="fieldCategoryDescription" GridPane.columnIndex="1" GridPane.rowIndex="1" promptText="Enter category description" />
                </GridPane>

                <!-- Action Buttons -->
                <HBox spacing="10.0" alignment="CENTER">
                    <Button text="Add" onAction="#btnAddCategoryOnClick" styleClass="button,success,sm" />
                    <Button text="Edit" onAction="#btnEditCategoryOnClick" styleClass="button,warning,sm" />
                    <Button text="Delete" onAction="#btnDeleteCategoryOnClick" styleClass="button,danger,sm" />
                </HBox>
            </VBox>
        </center>
    </BorderPane>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/products/edit-product.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" styleClass="root" stylesheets="@../../../resources/css/form.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.products.EditProductController">

    <children>
        <VBox alignment="CENTER" spacing="20" AnchorPane.bottomAnchor="0" AnchorPane.leftAnchor="0" AnchorPane.rightAnchor="0" AnchorPane.topAnchor="0">
            <Text fx:id="viewProductName" styleClass="heading-text" text="Edit product" />

            <BorderPane styleClass="border-pane" VBox.vgrow="ALWAYS">
                <center>
                    <GridPane fx:id="formEditProductView" alignment="CENTER" hgap="10" styleClass="grid-pane" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" />
                            <ColumnConstraints hgrow="SOMETIMES" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                     <RowConstraints />
                        </rowConstraints>

                        <Label styleClass="label" text="Product Name" />
                        <TextField fx:id="fieldEditProductName" promptText="product name" styleClass="text-field" GridPane.columnIndex="1" />

                        <Label styleClass="label" text="Product Price" GridPane.rowIndex="1" />
                        <TextField fx:id="fieldEditProductPrice" promptText="0.0" styleClass="text-field" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <TextField fx:id="fieldEditProductId" visible="false" />

                        <Label styleClass="label" text="Product Stock" GridPane.rowIndex="2" />
                        <TextField fx:id="fieldEditProductQuantity" promptText="0" styleClass="text-field" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label styleClass="label" text="Product Category" GridPane.rowIndex="3" />
                        <ComboBox fx:id="fieldEditProductCategoryId" styleClass="combo-box" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                        <Label styleClass="label" text="Description" GridPane.columnSpan="2" GridPane.rowIndex="4" />
                        <TextArea fx:id="fieldEditProductDescription" prefHeight="200.0" prefWidth="522.0" promptText="product description" styleClass="text-area" GridPane.columnSpan="2" GridPane.rowIndex="5" />

                        <HBox alignment="CENTER_LEFT" spacing="20" GridPane.columnIndex="0" GridPane.columnSpan="2" GridPane.rowIndex="6">  <!-- Align left and span 2 columns -->
                            <VBox alignment="CENTER" spacing="10" styleClass="image-view-container">
                                <ImageView fx:id="productImageView" fitHeight="249.0" fitWidth="235.0" preserveRatio="true" />
                            </VBox>
                             <Button fx:id="selectImageButton" onAction="#selectImage" styleClass="button" text="Select Image" />
                        </HBox>

                        <Button mnemonicParsing="false" onAction="#btnEditProductOnAction" styleClass="button primary" text="Edit Product" GridPane.columnIndex="1" GridPane.halignment="RIGHT" GridPane.rowIndex="7" /> <!-- Bottom right -->
                        <Text fx:id="viewProductResponse" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="message-text" text="Product updated!" visible="false" GridPane.columnIndex="0" GridPane.rowIndex="7" />

                    </GridPane>
                </center>
            </BorderPane>
        </VBox>
    </children>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/products/product-card.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>

<VBox styleClass="product-card, clickable-card" stylesheets="@../../../resources/css/product.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1">
    <StackPane styleClass="image-container">
        <ImageView fx:id="productImage" fitHeight="250.0" fitWidth="250.0">
            <preserveRatio>true</preserveRatio>
        </ImageView>
    </StackPane>
    <VBox styleClass="product-info">
        <VBox styleClass="product-header">
            <Text fx:id="productName" styleClass="product-name" />
            <Text fx:id="productCategory" styleClass="product-category" />
        </VBox>
        <HBox styleClass="product-details">
            <HBox styleClass="price-container">
                <Text text="Price:" />
                <Text fx:id="productPrice"/>
            </HBox>
            <HBox styleClass="stock-container">
                <Text fx:id="productStock"/>
            </HBox>
        </HBox>
        <HBox styleClass="product-actions">
            <Button fx:id="editButton" mnemonicParsing="false" styleClass="button primary small" text="Edit" />
<!--            <Button fx:id="deleteButton" mnemonicParsing="false" styleClass="button danger small" text="Delete" />-->
            <Button fx:id="toggleStatusButton" mnemonicParsing="false" styleClass="button secondary small" text="Toggle Status" />
        </HBox>
    </VBox>
</VBox>

================
File: src/main/resources/view/admin/pages/products/product-card.fxml~
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>
<?import javafx.scene.layout.Region?>
<?import javafx.scene.control.Label?>

<VBox styleClass="product-card" xmlns="http://javafx.com/javafx/17" xmlns:fx="http://javafx.com/fxml/1">
    <StackPane styleClass="image-container">
        <ImageView fx:id="productImage" fitHeight="200.0" fitWidth="280.0" preserveRatio="true"/>
        <StackPane fx:id="unavailableOverlay" styleClass="unavailable-overlay" visible="false">
            <Label styleClass="unavailable-label" text="Unavailable"/>
        </StackPane>
    </StackPane>

    <VBox styleClass="content-container">
        <!-- Product Info -->
        <VBox styleClass="product-header">
            <Text fx:id="productName" styleClass="product-name"/>
            <Text fx:id="productCategory" styleClass="product-category"/>
        </VBox>

        <!-- Price and Stock -->
        <HBox styleClass="product-details">
            <VBox styleClass="price-section">
                <Text fx:id="productPrice" styleClass="product-price"/>
                <Text fx:id="productStock" styleClass="product-stock"/>
            </VBox>
        </HBox>

        <!-- Action Buttons -->
        <HBox styleClass="button-container">
            <Button fx:id="editButton" text="Edit">
                <graphic>
                    <Region styleClass="edit-icon"/>
                </graphic>
            </Button>
            <Button fx:id="toggleStatusButton">
                <graphic>
                    <Region styleClass="power-icon"/>
                </graphic>
            </Button>
        </HBox>
    </VBox>
</VBox>

================
File: src/main/resources/view/admin/pages/products/products.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.effect.Reflection?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<?import javafx.scene.control.TableView?>
<AnchorPane prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.products.ProductsController">
    <StackPane fx:id="productsContent" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane styleClass="products-page">
            <padding>
                <Insets left="30.0" right="30.0" />
            </padding>
            <top>
                <VBox spacing="20">
                    <padding>
                        <Insets bottom="20.0" top="20.0" />
                    </padding>
                    <Text fontSmoothingType="LCD" styleClass="page-title" text="Menu">
                        <font>
                            <Font name="SansSerif Bold Italic" size="43.0" />
                        </font>
                        <effect>
                            <Reflection fraction="0.66" topOpacity="0.19" />
                        </effect>
                    </Text>
                    <GridPane alignment="CENTER_RIGHT">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                        </rowConstraints>
                        <AnchorPane prefHeight="200.0" prefWidth="200.0">
                            <TextField fx:id="fieldProductsSearch" layoutX="1.0" layoutY="2.0" prefHeight="25.0" prefWidth="291.0" promptText="Search coffee..." styleClass="search-field" />
                            <Button layoutX="300.0" layoutY="2.0" mnemonicParsing="false" onAction="#btnProductsSearchOnAction" prefHeight="26.0" styleClass="button,info,sm" text="Search" />
                        </AnchorPane>
                        <HBox spacing="10" alignment="CENTER_RIGHT" GridPane.columnIndex="1">
                            <Button mnemonicParsing="false" onAction="#btnAddProductOnClick" prefHeight="26.0" styleClass="button,success,sm" text="Add New Coffee" />
                            <Button mnemonicParsing="false" onAction="#btnManageCategoryOnClick" prefHeight="26.0" styleClass="button,info,sm" text="Manage Category" />
                        </HBox>
                    </GridPane>
                </VBox>
            </top>
            <center>
                <ScrollPane fitToWidth="true" styleClass="products-scroll">
                    <FlowPane fx:id="productsContainer" hgap="20" styleClass="products-grid" vgap="20">
                        <padding>
                            <Insets bottom="20" left="20" right="20" top="20" />
                        </padding>
                        <!-- Add TableView Here -->
                        <TableView fx:id="tableProductsPage">
                            <columns>
                                <!-- Define your TableColumn items here -->
                            </columns>
                        </TableView>
                    </FlowPane>
                </ScrollPane>
            </center>


        </BorderPane>
    </StackPane>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/settings/settings.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/"
            fx:controller="controller.admin.pages.SettingsController">
    <Pane>
        <Label contentDisplay="CENTER" layoutX="119.0" layoutY="14.0" text="Settings Page" textAlignment="CENTER"
               wrapText="true">
            <font>
                <Font size="25.0"/>
            </font>
        </Label>

        <Text layoutX="119.0" layoutY="119.0" strokeType="OUTSIDE" strokeWidth="0.0" text="TODO" textAlignment="CENTER">
            <font>
                <Font size="36.0"/>
            </font>
        </Text>
    </Pane>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/users/add-user.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<AnchorPane xmlns="http://javafx.com/javafx"
            xmlns:fx="http://javafx.com/fxml"
            fx:controller="controller.admin.pages.users.CreateUserController"
            prefHeight="400.0" prefWidth="600.0">

    <Text text="Create New User" layoutX="20.0" layoutY="20.0">
        <font>
            <Font name="Arial" size="20.0" />
        </font>
    </Text>

    <Label text="Full Name:" layoutX="20.0" layoutY="60.0"/>
    <TextField fx:id="fieldCreateUserName" layoutX="150.0" layoutY="60.0" prefWidth="400.0"/>

    <Label text="Email:" layoutX="20.0" layoutY="100.0"/>
    <TextField fx:id="fieldCreateUserEmail" layoutX="150.0" layoutY="100.0" prefWidth="400.0"/>

    <Label text="Username:" layoutX="20.0" layoutY="140.0"/>
    <TextField fx:id="fieldCreateUserUsername" layoutX="150.0" layoutY="140.0" prefWidth="400.0"/>

    <Label text="Password:" layoutX="20.0" layoutY="180.0"/>
    <PasswordField fx:id="fieldCreateUserPassword" layoutX="150.0" layoutY="180.0" prefWidth="400.0"/>

    <Label text="Status:" layoutX="20.0" layoutY="220.0"/>
    <ComboBox fx:id="fieldCreateUserStatus" layoutX="150.0" layoutY="220.0" prefWidth="400.0"/>

    <Button text="Create User" layoutX="150.0" layoutY="280.0" onAction="#btnCreateUserOnAction"/>
    <Text fx:id="viewCreateUserResponse" layoutX="150.0" layoutY="320.0" fill="red" visible="false"/>

</AnchorPane>

================
File: src/main/resources/view/admin/pages/users/edit-user.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<AnchorPane xmlns="http://javafx.com/javafx"
            xmlns:fx="http://javafx.com/fxml"
            fx:controller="controller.admin.pages.users.EditUserController"
            prefHeight="400.0" prefWidth="600.0">

    <Text text="Edit Customer" layoutX="20.0" layoutY="20.0">
        <font>
            <Font name="Arial" size="20.0" />
        </font>
    </Text>

    <Label text="Full Name:" layoutX="20.0" layoutY="60.0"/>
    <TextField fx:id="fieldEditCustomerName" layoutX="150.0" layoutY="60.0" prefWidth="400.0"/>

    <Label text="Email:" layoutX="20.0" layoutY="100.0"/>
    <TextField fx:id="fieldEditCustomerEmail" layoutX="150.0" layoutY="100.0" prefWidth="400.0"/>

    <Label text="Username:" layoutX="20.0" layoutY="140.0"/>
    <TextField fx:id="fieldEditCustomerUsername" layoutX="150.0" layoutY="140.0" prefWidth="400.0"/>

    <Label text="Status:" layoutX="20.0" layoutY="220.0"/>
    <ComboBox fx:id="fieldEditCustomerStatus" layoutX="150.0" layoutY="220.0" prefWidth="400.0"/>

    <Button text="Save" layoutX="150.0" layoutY="280.0" onAction="#btnEditCustomerOnAction"/>
    <Text fx:id="viewCustomerResponse" layoutX="150.0" layoutY="320.0" fill="red" visible="false"/>

    <TextField fx:id="fieldEditCustomerId" visible="false"/>
</AnchorPane>

================
File: src/main/resources/view/admin/pages/users/employees.fxml~
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.*?>
<?import javafx.scene.layout.*?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/"
            fx:controller="controller.admin.pages.EmployeesController">
    <StackPane fx:id="customersContent" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0"
               AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane prefHeight="521.0" prefWidth="743.0">
            <padding>
                <Insets left="30.0" right="30.0"/>
            </padding>
            <top>
                <GridPane alignment="CENTER_RIGHT" BorderPane.alignment="CENTER_RIGHT">
                    <columnConstraints>
                        <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
                        <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
                    </columnConstraints>
                    <rowConstraints>
                        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
                    </rowConstraints>
                    <BorderPane.margin>
                        <Insets top="20.0"/>
                    </BorderPane.margin>
                    <AnchorPane prefHeight="200.0" prefWidth="200.0">
                        <TextField fx:id="fieldCustomersSearch" layoutX="1.0" layoutY="2.0" prefHeight="25.0"
                                   prefWidth="291.0" promptText="search employee..."/>
                        <Button layoutX="300.0" layoutY="2.0" mnemonicParsing="false" styleClass="button, info, sm"
                                onAction="#btnCustomersSearchOnAction" prefHeight="26.0" text="Search"/>
                    </AnchorPane>
                </GridPane>
            </top>
            <center>
                <TableView fx:id="tableCustomersPage" editable="true" prefHeight="663.0" prefWidth="1220.0">
                    <columns>
                        <TableColumn prefWidth="75.0" text="Name/Surname">
                            <cellValueFactory>
                                <PropertyValueFactory property="fullname"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="75.0" text="Email">
                            <cellValueFactory>
                                <PropertyValueFactory property="email"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="75.0" text="Username">
                            <cellValueFactory>
                                <PropertyValueFactory property="username"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="125.0" text="Orders">
                            <cellValueFactory>
                                <PropertyValueFactory property="orders"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="125.0" text="Status">
                            <cellValueFactory>
                                <PropertyValueFactory property="status"/>
                            </cellValueFactory>
                        </TableColumn>
                    </columns>
                    <columnResizePolicy>
                        <TableView fx:constant="CONSTRAINED_RESIZE_POLICY"/>
                    </columnResizePolicy>
                    <BorderPane.margin>
                        <Insets top="10.0"/>
                    </BorderPane.margin>
                </TableView>
            </center>
            <bottom>
                <HBox alignment="CENTER_RIGHT" prefHeight="47.0" prefWidth="1220.0" spacing="10.0"
                      BorderPane.alignment="CENTER">
                </HBox>
            </bottom>
        </BorderPane>
    </StackPane>

</AnchorPane>

================
File: src/main/resources/view/admin/pages/users/users.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.control.cell.*?>
<?import javafx.scene.layout.*?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.admin.pages.users.UsersController">
    <StackPane fx:id="customersContent" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0"
               AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane prefHeight="521.0" prefWidth="743.0">
            <padding>
                <Insets left="30.0" right="30.0"/>
            </padding>
            <top>
                <GridPane alignment="CENTER_RIGHT" BorderPane.alignment="CENTER_RIGHT">
                    <columnConstraints>
                        <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
                        <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
                    </columnConstraints>
                    <rowConstraints>
                        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
                    </rowConstraints>
                    <BorderPane.margin>
                        <Insets top="20.0"/>
                    </BorderPane.margin>
                    <AnchorPane prefHeight="200.0" prefWidth="200.0">
                        <Button fx:id="btnAddUser" text="Add User" layoutX="20.0" layoutY="2.0" onAction="#btnAddUserOnAction" prefHeight="26.0"/>
                        <TextField fx:id="fieldCustomersSearch" layoutX="1.0" layoutY="40.0" prefHeight="25.0"
                                   prefWidth="291.0" promptText="search user"/>
                        <Button layoutX="300.0" layoutY="40.0" mnemonicParsing="false" styleClass="button, info, sm"
                                onAction="#btnUsersSearchOnAction" prefHeight="26.0" text="Search"/>
                    </AnchorPane>
                </GridPane>
            </top>
            <center>
                <TableView fx:id="tableCustomersPage" editable="true" prefHeight="663.0" prefWidth="1220.0">
                    <columns>
                        <TableColumn prefWidth="75.0" text="Name/Surname">
                            <cellValueFactory>
                                <PropertyValueFactory property="fullname"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="75.0" text="Email">
                            <cellValueFactory>
                                <PropertyValueFactory property="email"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="75.0" text="Username">
                            <cellValueFactory>
                                <PropertyValueFactory property="username"/>
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn prefWidth="125.0" text="Status">
                            <cellValueFactory>
                                <PropertyValueFactory property="status"/>
                            </cellValueFactory>
                        </TableColumn>
                    </columns>
                    <columnResizePolicy>
                        <TableView fx:constant="CONSTRAINED_RESIZE_POLICY"/>
                    </columnResizePolicy>
                    <BorderPane.margin>
                        <Insets top="10.0"/>
                    </BorderPane.margin>
                </TableView>
            </center>
            <bottom>
                <HBox alignment="CENTER_RIGHT" prefHeight="47.0" prefWidth="1220.0" spacing="10.0"
                      BorderPane.alignment="CENTER">
                </HBox>
            </bottom>
        </BorderPane>
    </StackPane>

</AnchorPane>

================
File: src/main/resources/view/login.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<?import javafx.scene.control.Label?>
<StackPane minHeight="600.0" minWidth="800.0" prefHeight="600.0" prefWidth="800.0" styleClass="root" stylesheets="@resources/css/login.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.LoginController">
    <BorderPane prefHeight="200.0" prefWidth="200.0">
        <center>
            <AnchorPane styleClass="root anchor-pane-overlay" BorderPane.alignment="CENTER">
                <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="15.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">

                    <children>
                        <ImageView fitHeight="152.0" fitWidth="251.0" pickOnBounds="true" preserveRatio="true">
                            <Image url="@resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png" />
                        </ImageView>
                        <Text id="welcome-text" fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="Welcome" textAlignment="CENTER">
                            <font>
                                <Font size="36.0" />
                            </font>
                        </Text>
                        <Text id="text" fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="Enter username and password to login" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font size="18.0" />
                            </font>
                        </Text>

                        <Label fx:id="messageLabel" text="" textAlignment="CENTER" wrapText="true" style="-fx-text-fill: red;">
                            <font>
                                <Font size="25.0" />
                            </font>
                        </Label>


                        <TextField fx:id="usernameField" alignment="BOTTOM_LEFT" maxHeight="30.0" maxWidth="325.0" minHeight="30.0" minWidth="200.0" prefHeight="30.0" prefWidth="200.0" promptText=" username">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                            <font>
                                <Font size="15.0" />
                            </font>
                        </TextField>
                        <PasswordField fx:id="passwordField" alignment="BOTTOM_LEFT" maxHeight="30.0" maxWidth="325.0" minHeight="30.0" minWidth="200.0" prefHeight="30.0" prefWidth="200.0" promptText="password">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                            <font>
                                <Font size="15.0" />
                            </font>
                        </PasswordField>
                        <Button mnemonicParsing="false" onAction="#handleLoginButtonAction" prefHeight="30.0" prefWidth="200.0" styleClass="success" text="Login">
                            <font>
                                <Font size="15.0" />
                            </font>
                            <VBox.margin>
                                <Insets top="20.0" />
                            </VBox.margin>
                        </Button>
                        <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="or" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font name="System Bold Italic" size="30.0" />
                            </font>
                        </Text>
                        <Button mnemonicParsing="false" onAction="#handleRegisterButtonAction" prefHeight="30.0" prefWidth="200.0" styleClass="primary" text="Register">
                            <font>
                                <Font size="15.0" />
                            </font>
                            <VBox.margin>
                                <Insets />
                            </VBox.margin>
                        </Button>
                    </children>
                </VBox>
            </AnchorPane>
        </center>
    </BorderPane>
</StackPane>

================
File: src/main/resources/view/register.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?> <!-- Import Label for error messages -->
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<StackPane prefHeight="600.0" prefWidth="800.0" styleClass="root" stylesheets="@resources/css/login.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.RegisterController">
    <BorderPane prefHeight="200.0" prefWidth="200.0">
        <center>
            <AnchorPane styleClass="root" BorderPane.alignment="CENTER">
                <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <children>
                        <ImageView fitHeight="152.0" fitWidth="251.0" pickOnBounds="true" preserveRatio="true">
                            <Image url="@resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png" />
                        </ImageView>
                        <Text id="welcome-text" strokeType="OUTSIDE" strokeWidth="0.0" text="Welcome" textAlignment="CENTER">
                            <font>
                                <Font size="36.0" />
                            </font>
                        </Text>
                        <Text id="text" fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="Enter your details below to create an account:" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font size="18.0" />
                            </font>
                        </Text>

                        <!-- Message Label for displaying errors -->
                        <Label fx:id="messageLabel" text="" textAlignment="CENTER" wrapText="true" style="-fx-text-fill: red;" >
                            <font>
                                <Font size="25.0" />
                            </font>
                        </Label>


                        <TextField fx:id="fullNameField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Name/Surname">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <TextField fx:id="usernameField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Username">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <TextField fx:id="emailField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Email">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <PasswordField fx:id="passwordField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Password">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </PasswordField>
                        <Button maxHeight="30.0" maxWidth="250.0" minHeight="30.0" minWidth="250.0" mnemonicParsing="false" onAction="#handleRegisterButtonAction" prefHeight="30.0" prefWidth="250.0" styleClass="primary" text="Register">
                            <font>
                                <Font size="15.0" />
                            </font>
                            <VBox.margin>
                                <Insets top="20.0" />
                            </VBox.margin>
                        </Button>
                        <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="or" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font name="System Bold Italic" size="30.0" />
                            </font>
                        </Text>
                        <Button mnemonicParsing="false" onAction="#handleLoginButtonAction" prefHeight="32.0" prefWidth="248" text="Log in" />
                    </children>
                </VBox>
            </AnchorPane>
        </center>
    </BorderPane>
</StackPane>

================
File: src/main/resources/view/register.fxml~
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?> <!-- Import Label for error messages -->
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<StackPane prefHeight="600.0" prefWidth="800.0" styleClass="root" stylesheets="@resources/css/login.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.RegisterController">
    <BorderPane prefHeight="200.0" prefWidth="200.0">
        <center>
            <AnchorPane styleClass="root" BorderPane.alignment="CENTER">
                <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                    <children>
                        <ImageView fitHeight="152.0" fitWidth="251.0" pickOnBounds="true" preserveRatio="true">
                            <Image url="@resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png" />
                        </ImageView>
                        <Text id="welcome-text" strokeType="OUTSIDE" strokeWidth="0.0" text="Welcome" textAlignment="CENTER">
                            <font>
                                <Font size="36.0" />
                            </font>
                        </Text>
                        <Text id="text" fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="Enter your details below to create an account:" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font size="18.0" />
                            </font>
                        </Text>

                        <!-- Message Label for displaying errors -->
                        <Label fx:id="messageLabel" text="" textAlignment="CENTER" wrapText="true" style="-fx-text-fill: red;" />

                        <TextField fx:id="fullNameField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Name/Surname">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <TextField fx:id="usernameField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Username">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <TextField fx:id="emailField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Email">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </TextField>
                        <PasswordField fx:id="passwordField" maxHeight="30.0" maxWidth="350.0" minHeight="30.0" minWidth="350.0" prefHeight="30.0" prefWidth="350.0" promptText="Password">
                            <VBox.margin>
                                <Insets top="10.0" />
                            </VBox.margin>
                        </PasswordField>
                        <Button maxHeight="30.0" maxWidth="250.0" minHeight="30.0" minWidth="250.0" mnemonicParsing="false" onAction="#handleRegisterButtonAction" prefHeight="30.0" prefWidth="250.0" styleClass="primary" text="Register">
                            <font>
                                <Font size="15.0" />
                            </font>
                            <VBox.margin>
                                <Insets top="20.0" />
                            </VBox.margin>
                        </Button>
                        <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="or" textAlignment="CENTER" wrappingWidth="500.0">
                            <font>
                                <Font name="System Bold Italic" size="30.0" />
                            </font>
                        </Text>
                        <Button mnemonicParsing="false" onAction="#handleLoginButtonAction" prefHeight="32.0" prefWidth="248" text="Log in" />
                    </children>
                </VBox>
            </AnchorPane>
        </center>
    </BorderPane>
</StackPane>

================
File: src/main/resources/view/resources/css/bootstrap3.css
================
/*Credits: https://github.com/dicolar/jbootx*/
.root {
	-fx-body-color : #F5F5F5;
	-fx-outer-border : #cecece;
}
.button:focused,.button:selected, .toggle-button:focused,
.split-menu-button:focused, .menu-button:focused,
.number-button:focused,
.combo-box:focused .text-field, .choice-box:focused, .color-picker:focused, .date-picker:focused .text-field
{
	-fx-effect: null;
}
.combo-box:focused * {
	-fx-effect: null;
}

.button,.menu-button,.toggle-button,.split-menu-button {
	-fx-font-size: 14;
	-fx-background-radius: 4;
	-fx-border-radius: 4;
	-fx-pref-height: 30;
	-fx-min-width: 30;
}
.button,.menu-button,.split-menu-button,.toggle-button,.number-button {
	-fx-background-insets: 0, 0, -1, 0;
}

.split-menu-button > .label {
	-fx-border-radius: 4 0 0 4;
	-fx-background-radius: 3 0 0 3;
}

.split-menu-button > .arrow-button {
	-fx-border-radius: 0 4 4 0;
	-fx-background-radius: 0 3 3 0;
}

.lg {
	-fx-min-height: 46;
	-fx-max-height: 46;
	-fx-font-size: 18;
	-fx-padding: 0 5;
}

.sm {
	-fx-min-height: 30;
	-fx-max-height: 30;
	-fx-padding: 0 5;
}

.xs {
	-fx-min-height: 22;
	-fx-max-height: 22;
	-fx-font-size: 12;
	-fx-padding: 0 3;
}

.primary .arrow,
.success .arrow,
.info .arrow,
.warning .arrow,
.danger .arrow {
	-fx-background-color: transparent, white;
}

.primary > .label,
.success > .label,
.info > .label,
.warning > .label,
.danger > .label {
	-fx-text-fill: white;
}

.action-btn {
	-fx-min-width: 80;
}

/*positions*/
/*first*/
.button.first, .menu-button.first, .toggle-button.first, .text-field.first, .text-area.first {
	-fx-border-radius: 4 0 0 4;
	-fx-background-radius: 4 0 0 4;
}

.split-menu-button.first > .arrow-button, .split-menu-button.middle > .arrow-button {
	-fx-border-radius: 0;
	-fx-background-radius: 0;
}

VBox > .button.first,
VBox > .menu-button.first,
VBox > .toggle-button.first,
VBox > .split-menu-button.first,
VBox > .text-field.first,
VBox > .text-area.first {
	-fx-border-radius: 4 4 0 0;
	-fx-background-radius: 4 4 0 0;
}

VBox > .split-menu-button.first > .label {
	-fx-border-radius: 4 0 0 0;
	-fx-background-radius: 3 0 0 0;
}
VBox > .split-menu-button.first > .arrow-button {
	-fx-border-radius: 0 4 0 0;
	-fx-background-radius: 0 3 0 0;
}
/*middle*/
.middle {
	-fx-border-radius: 0;
	-fx-background-radius: 0;
}

/*last*/
.split-menu-button.middle > .label, .split-menu-button.last > .label {
	-fx-border-radius: 0;
	-fx-background-radius: 0;
}

.split-menu-button.last {
	-fx-border-radius: 0 4 4 0;
	-fx-background-radius: 0 4 4 0;
}

.button.middle, .text-field.middle, .text-area.middle, .split-menu-button.middle, .toggle-button.middle {
	-fx-border-radius: 0;
	-fx-background-radius: 0;
}

.button.last, .text-field.last, .text-area.last, .split-menu-button.last, .toggle-button.last, .menu-button.last {
	-fx-border-radius: 0 4 4 0;
	-fx-background-radius: 0 4 4 0;
}
VBox > .button.last,
VBox > .menu-button.last,
VBox > .toggle-button.last,
VBox > .split-menu-button.last,
VBox > .text-field.last,
VBox > .text-area.last {
	-fx-border-radius: 0 0 4 4;
	-fx-background-radius: 0 0 4 4;
}

VBox > .split-menu-button.last > .label {
	-fx-border-radius: 0 0 0 4;
	-fx-background-radius: 0 0 0 3;
}
VBox > .split-menu-button.last > .arrow-button {
	-fx-border-radius: 0 0 4 0;
	-fx-background-radius: 0 0 3 0;
}

/*button styles*/

/*default button settings*/

/*bg-color setting*/
.color-picker,.date-picker > .arrow-button,
.number-button,.left-arrow-button,.right-arrow-button,
.button,.split-menu-button,.toggle-button,.menu-button,
.font-menu-button, .split-menu-button > .label, .split-menu-button > .arrow-button {
	-fx-background-color: white;
}

.color-picker,.date-picker > .arrow-button,
.button,.menu-button,.toggle-button,.number-button,.left-arrow-button,.right-arrow-button,
.font-menu-button,
.split-menu-button > .label,.split-menu-button > .arrow-button {
	-fx-border-color: #cccccc;
	-fx-text-fill: #333333;
}
	/*just for the special split menu button*/
.split-menu-button > .label {
	-fx-border-width: 1 0 1 1;
}
	/*for date picker arrow button*/
.date-picker > .arrow-button {
	-fx-border-radius: 0 4 4 0;
}
.combo-box > .arrow-button, .choice-box > .arrow-button {
	-fx-border-width: 0;
}
	/*hover state*/
.color-picker:hover,
.date-picker:hover > .arrow-button,
.combo-box:hover,.choice-box:hover,
.number-button:hover,.left-arrow-button:hover,.right-arrow-button:hover,
.button:hover,.menu-button:hover,.toggle-button:hover,
.font-menu-button:hover,
.split-menu-button > .label:hover, .split-menu-button > .arrow-button:hover {
	-fx-background-color: #e6e6e6;
	-fx-border-color: #acacac;
}
	/*pressed selected*/
.color-picker:pressed,.color-picker:selected,
.number-button:pressed,.number-button:selected,
.date-picker:pressed > .arrow-button,
.combo-box:pressed > .arrow-button,.combo-box:selected > .arrow-button,
.choice-box:pressed > .arrow-button,.choice-box:selected > .arrow-button,
.font-menu-button:pressed,.font-menu-button:selected,
.left-arrow-button:pressed,.left-arrow-button:selected,
.right-arrow-button:pressed,.right-arrow-button:selected,
.button:pressed, .button:selected,.menu-button:pressed,.menu-button:selected
,.toggle-button:pressed,.toggle-button:selected,
.split-menu-button:pressed > .label, .split-menu-button > .arrow-button:pressed {
	-fx-background-color: #e6e6e6;
	-fx-border-color: #acacac;
	-fx-effect: null;
}

	/*primary*/

.button.primary,.split-menu-button.primary,.toggle-button.primary,.menu-button.primary,
.split-menu-button.primary > .label, .split-menu-button.primary > .arrow-button {
	-fx-background-color: #337ab7;
}

.button.primary,.menu-button.primary,.toggle-button.primary,
.split-menu-button.primary > .label,.split-menu-button.primary > .arrow-button {
	-fx-border-color: #2e6da4;
	-fx-text-fill: white;
}
/*hover state*/
.button.primary:hover,.menu-button.primary:hover,.toggle-button.primary:hover,
.split-menu-button.primary > .label:hover, .split-menu-button.primary > .arrow-button:hover {
	-fx-border-color: #204d74;
	-fx-background-color: #286090;
}
/*pressed selected*/
.button.primary:pressed, .button.primary:selected,
.menu-button.primary:pressed,.menu-button.primary:selected
,.toggle-button.primary:pressed,.toggle-button.primary:selected,
.split-menu-button.primary:pressed > .label, .split-menu-button.primary > .arrow-button:pressed {
	-fx-background-color: #286090;
	-fx-border-color: #204d74;
	-fx-effect: null;
}

/*success*/

.button.success,.split-menu-button.success,.toggle-button.success,.menu-button.success,
.split-menu-button.success > .label, .split-menu-button.success > .arrow-button {
	-fx-background-color: #5cb85c;
}

.button.success,.menu-button.success,.toggle-button.success,
.split-menu-button.success > .label,.split-menu-button.success > .arrow-button {
	-fx-border-color: #4cae4c;
	-fx-text-fill: white;
}
/*hover state*/
.button.success:hover,.menu-button.success:hover,.toggle-button.success:hover,
.split-menu-button.success > .label:hover, .split-menu-button.success > .arrow-button:hover {
	-fx-border-color: #398439;
	-fx-background-color: #449d44;
}
/*pressed selected*/
.button.success:pressed, .button.success:selected,
.menu-button.success:pressed,.menu-button.success:selected
,.toggle-button.success:pressed,.toggle-button.success:selected,
.split-menu-button.success:pressed > .label, .split-menu-button.success > .arrow-button:pressed {
	-fx-background-color: #449d44;
	-fx-border-color: #398439;
	-fx-effect: null;
}

/*info*/

.button.info,.split-menu-button.info,.toggle-button.info,.menu-button.info,
.split-menu-button.info > .label, .split-menu-button.info > .arrow-button {
	-fx-background-color: #5bc0de;
}

.button.info,.menu-button.info,.toggle-button.info,
.split-menu-button.info > .label,.split-menu-button.info > .arrow-button {
	-fx-border-color: #46b8da;
	-fx-text-fill: white;
}
/*hover state*/
.button.info:hover,.menu-button.info:hover,.toggle-button.info:hover,
.split-menu-button.info > .label:hover, .split-menu-button.info > .arrow-button:hover {
	-fx-border-color: #269abc;
	-fx-background-color: #31b0d5;
}
/*pressed selected*/
.button.info:pressed, .button.info:selected,
.menu-button.info:pressed,.menu-button.info:selected
,.toggle-button.info:pressed,.toggle-button.info:selected,
.split-menu-button.info:pressed > .label, .split-menu-button.info > .arrow-button:pressed {
	-fx-background-color: #31b0d5;
	-fx-border-color: #269abc;
	-fx-effect: null;
}

/*warning*/

.button.warning,.split-menu-button.warning,.toggle-button.warning,.menu-button.warning,
.split-menu-button.warning > .label, .split-menu-button.warning > .arrow-button {
	-fx-background-color: #f0ad4e;
}

.button.warning,.menu-button.warning,.toggle-button.warning,
.split-menu-button.warning > .label,.split-menu-button.warning > .arrow-button {
	-fx-border-color: #eea236;
	-fx-text-fill: white;
}
/*hover state*/
.button.warning:hover,.menu-button.warning:hover,.toggle-button.warning:hover,
.split-menu-button.warning > .label:hover, .split-menu-button.warning > .arrow-button:hover {
	-fx-border-color: #d58512;
	-fx-background-color: #ec971f;
}
/*pressed selected*/
.button.warning:pressed, .button.warning:selected,
.menu-button.warning:pressed,.menu-button.warning:selected
,.toggle-button.warning:pressed,.toggle-button.warning:selected,
.split-menu-button.warning:pressed > .label, .split-menu-button.warning > .arrow-button:pressed {
	-fx-background-color: #ec971f;
	-fx-border-color: #d58512;
	-fx-effect: null;
}

/*danger*/

.button.danger,.split-menu-button.danger,.toggle-button.danger,.menu-button.danger,
.split-menu-button.danger > .label, .split-menu-button.danger > .arrow-button {
	-fx-background-color: #d9534f;
}

.button.danger,.menu-button.danger,.toggle-button.danger,
.split-menu-button.danger > .label,.split-menu-button.danger > .arrow-button {
	-fx-border-color: #d43f3a;
	-fx-text-fill: white;
}
/*hover state*/
.button.danger:hover,.menu-button.danger:hover,.toggle-button.danger:hover,
.split-menu-button.danger > .label:hover, .split-menu-button.danger > .arrow-button:hover {
	-fx-border-color: #ac2925;
	-fx-background-color: #c9302c;
}
/*pressed selected*/
.button.danger:pressed, .button.danger:selected,
.menu-button.danger:pressed,.menu-button.danger:selected
,.toggle-button.danger:pressed,.toggle-button.danger:selected,
.split-menu-button.danger:pressed > .label, .split-menu-button.danger > .arrow-button:pressed {
	-fx-border-color: #ac2925;
	-fx-background-color: #c9302c;
	-fx-effect: null;
}

.menu-item {
	-fx-min-width: 200;
}

.menu-item:focused {
	-fx-background-color: #f5f5f5;
}

.menu-item:focused > * {
	-fx-text-fill: #262626;
}
.menu-item:focused .arrow {
	-fx-background-color: #333333;
}

.context-menu {
	-fx-border-radius: 4;
	-fx-background-radius: 4;
	-fx-border-color: #bebec0;
}

.context-menu > * {
	-fx-padding: 5 0 5 0;
}

.separator {
	-fx-padding: 5 0 5 0;
}

.text-field {
	-fx-pref-height: 30;
}

.combo-box, .choice-box {
	-fx-background-insets: 0;
	-fx-border-color: #cecece;
	-fx-padding: -1;
	-fx-border-width: 1;
}
.combo-box, .choice-box, .color-picker, .date-picker {
	-fx-border-radius: 4;
	-fx-background-radius: 4;
	-fx-pref-height: 30;
}

.combo-box:editable > .arrow-button {
	-fx-background-color: white;
}

.combo-box:editable > .arrow-button:hover {
	-fx-background-color: #e6e6e6;
}

.combo-box:editable > .arrow-button:pressed {
	-fx-effect: null;
}

.combo-box > .text-input, .date-picker > .text-input {
	-fx-background-radius: 4 0 0 4;
	-fx-border-width: 0;
}

.text-field, .text-area {
	-fx-border-color: #cccccc;
	-fx-background-color: white;
	-fx-border-radius: 4;
	-fx-background-radius: 4;
	-fx-effect: null;
}

.text-field:focused, .text-area:focused {
	-fx-border-color: #66afe9;
	-fx-effect: null;
}

.text-area .scroll-pane, .text-area .scroll-pane .content {
	-fx-background-color: white;
	-fx-background-radius: 4;
}

.tab-pane .tab-header-background {
	-fx-background-color: #f4f4f4;
}
.tab-pane.plain .tab-header-background {
	-fx-background-color: transparent;
}

.tab-pane .tab-header-area .tab {
	-fx-border-radius: 4 4 0 0;
	-fx-background-radius: 5 5 0 0;
	-fx-background-color: transparent;
	-fx-border-color: transparent;
	-fx-padding: 3 10 5 10;
	-fx-background-insets: 0;
}

.tab-pane .tab-header-area .tab .tab-label {
	-fx-text-fill: #337ab7;
}

.tab-pane .tab-header-area .tab:hover {
	-fx-background-color: #eeeeee;
}
.tab-pane .tab-header-area .tab:disabled:hover {
	-fx-background-color: transparent;
}

.tab-pane .tab-header-area .tab:selected {
	-fx-focus-color: transparent;
	-fx-border-color: #dddddd #dddddd white #dddddd;
	-fx-background-color: white;
}
.tab-pane .tab-header-area .tab:selected .tab-label {
	-fx-text-fill: #333333;
}
.tab-pane > .tab-content-area {
	-fx-background-color: white;
}

.tab-pane .tab-header-area .tab .tab-label {
	-fx-focus-color: transparent;
}

.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
	-fx-border-color: transparent;
}

.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button {
	-fx-background-color: #337ab7;
}
.tab-pane > .tab-header-area > .headers-region > .tab:selected > .tab-container > .tab-close-button {
	-fx-background-color: #333333;
}
.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button:hover {
	-fx-background-color: red;
	-fx-cursor: hand;
}

.scroll-bar {
	-fx-background-color: #fafafa;
	-fx-background-radius: 0;
	-fx-block-increment: 50;
}

.corner {
	-fx-background-color: transparent;
}

.scroll-bar .decrement-button, .scroll-bar .decrement-arrow {
	visibility: hidden;
	-fx-pref-height: 1;
	-fx-pref-width: 1;
}

.scroll-bar .increment-button, .scroll-bar .increment-arrow {
	visibility: hidden;
	-fx-pref-height: 1;
	-fx-pref-width: 1;
}

.scroll-bar:vertical {
	-fx-pref-width: 10;
}

.scroll-bar:horizontal {
	-fx-pref-height: 10;
}

.scroll-bar:horizontal .track,
.scroll-bar:vertical .track {
	-fx-background-color: transparent;
	-fx-border-color: transparent;
	-fx-background-radius: 5;
}

.scroll-bar:vertical .track-background,
.scroll-bar:horizontal .track-background {
	-fx-background-color: transparent;
	-fx-background-insets: 0;
	-fx-background-radius: 5;
}

.scroll-bar:horizontal .thumb {
	-fx-background-color: #c9c9c9;
	-fx-background-insets: 2 0 2 0;
	-fx-background-radius: 5;
}

.scroll-bar:vertical .thumb {
	-fx-background-color: #c9c9c9;
	-fx-background-insets: 0 2 0 2;
	-fx-background-radius: 5;
}

.scroll-bar:horizontal .thumb:hover,
.scroll-bar:vertical .thumb:hover {
	-fx-background-color: #b5b5b5;
}

.scroll-bar:horizontal .thumb:pressed,
.scroll-bar:vertical .thumb:pressed {
	-fx-background-color: #a0a0a0;
}

.scroll-bar:vertical .increment-button, .scroll-bar:vertical .decrement-button {
	-fx-background-color: transparent;
	-fx-background-radius: 5;
	-fx-padding: 5;
}

.scroll-bar:horizontal .increment-button, .scroll-bar:horizontal .decrement-button {
	-fx-background-color: transparent;
	-fx-background-radius: 5;
	-fx-padding: 5;
}

.scroll-bar:vertical:focused,
.scroll-bar:horizontal:focused {
	-fx-background-color: transparent, rgb(96, 96, 96), rgb(96, 96, 96);
}

.menu-bar {
	-fx-background-color: white;
}
.menu-bar > .container > .menu-button {
	-fx-background-radius: 0;
	-fx-background-insets: 0;
	-fx-border-width: 0;
	-fx-border-radius: 0;
}
.menu-bar > .container > .menu-button:hover,
.menu-bar > .container > .menu-button:showing {
	-fx-background-color: #56c0e0;
}

.color-palette {
	-fx-background-color: white;
}

.pagination > .pagination-control > .control-box {
	-fx-spacing: -1;
}
.pagination > .pagination-control > .control-box > .left-arrow-button {
	-fx-border-radius: 3 0 0 3;
	-fx-border-insets: 0 0 0 7;
	-fx-background-insets: 0 0 0 7, 0 0 0 5, 1 1 1 6, 2 2 2 7;
}
.pagination > .pagination-control > .control-box > .right-arrow-button {
	-fx-border-radius: 0 3 3 0;
	-fx-border-insets: 0 7 0 0;
	-fx-background-insets: 0 7 -1 0, 0 5 0 0, 1 6 1 1, 2 7 2 2;
}
.pagination > .pagination-control > .control-box > .number-button {
	-fx-background-radius: 0;
	-fx-border-radius: 0;
}

.progress-bar > .track {
	-fx-pref-height: 10;
	-fx-background-radius: 3;
	-fx-effect: innershadow(gaussian, #e4e4e4, 4, 0, 0, 1);
	-fx-background-color: #f5f5f5;
}

.progress-bar > .bar {
	-fx-background-insets: 0;
	-fx-background-color: #337ab7;
}

.progress-bar.success > .bar {
	-fx-background-insets: 0;
	-fx-background-color: #5cb85c;
}

.progress-bar.info > .bar {
	-fx-background-insets: 0;
	-fx-background-color: #5bc0de;
}

.progress-bar.warning > .bar {
	-fx-background-insets: 0;
	-fx-background-color: #f0ad4e
}

.progress-bar.danger > .bar {
	-fx-background-insets: 0;
	-fx-background-color: #d9534f;
}

.tooltip {
	-fx-background: white;
	-fx-text-fill: #333333;
	-fx-background-color: white;
	-fx-background-radius: 4px;
	-fx-border-radius: 4px;
	-fx-border-color: #C0C0C0;
	-fx-background-insets: 0;
	-fx-padding: 0.667em 0.75em 0.667em 0.75em; /* 10px */
	-fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.5), 10, 0.0, 0, 3);
	-fx-font-size: 0.85em;
}

.tooltip.success {
	-fx-background: #dff0d8;
	-fx-background-color: #dff0d8;
	-fx-text-fill: #99bb96;
	-fx-border-color: #d6e9c6;
}

.tooltip.info {
	-fx-background: #d8ecf6;
	-fx-background-color: #d8ecf6;
	-fx-text-fill: #31708f;
	-fx-border-color: #bce8f1;
}

.tooltip.warning {
	-fx-background: #fcf8e3;
	-fx-background-color: #fcf8e3;
	-fx-text-fill: #8a6e3c;
	-fx-border-color: #faebcc;
}

.tooltip.danger {
	-fx-background: #f2dede;
	-fx-background-color: #f2dede;
	-fx-text-fill: #a94442;
	-fx-border-color: #ebccd1;
}

.titled-pane > .title {
	-fx-background-color: #f5f5f5;
	-fx-border-color: #dddddd;
	/*-fx-background-insets: 5, 1, 5;*/
	-fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
	-fx-border-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
	-fx-padding: 11
}

.titled-pane > .content {
	-fx-background-color: white;
	-fx-background-radius: 0 0 4 4;
	-fx-border-radius: 0 0 4 4;
	-fx-border-color: #dddddd;
	/*-fx-padding: -11;*/
}

.titled-pane.primary {
	-fx-text-fill: white;
}

.titled-pane.primary > .title {
	-fx-background-color: #337ab7;
	-fx-border-color: #337ab7;
}

.titled-pane.primary > .content {
	-fx-border-color: #337ab7;
}

.titled-pane.success .arrow,
.titled-pane.info .arrow,
.titled-pane.warning .arrow,
.titled-pane.danger .arrow {
	-fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
}

.titled-pane.success {
	-fx-text-fill: #3c763d;
}

.titled-pane.success > .title {
	-fx-background-color: #dff0d8;
	-fx-border-color: #d6e9c6;
}

.titled-pane.success > .content {
	-fx-border-color: #d6e9c6;
}

.titled-pane.info {
	-fx-text-fill: #31708f;
}

.titled-pane.info > .title {
	-fx-background-color: #d9edf7;
	-fx-border-color: #bce8f1;
}

.titled-pane.info > .content {
	-fx-border-color: #bce8f1;
}

.titled-pane.warning {
	-fx-text-fill: #8a6d3b;
}

.titled-pane.warning > .title {
	-fx-background-color: #fcf8e3;
	-fx-border-color: #faebcc;
}

.titled-pane.warning > .content {
	-fx-border-color: #faebcc;
}

.titled-pane.danger {
	-fx-text-fill: #a94442;
}

.titled-pane.danger > .title {
	-fx-background-color: #f2dede;
	-fx-border-color: #eacbd0;
}

.titled-pane.danger > .content {
	-fx-border-color: #eacbd0;
}

.accordion > .titled-pane > .title,
.accordion > .titled-pane > .content {
	-fx-background-radius: 0;
	-fx-border-radius: 0;
}

.tool-bar:vertical { /* left */
	-fx-border-color: transparent #dddddd transparent transparent;
}

.tool-bar { /* top */
	-fx-background-color: white;
	-fx-border-color: transparent transparent #dddddd transparent;
}

.tool-bar:vertical {
	-fx-background-insets: 0, 0 1 0 0;
}

/*table view columns*/
.filler,.column-header,.show-hide-columns-button {
	-fx-background-color: #dddddd, white, white;
}
.show-hide-columns-button {
	-fx-border-width: 0;
	-fx-background-insets: 0 0 1 1;
}
.column-header:hover,.show-hide-columns-button:hover {
	-fx-background-color: #dddddd, white, #f8f8f8;
}
.column-header-background > .filler {
	-fx-border-color: transparent #dddddd transparent transparent;
	-fx-border-insets: 0 1 0 0;
}
.column-drag-header {
	-fx-background-color: #2fb254;
}

/*split pane*/
.split-pane > .split-pane-divider {
	-fx-background-color: white;
	-fx-border-color: #eeeeee;
	-fx-pref-width: 8;
}
.split-pane:horizontal > .split-pane-divider {
	-fx-background-insets: 0, 0 1 0 1;
	-fx-border-width: 0 1 0 1;
}
/* vertical the two nodes are placed on top of each other. */
.split-pane:vertical > .split-pane-divider {
	-fx-background-insets: 0, 1 0 1 0;
	-fx-border-width: 1 0 1 0;
}
.split-pane > .split-pane-divider:hover {
	-fx-background-color: #E0E0E0;
}

/*******************************************************************************
 *                                                                             *
 * CheckBox                                                                    *
 *                                                                             *
 ******************************************************************************/
.check-box > .box {
	-fx-background-radius: 3;
	/*-fx-padding: 0.166667em 0.166667em 0.25em 0.25em; !* 2 2 3 3 *!*/
	-fx-padding:0;
	-fx-border-color: #56c0e0;
	-fx-border-radius: 3;
	-fx-background-color: white;
}
.check-box > .box > .mark {
	-fx-background-color: null;
	-fx-padding: 0.416667em 0.416667em 0.5em 0.5em; /* 5 5 6 6 */
	-fx-shape: "M927.936 272.992l-68.288-68.288c-12.608-12.576-32.96-12.576-45.536 0l-409.44 409.44-194.752-196.16c-12.576-12.576-32.928-12.576-45.536 0l-68.288 68.288c-12.576 12.608-12.576 32.96 0 45.536l285.568 287.488c12.576 12.576 32.96 12.576 45.536 0l500.736-500.768c12.576-12.544 12.576-32.96 0-45.536z";
	-fx-background-insets: -3 -3 1 0;
}
.check-box {
	-fx-label-padding: 0.2em 0.0em 0.3em 0.416667em; /* 0 0 0 5 */
	-fx-text-fill: -fx-text-background-color;
	-fx-padding: 0 0 2 0;
}
.check-box:indeterminate > .box {
	-fx-padding: 0;
}
.check-box:selected > .box > .mark {
	-fx-background-color: linear-gradient(to bottom, #56c0e0, #40b8dc);
}

/*******************************************************************************
 *                                                                             *
 * RadioButton                                                                 *
 *                                                                             *
 ******************************************************************************/

.radio-button {
	-fx-label-padding: 0.0em 0.0em 0.1em 0.416667em; /* 0 0 0 5 */
	-fx-text-fill: -fx-text-background-color;
	-fx-padding: 0 0 .5 0;
}
.radio-button > .radio,
.radio-button:focused > .radio  {
	-fx-border-color: #56c0e0;
	-fx-border-radius: 1em;
	-fx-background-radius: 1.0em; /* large value to make sure this remains circular */
	-fx-padding: 1 2 3 2;
	-fx-background-color: white;
}
.radio-button > .radio > .dot {
	-fx-background-color: transparent;
	-fx-background-radius: 1.0em; /* large value to make sure this remains circular */
	-fx-padding: 0.333333em; /* 4 -- radius of the inner black dot when selected */
	-fx-background-insets: 3 2 1 2;
}
.radio-button:selected > .radio,.radio-button:hover > .radio {
	-fx-fill-color: #56c0e0;
}
.radio-button:pressed > .radio {
	-fx-background-color: #50c0e2;
}
.radio-button:selected > .radio > .dot {
	-fx-background-color: #56c0e0;
}

/*common things*/
.check-box:hover > .box,
.check-box:selected > .box,
.radio-button:hover > .radio,
.radio-button:selected > .radio {
	-fx-background-color: linear-gradient(to bottom, white, #efefef);
}

.check-box:pressed > .box,
.radio-button:pressed > .radio {
	-fx-background-color: #50c0e2;
}

/*******************************************************************************
 *                                                                             *
 * Slider                                                                      *
 *                                                                             *
 ******************************************************************************/

.slider .thumb {
	-fx-background-color: #dad9da, white, #3fbadf;
	-fx-background-insets: 0, 1, 5;
	-fx-effect: dropshadow(two-pass-box , rgba(0, 0, 0, 0.2), 5, 0.0 , 0, 0);
}
.slider .thumb:hover {
	-fx-effect: dropshadow(two-pass-box , rgba(0, 0, 0, 0.4), 5, 0.0 , 0, 0);
}
.slider .track {
	-fx-background-color: #dad9da, white;
	-fx-background-insets: -1, 0, 1;
	-fx-pref-height: 5;
}
.slider:vertical .track {
	-fx-pref-width: 5;
}

================
File: src/main/resources/view/resources/css/dashboard.css
================
.root, #mainContainer {
    -fx-background-color: #FAF3E0;
}

/*
.root, #mainContainer {
    -fx-background-color: #FAF3E0;
      -fx-background-image: url("../img/brand/realistic-coffee-background-with-drawings_79603-607.jpg");
        -fx-background-size: cover;
        -fx-background-position: bottom;
        -fx-background-repeat: no-repeat;
}
*/

/* General Button Style */
.button {
    -fx-background-color: #6F4E37; /* Coffee accent color */
    -fx-text-fill: #FAF3E0; /* Light text color */
    -fx-padding: 10px 20px;
    -fx-font-size: 15px;
    -fx-font-weight: bold;
    -fx-background-radius: 8;
    -fx-cursor: hand;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 3, 0, 0, 1);
}

/* Hover State for Button */
.button:hover {
    -fx-background-color: #5C432F; /* Slightly darker shade */
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.15), 4, 0, 0, 2);
}

/* Active/Pressed State for Button */
.button:pressed {
    -fx-background-color: #4A3428; /* Darkest coffee shade */
}

/* Logout Button */
.logout-button {
    -fx-background-color: #ff6b6b;
    -fx-text-fill: white;
    -fx-padding: 8px 15px;
    -fx-background-radius: 8;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 3, 0, 0, 1);
}

.logout-button:hover {
    -fx-background-color: #ff5252;
}

.logout-button:pressed {
    -fx-background-color: #d84343;
}

/* Dashboard Cards */
.dashboard-card {
    -fx-background-color: #FFF7E1; /* Light cream background */
    -fx-padding: 20px;
    -fx-background-radius: 12;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.15), 10, 0, 0, 5);
    -fx-text-fill: #6F4E37; /* Coffee-dark text */
}

/* Hover Effect for Cards */
.dashboard-card:hover {
    -fx-background-color: #EFE0C6; /* Slightly darker cream for effect */
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 12, 0, 0, 6);
}

================
File: src/main/resources/view/resources/css/form.css
================
.root {
    -fx-background-color: rgba(249, 249, 249, 0.8);
    -fx-padding: 20;
}

.border-pane {
    -fx-background-color: rgba(255, 255, 255, 0.9);
    -fx-border-color: #e0e0e0;
    -fx-border-width: 1;
    -fx-border-radius: 10;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 10, 0.5, 0, 5);
}

.grid-pane {
    -fx-padding: 20;
}

.heading-text {
    -fx-font-size: 28px;
    -fx-font-weight: bold;
    -fx-text-fill: #333;
    -fx-padding: 20 0 10 0;
}

.label {
    -fx-font-size: 14px;
    -fx-text-fill: #555;
    -fx-padding: 5;
}

.text-field {
    -fx-border-color: #ccc;
    -fx-border-radius: 4;
    -fx-padding: 10;
    -fx-background-color: white;
}
.text-field:focused { -fx-border-color: #007bff; }

/* TextArea styles */
.text-area {
    -fx-border-color: #cccccc; /* Light grey border for text areas */
    -fx-border-radius: 4; /* Rounded corners */
    -fx-padding: 10; /* Padding inside text areas */
    -fx-background-color: #ffffff; /* White background */
}

.text-area:focused {
    -fx-border-color: #007bff; /* Blue border when focused */
}

/* ComboBox styles */
.combo-box {
    -fx-border-color: #cccccc; /* Light grey border for ComboBoxes */
    -fx-border-radius: 4; /* Rounded corners */
    -fx-background-color: #ffffff; /* White background */
}

.combo-box:focused {
    -fx-border-color: #007bff; /* Blue border when focused */
}

/* Button styles */
.button {
-fx-background-color: #007bff;
    -fx-text-fill: white;
    -fx-padding: 10 20;
     -fx-border-radius: 5; /* Modern rounded corners */
 -fx-background-radius: 5;  /* match background with border */

}

.button:hover {
    -fx-background-color: #0056b3;  /* less strong  hover */

}




.button:pressed {

     -fx-background-color: #004085;


}
/* ImageView styles */
.image-view-container {
    -fx-alignment: center; /* Center the image */
}

/* Message Text styles */
.message-text {
    -fx-font-size: 14px; /* Font size for messages */
    -fx-text-fill: #28a745; /* Green color for success messages */
    -fx-padding: 10; /* Padding around the message */
    -fx-opacity: 0; /* Initially hidden */
}

.message-text.visible {
    -fx-opacity: 1; /* Make visible when the product is updated */
}

================
File: src/main/resources/view/resources/css/login.css
================
.root {
    -fx-background-image: url("../img/brand/realistic-coffee-background-with-drawings_79603-607.jpg");
    -fx-background-size: cover;
    -fx-background-position: bottom;
    -fx-background-repeat: no-repeat;
}

.anchor-pane-overlay {
    -fx-background-color: rgba(44, 28, 20, 0.65);
}

#welcome-text {
    -fx-fill: #f4e4d4; /* Lighter, warmer cream color */
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.6), 6, 0, 0, 2),
                innershadow(gaussian, #d4a574, 1, 0, 0, 1); /* Added inner glow */
    -fx-font-weight: bold;
}

.text-field, .password-field {
    -fx-background-color: rgba(255, 255, 255, 0.9);
    -fx-background-radius: 5;
    -fx-border-radius: 5;
    -fx-border-color: #8b5e3c;
    -fx-border-width: 1;
    -fx-text-fill: #2c1c14;
    -fx-prompt-text-fill: #8b5e3c;
}

.text-field:focused, .password-field:focused {
    -fx-border-color: #d4a574;
    -fx-border-width: 2;
}

.button {
    -fx-background-radius: 5;
    -fx-cursor: hand;
    -fx-font-weight: bold;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 6, 0, 0, 3);
    -fx-padding: 8 16;
    -fx-min-width: 200;
    -fx-min-height: 35;
}

.button.success {
    -fx-background-color: linear-gradient(to bottom, #c17f59, #8b5e3c);
    -fx-text-fill: #ffffff;
    -fx-border-color: #d4a574;
    -fx-border-width: 1;
    -fx-border-radius: 5;
}

.button.success:hover {
    -fx-background-color: linear-gradient(to bottom, #d4a574, #c17f59);
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.5), 8, 0, 0, 4);
    -fx-border-color: #e6b788;
}

.button.primary {
    -fx-background-color: linear-gradient(to bottom, #e6b788, #d4a574);
    -fx-text-fill: #2c1c14;
    -fx-border-color: #8b5e3c;
    -fx-border-width: 1;
    -fx-border-radius: 5;
}

.button.primary:hover {
    -fx-background-color: linear-gradient(to bottom, #f0c79c, #e6b788);
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.5), 8, 0, 0, 4);
    -fx-border-color: #c17f59;
}

#text {
     -fx-fill: #f4e4d4; /* Lighter, warmer cream color */
         -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.6), 6, 0, 0, 2),
                     innershadow(gaussian, #d4a574, 1, 0, 0, 1); /* Added inner glow */
         -fx-font-weight: bold;
}

================
File: src/main/resources/view/resources/css/product.css
================
/* Root variables for consistent theming */
* {
    -fx-coffee-primary: #6B4423;
    -fx-text-primary: #2D3436;
    -fx-text-secondary: #636E72;
    -fx-danger: #E74C3C;
    -fx-background-light: #F8F9FA;
}

/* Product Card Container */
.product-card {
    -fx-background-color: white;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.08), 12, 0, 0, 2);
    -fx-background-radius: 12px;
    -fx-padding: 0;
    -fx-pref-width: 300px;
    -fx-spacing: 0;
    -fx-border-color: rgba(0, 0, 0, 0.06);
    -fx-border-radius: 12px;
    -fx-border-width: 1px;
}

.product-card:hover {
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.12), 18, 0, 0, 4);
    -fx-cursor: hand;
    -fx-translate-y: -3px;
}

/* Image Container */
.image-container {
    -fx-background-color: -fx-background-light;
    -fx-padding: 20px;
    -fx-alignment: CENTER;
    -fx-border-radius: 12px 12px 0 0;
}

/* Product Information Section */
.product-info {
    -fx-padding: 20px;
    -fx-spacing: 16px;
    -fx-background-color: white;
    -fx-background-radius: 0 0 12px 12px;
}

/* Product Header */
.product-header {
    -fx-spacing: 6px;
}

.product-name {
    -fx-font-family: "Segoe UI";
    -fx-font-size: 20px;
    -fx-font-weight: bold;
    -fx-fill: #2D3436;  /* Using direct color instead of variable */
    -fx-smooth: always;
}

.product-category {
    -fx-font-family: "Segoe UI";
    -fx-font-size: 14px;
    -fx-fill: #636E72;  /* Using direct color instead of variable */
    -fx-opacity: 0.9;
}

/* Product Details */
.product-details {
    -fx-spacing: 20px;
    -fx-padding: 12px 0;
    -fx-border-color: transparent transparent rgba(0, 0, 0, 0.08) transparent;
    -fx-border-width: 0 0 1px 0;
}

.price-container, .stock-container {
    -fx-spacing: 8px;
    -fx-alignment: CENTER_LEFT;
}

.price-container Text {
    -fx-font-family: "Segoe UI";
    -fx-font-size: 15px;
    -fx-fill: #636E72;  /* Using direct color instead of variable */
}

.stock-container Text {
    -fx-font-family: "Segoe UI";
    -fx-font-size: 15px;
    -fx-fill: #636E72;  /* Using direct color instead of variable */
}

.price-container Text:last-child {
    -fx-font-family: "Segoe UI";
    -fx-font-weight: bold;
    -fx-font-size: 18px;
    -fx-fill: #6B4423;  /* Using direct color instead of variable */
}

/* Action Buttons */
.product-actions {
    -fx-spacing: 10px;
    -fx-padding: 8px 0 0 0;
}

.button {
    -fx-padding: 10px 18px;
    -fx-background-radius: 6px;
    -fx-cursor: hand;
    -fx-font-family: "Segoe UI";
    -fx-font-size: 13px;
    -fx-font-weight: bold;
}

.button.primary {
    -fx-background-color: #6B4423;  /* Using direct color instead of variable */
    -fx-text-fill: white;
}

.button.primary:hover {
    -fx-background-color: derive(#6B4423, -10%);
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 4, 0, 0, 0);
}

.button.secondary {
    -fx-background-color: transparent;
    -fx-text-fill: #6B4423;  /* Using direct color instead of variable */
    -fx-border-color: #6B4423;  /* Using direct color instead of variable */
    -fx-border-width: 1.5px;
    -fx-border-radius: 6px;
}

.button.secondary:hover {
    -fx-background-color: derive(#6B4423, 90%);
}

.button.danger {
    -fx-background-color: transparent;
    -fx-text-fill: #E74C3C;  /* Using direct color instead of variable */
    -fx-border-color: #E74C3C;  /* Using direct color instead of variable */
    -fx-border-width: 1.5px;
    -fx-border-radius: 6px;
}

.button.danger:hover {
    -fx-background-color: derive(#E74C3C, 95%);
}

.button.small {
    -fx-padding: 8px 14px;
    -fx-font-size: 12px;
}

/* Status Styles */
.product-card.disabled {
    -fx-opacity: 0.7;
}

.product-name.unavailable {
    -fx-strikethrough: true;
    -fx-fill: #999999;
}

/* Stock Status Indicators */
.stock-container {
    -fx-padding: 4px 8px;
    -fx-background-radius: 4px;
}

.stock-container.in-stock {
    -fx-background-color: rgba(46, 213, 115, 0.1);
}

.stock-container.low-stock {
    -fx-background-color: rgba(255, 165, 0, 0.1);
}

.stock-container.out-of-stock {
    -fx-background-color: rgba(231, 76, 60, 0.1);
}

/* Image Hover Effect */
.image-container ImageView {
    -fx-transition: all 0.3s ease-in-out;
}

.product-card:hover .image-container ImageView {
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
}

================
File: src/main/resources/view/users/main-dashboard.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.effect.DropShadow?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.paint.Color?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane id="AnchorPane" minHeight="600.0" minWidth="800.0" prefHeight="600.0" prefWidth="800.0" stylesheets="@../resources/css/dashboard.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.UserMainDashboardController">
    <StackPane layoutY="-9.0" prefHeight="800.0" prefWidth="1280.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
            <left>
                <AnchorPane fx:id="acDashBord">
                    <AnchorPane prefWidth="127.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                        <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                            <children>
                                <Button fx:id="btnHome" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnHomeOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Home" />
                                <Button fx:id="btnProducts" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnProductsOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Menu" />
                                <Button fx:id="btnNewOrder" contentDisplay="TOP" mnemonicParsing="false" onAction="#onClickNewOrder" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="New Order" />
                                <Button fx:id="btnOrders" contentDisplay="TOP" mnemonicParsing="false" onAction="#btnOrdersOnClick" prefHeight="78.0" prefWidth="127.0" styleClass="menuButton" text="Orders" />
                            </children>
                        </VBox>
                    </AnchorPane>
                </AnchorPane>
            </left>
            <center>
                <StackPane fx:id="dashContent" prefHeight="150.0" prefWidth="200.0" />
            </center>
            <top>
                <AnchorPane fx:id="dashHead" prefHeight="42.0" prefWidth="753.0" BorderPane.alignment="CENTER">
                    <effect>
                        <DropShadow height="50.0" radius="12.0" spread="0.15" width="0.0">
                            <color>
                                <Color red="0.7368420958518982" green="0.7368420958518982" blue="0.7368420958518982" />
                            </color>
                        </DropShadow>
                    </effect>
                    <GridPane layoutX="14.0" layoutY="-15.0" prefHeight="60.0" prefWidth="751.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                        </rowConstraints>
                        <HBox alignment="CENTER_LEFT" prefHeight="100.0" prefWidth="200.0">
                            <children>
                                <ImageView fitHeight="47.0" fitWidth="45.0" preserveRatio="true">
                                    <image>
                                        <Image url="@../resources/img/brand/pngtree-simple-coffee-shop-logo-png-image_13299684.png" />
                                    </image>
                                </ImageView>
                                <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Coffee Management System" wrappingWidth="228.810546875">
                                    <font>
                                        <Font name="System Italic" size="17.0" />
                                    </font>
                                </Text>
                            </children>
                        </HBox>
                        <AnchorPane prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1">
                        </AnchorPane>
                        <HBox alignment="CENTER_RIGHT" prefHeight="60.0" prefWidth="200.0" GridPane.columnIndex="2">
                            <Label alignment="TOP_RIGHT" text="Hi " textAlignment="RIGHT" />
                            <Label fx:id="lblUsrName" alignment="TOP_RIGHT" textAlignment="RIGHT" />
                            <Button fx:id="lblLogOut" contentDisplay="TOP" layoutY="300.0" mnemonicParsing="false" onAction="#btnLogOutOnClick" styleClass="button, xs, danger" text="Log Out">
                                <HBox.margin>
                                    <Insets left="10.0" right="10.0" />
                                </HBox.margin>
                            </Button>
                        </HBox>
                    </GridPane>
                </AnchorPane>
            </top>
        </BorderPane>
    </StackPane>
</AnchorPane>

================
File: src/main/resources/view/users/pages/home/home.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.chart.CategoryAxis?>
<?import javafx.scene.chart.LineChart?>
<?import javafx.scene.chart.NumberAxis?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.Font?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" prefHeight="600.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/22"
            fx:controller="controller.users.pages.UserHomeController">

    <GridPane AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0"
              AnchorPane.topAnchor="0.0">
        <columnConstraints>
            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0"/>
        </columnConstraints>
        <rowConstraints>
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES"/>
            <RowConstraints minHeight="10.0" prefHeight="300.0" vgrow="ALWAYS"/> <!-- Added for chart row -->
        </rowConstraints>
        <children>
            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.rowIndex="2">
                <children>
                    <Label fx:id="productsCount" alignment="CENTER_RIGHT" text="0">
                        <font>
                            <Font size="50.0"/>
                        </font>
                    </Label>
                    <Label text="Products">
                        <font>
                            <Font size="30.0"/>
                        </font>
                        <HBox.margin>
                            <Insets left="10.0"/>
                        </HBox.margin>
                    </Label>
                </children>
            </HBox>
            <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.columnIndex="1"
                  GridPane.rowIndex="2">
                <children>
                    <Label fx:id="customersCount" alignment="CENTER_RIGHT" text="0">
                        <font>
                            <Font size="50.0"/>
                        </font>
                    </Label>
                    <Label text="Customers">
                        <font>
                            <Font size="30.0"/>
                        </font>
                        <HBox.margin>
                            <Insets left="10.0"/>
                        </HBox.margin>
                    </Label>
                </children>
            </HBox>

            <!-- LineChart for displaying product and users data -->
            <LineChart fx:id="dataChart" GridPane.columnSpan="2" GridPane.rowIndex="4">
                <xAxis>
                    <CategoryAxis label="Category"/>
                </xAxis>
                <yAxis>
                    <NumberAxis label="Count"/>
                </yAxis>
                <padding>
                    <Insets bottom="20.0" left="20.0" right="20.0" top="20.0"/>
                </padding>
            </LineChart>
        </children>
    </GridPane>
</AnchorPane>

================
File: src/main/resources/view/users/pages/orders/newOrder.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.CheckBox?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.Spinner?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1000.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.orders.NewOrderController">
   <children>
      <StackPane prefHeight="100.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="5.0">
               <children>
                  <HBox alignment="CENTER" maxHeight="25.0" minHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text fx:id="emName" strokeType="OUTSIDE" strokeWidth="0.0" text="Employee name:" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="eName" editable="false" />
                     </children>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="25.0" minHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Date:" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="dateField" editable="false" />
                     </children>
                     <VBox.margin>
                        <Insets />
                     </VBox.margin>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="25.0" maxWidth="1000.0" minHeight="25.0" minWidth="400.0" prefHeight="25.0" prefWidth="672.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Customer Name:" textAlignment="CENTER" wrappingWidth="120.0">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <TextField fx:id="customerNameField" editable="false">
                           <HBox.margin>
                              <Insets right="10.0" />
                           </HBox.margin>
                        </TextField>
                        <Button mnemonicParsing="false" text="Add new customer">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                     </children>
                  </HBox>
                  <HBox alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table Number:">
                           <font>
                              <Font size="15.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="12.0" />
                           </HBox.margin>
                        </Text>
                        <ComboBox fx:id="tableComboBox" maxHeight="25.0" maxWidth="100.0" minHeight="25.0" minWidth="100.0" prefHeight="25.0" prefWidth="150.0" promptText="Table">
                           <HBox.margin>
                              <Insets right="10.0" />
                           </HBox.margin></ComboBox>
                        <CheckBox fx:id="checkTakeAway" mnemonicParsing="false" text="Take Away">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </CheckBox>
                     </children>
                  </HBox>
                  <HBox fx:id="couponHBox" alignment="CENTER" maxHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="couponField" maxHeight="25.0" maxWidth="300.0" minHeight="25.0" minWidth="300.0" prefHeight="25.0" prefWidth="300.0" promptText="coupon id">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button fx:id="checkCouponBtn" mnemonicParsing="false" onAction="#checkCoupon" text="check coupon">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                        <Button fx:id="resetCouponBtn" layoutX="514.0" layoutY="15.0" mnemonicParsing="false" onAction="#resetCoupon" text="reset">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Button>
                     </children>
                     <VBox.margin>
                        <Insets bottom="5.0" />
                     </VBox.margin>
                  </HBox>
                  <HBox fx:id="searchHBox" alignment="CENTER" maxHeight="25.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="searchField" maxHeight="25.0" maxWidth="300.0" minHeight="25.0" minWidth="300.0" prefHeight="25.0" prefWidth="200.0" promptText="search product name to add">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button mnemonicParsing="false" onAction="#onClickSearch" text="search">
                           <font>
                              <Font size="13.0" />
                           </font>
                        </Button>
                     </children>
                  </HBox>
                  <HBox fx:id="productHBox" alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <TextField fx:id="idField" editable="false" maxHeight="25.0" maxWidth="50.0" minHeight="25.0" promptText="id">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                           <font>
                              <Font size="13.0" />
                           </font>
                        </TextField>
                        <TextField fx:id="productNameField" editable="false" maxHeight="25.0" maxWidth="200.0" minHeight="25.0" promptText="product name">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                           <font>
                              <Font size="13.0" />
                           </font>
                        </TextField>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Quantity:">
                           <font>
                              <Font size="15.0" />
                           </font>
                        </Text>
                        <Spinner fx:id="quantitySpinner" editable="true" maxHeight="20.0" maxWidth="80.0" minHeight="20.0" minWidth="80.0">
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Spinner>
                        <Text layoutX="428.0" layoutY="31.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Total:">
                           <font>
                              <Font size="15.0" />
                           </font>
                        </Text>
                        <TextField fx:id="totalField" editable="false" maxHeight="25.0" maxWidth="150.0" minHeight="25.0" promptText="total">
                           <font>
                              <Font size="13.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </TextField>
                        <Button fx:id="addBtn" mnemonicParsing="false" onAction="#addBtnClick" text="Add to order" />
                     </children>
                     <VBox.margin>
                        <Insets bottom="5.0" />
                     </VBox.margin>
                  </HBox>
                  <TableView fx:id="orderDetailView" maxHeight="800.0" minHeight="300.0" prefHeight="200.0" prefWidth="200.0" style="-fx-border-color: black;">
                    <columns>
                      <TableColumn fx:id="nameColumn" editable="false" prefWidth="240.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Name" />
                        <TableColumn fx:id="categoryColumn" editable="false" minWidth="0.0" prefWidth="140.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Categories" />
                        <TableColumn fx:id="priceColumn" editable="false" minWidth="0.0" prefWidth="100.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Price" />
                      <TableColumn fx:id="quantityColumn" editable="false" minWidth="0.0" prefWidth="100.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Quantity" />
                        <TableColumn fx:id="totalColumn" editable="false" minWidth="0.0" prefWidth="120.0" style="-fx-border-width: 0 1px 1px 0; -fx-border-color: black;" text="Total" />
                    </columns>
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" />
                     </VBox.margin>
                  </TableView>
                  <HBox fx:id="paymentHBox" alignment="CENTER" maxHeight="30.0" prefHeight="100.0" prefWidth="200.0">
                     <children>
                        <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Total:" underline="true">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="totalText" strikethrough="true" strokeType="OUTSIDE" strokeWidth="0.0" text="total">
                           <font>
                              <Font size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="5.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="finalText" layoutX="517.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="final">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                           <HBox.margin>
                              <Insets right="7.0" />
                           </HBox.margin>
                        </Text>
                        <Text fx:id="discountText" fill="#03ff00" strokeType="OUTSIDE" strokeWidth="0.0" text="discount">
                           <font>
                              <Font name="System Bold" size="20.0" />
                           </font>
                        </Text>
                     </children>
                  </HBox>
                  <Button fx:id="createOrderBtn" mnemonicParsing="false" onAction="#createClick" text="Create Order">
                     <VBox.margin>
                        <Insets top="10.0" />
                     </VBox.margin>
                     <font>
                        <Font size="15.0" />
                     </font>
                  </Button>
               </children>
               <StackPane.margin>
                  <Insets />
               </StackPane.margin>
            </VBox>
            <ListView fx:id="suggestionList" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="100.0" prefWidth="350.0" translateX="-45.0" translateY="-70.0" />
         </children>
      </StackPane>
   </children>
</AnchorPane>

================
File: src/main/resources/view/users/pages/orders/orders.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.orders.UserOrdersController">

    <BorderPane layoutX="238.0" layoutY="136.0" prefHeight="521.0" prefWidth="743.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <padding>
            <Insets left="30.0" right="30.0" />
        </padding>
        <top>
            <GridPane>
                <columnConstraints>
                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                    <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                </columnConstraints>
                <rowConstraints>
                    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                </rowConstraints>
                <children>
                    <AnchorPane prefHeight="200.0" prefWidth="200.0">
                        <children>
                            <TextField fx:id="searchField" layoutX="1.0" layoutY="2.0" prefHeight="25.0" prefWidth="291.0" promptText="search orders" />
                     <ComboBox fx:id="searchComboBox" layoutX="305.0" layoutY="4.0" maxWidth="600.0" minWidth="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="3.0" AnchorPane.leftAnchor="305.0" AnchorPane.rightAnchor="155.0" AnchorPane.topAnchor="2.0" />
                        </children>
                    </AnchorPane>
                </children>
                <BorderPane.margin>
                    <Insets top="20.0" />
                </BorderPane.margin>
            </GridPane>
        </top>
        <center>
            <TableView fx:id="tableOrdersPage" editable="true" prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
                <columns>
                    <TableColumn fx:id="idColumn" prefWidth="124.0" text="Order ID">
                        <cellValueFactory>
                            <PropertyValueFactory property="product_name" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="paidColumn" prefWidth="167.0" text="Paid">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_price" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="dateColumn" prefWidth="114.0" text="Order Date">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_date" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="employeeColumn" prefWidth="236.0" text="Employee Name">
                        <cellValueFactory>
                            <PropertyValueFactory property="order_status" />
                        </cellValueFactory>
                    </TableColumn>
                    <TableColumn fx:id="couponColumn" prefWidth="147.0" text="Coupon discount">
                        <cellValueFactory>
                            <PropertyValueFactory property="user_full_name" />
                        </cellValueFactory>
                    </TableColumn>
               <TableColumn fx:id="tableColumn" prefWidth="141.0" text="Table" />
               <TableColumn fx:id="customerColumn" prefWidth="293.0" text="Customer Name" />
                </columns>
                <columnResizePolicy>
                    <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
                </columnResizePolicy>
                <BorderPane.margin>
                    <Insets top="10.0" />
                </BorderPane.margin>
            </TableView>
        </center>
        <bottom>
            <HBox alignment="CENTER_RIGHT" prefHeight="100.0" prefWidth="200.0" spacing="10.0" BorderPane.alignment="CENTER">
            </HBox>
        </bottom>
    </BorderPane>

</AnchorPane>

================
File: src/main/resources/view/users/pages/orders/viewOrder.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1000.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.orders.ViewOrderController">
   <children>
      <HBox alignment="CENTER_LEFT" maxHeight="30.0" minHeight="30.0" prefHeight="30.0" prefWidth="1000.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <Button fx:id="backToOrderBtn" mnemonicParsing="false" onAction="#toOrder" text="Back to Order">
               <HBox.margin>
                  <Insets left="10.0" top="10.0" />
               </HBox.margin></Button>
         </children>
      </HBox>
      <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="30.0">
         <children>
            <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Order Detail">
               <font>
                  <Font size="20.0" />
               </font>
               <VBox.margin>
                  <Insets bottom="10.0" />
               </VBox.margin>
            </Text>
            <HBox prefHeight="100.0" prefWidth="200.0">
               <children>
                  <VBox prefHeight="100.0" prefWidth="331.0">
                     <children>
                        <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Employee Name:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="employeeField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Customer Name: " wrappingWidth="120.078125">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="customerField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="60.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Order id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="orderIdField" editable="false" />
                           </children>
                        </HBox>
                     </children>
                  </VBox>
                  <VBox layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="331.0">
                     <children>
                        <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="tableIdField" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="10.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Table capacity:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="tableCapacity" editable="false" />
                           </children>
                        </HBox>
                        <HBox alignment="CENTER" layoutX="10.0" layoutY="60.0" prefHeight="100.0" prefWidth="200.0">
                           <children>
                              <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Coupon id:" wrappingWidth="120.0">
                                 <font>
                                    <Font size="15.0" />
                                 </font>
                                 <HBox.margin>
                                    <Insets right="5.0" />
                                 </HBox.margin>
                              </Text>
                              <TextField fx:id="couponIdField" editable="false" />
                           </children>
                        </HBox>
                     </children>
                  </VBox>
               </children>
            </HBox>
            <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Product List">
               <font>
                  <Font size="15.0" />
               </font>
               <VBox.margin>
                  <Insets top="10.0" />
               </VBox.margin>
            </Text>
            <TableView fx:id="productTable" prefHeight="247.0" prefWidth="600.0">
              <columns>
                <TableColumn fx:id="idColumn" prefWidth="122.0" text="id" />
                <TableColumn fx:id="nameColumn" prefWidth="166.0" text="name" />
                  <TableColumn fx:id="categoryColumn" prefWidth="135.0" text="category" />
                  <TableColumn fx:id="priceColumn" prefWidth="145.0" text="price " />
                  <TableColumn fx:id="quantityColumn" prefWidth="183.0" text="quantity" />
                  <TableColumn fx:id="totalColumn" prefWidth="211.0" text="total" />
              </columns>
            </TableView>
            <HBox alignment="CENTER" maxHeight="30.0" minHeight="30.0" prefHeight="100.0" prefWidth="200.0">
               <children>
                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Total:">
                     <font>
                        <Font size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="totalText" layoutX="392.0" layoutY="34.0" strikethrough="true" strokeType="OUTSIDE" strokeWidth="0.0" text="total">
                     <font>
                        <Font size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="finalText" layoutX="410.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="final">
                     <font>
                        <Font name="System Bold" size="20.0" />
                     </font>
                     <HBox.margin>
                        <Insets right="5.0" />
                     </HBox.margin>
                  </Text>
                  <Text fx:id="discountText" fill="#05bc24" layoutX="441.0" layoutY="34.0" strokeType="OUTSIDE" strokeWidth="0.0" text="discount">
                     <font>
                        <Font size="20.0" />
                     </font>
                  </Text>
               </children>
            </HBox>
         </children>
      </VBox>
   </children>
</AnchorPane>

================
File: src/main/resources/view/users/pages/products/add-product.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>  <!-- Import VBox -->
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" styleClass="root" stylesheets="@../../../resources/css/form.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.products.AddProductController">
    <children>
        <VBox alignment="CENTER" spacing="20" AnchorPane.leftAnchor="0" AnchorPane.rightAnchor="0" AnchorPane.topAnchor="0" AnchorPane.bottomAnchor="0">
            <Text strokeType="OUTSIDE" strokeWidth="0.0" styleClass="heading-text" text="Add new product" />

            <BorderPane styleClass="border-pane" VBox.vgrow="ALWAYS">
                <center>
                    <GridPane styleClass="grid-pane" alignment="CENTER" hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" />
                            <ColumnConstraints hgrow="SOMETIMES" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />

                        </rowConstraints>



                        <Label styleClass="label" text="Product Name" />
                        <TextField fx:id="fieldAddProductName" styleClass="text-field" promptText="product name" GridPane.columnIndex="1"/>



                        <Label styleClass="label" text="Product Price" GridPane.rowIndex="1" />
                        <TextField fx:id="fieldAddProductPrice" styleClass="text-field" promptText="0.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label styleClass="label" text="Product Stock" GridPane.rowIndex="2" />
                        <TextField fx:id="fieldAddProductQuantity" styleClass="text-field" promptText="0" GridPane.columnIndex="1" GridPane.rowIndex="2" />


                        <Label styleClass="label" text="Product Category" GridPane.rowIndex="3"/>
                        <ComboBox fx:id="fieldAddProductCategoryId" styleClass="combo-box" GridPane.columnIndex="1" GridPane.rowIndex="3" />


                        <Label styleClass="label" text="Description" GridPane.rowIndex="4" GridPane.columnSpan="2"/>
                        <TextArea fx:id="fieldAddProductDescription" styleClass="text-area" prefHeight="200.0" prefWidth="522.0" promptText="description here" GridPane.rowIndex="5" GridPane.columnSpan="2"  />




                        <HBox spacing="20" alignment="CENTER_LEFT" GridPane.rowIndex="6" GridPane.columnIndex="0" GridPane.columnSpan="2">

                            <VBox alignment="CENTER" spacing="10" styleClass="image-view-container" >


                                <ImageView fx:id="productImageView" fitHeight="200" fitWidth="200" preserveRatio="true"/>

                                <Button fx:id="selectImageButton" layoutX="106.0" layoutY="481.0" mnemonicParsing="false" onAction="#selectImage"  styleClass="button"  text="Select Image" />

                            </VBox>



                        </HBox>





                        <Button mnemonicParsing="false" onAction="#btnAddProductOnAction"  styleClass="button success" text="Add Product"  GridPane.columnIndex="1" GridPane.rowIndex="7" GridPane.halignment="RIGHT" />


                        <Text fx:id="viewProductResponse" styleClass="message-text" strokeType="OUTSIDE" strokeWidth="0.0" text="Product updated!" visible="false"  GridPane.columnIndex="0" GridPane.rowIndex="7"   />

                    </GridPane>

                </center>


            </BorderPane>






        </VBox>




    </children>

</AnchorPane>

================
File: src/main/resources/view/users/pages/products/categories.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<AnchorPane prefHeight="600.0" prefWidth="800.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.products.CategoryController">
    <BorderPane>
        <top>
            <VBox spacing="10.0">
                <padding>
                    <Insets top="20.0" right="20.0" bottom="20.0" left="20.0" /> <!-- Correct Padding -->
                </padding>
                <Label text="Manage Categories" style="-fx-font-size: 24px; -fx-font-weight: bold;" />
            </VBox>
        </top>

        <center>
            <VBox spacing="15">
                <padding>
                    <Insets top="20.0" right="20.0" bottom="20.0" left="20.0" /> <!-- Correct Padding -->
                </padding>
                <!-- TableView for displaying categories -->
                <TableView fx:id="categoriesTable" prefHeight="300.0" prefWidth="760.0">
                    <columns>
                        <TableColumn fx:id="categoryIdColumn" text="Category ID" prefWidth="200.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="id" />
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn fx:id="categoryNameColumn" text="Category Name" prefWidth="300.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="name" />
                            </cellValueFactory>
                        </TableColumn>
                        <TableColumn fx:id="descriptionColumn" text="Description" prefWidth="260.0">
                            <cellValueFactory>
                                <PropertyValueFactory property="description" />
                            </cellValueFactory>
                        </TableColumn>

                    </columns>
                </TableView>

                <!-- Form for Add/Edit -->
                <GridPane hgap="10.0" vgap="10.0" alignment="CENTER_LEFT">
                    <Label text="Category Name:" />
                    <TextField fx:id="fieldCategoryName" GridPane.columnIndex="1" promptText="Enter category name" />
                    <Label text="Description:" GridPane.rowIndex="1" />
                    <TextField fx:id="fieldCategoryDescription" GridPane.columnIndex="1" GridPane.rowIndex="1" promptText="Enter category description" />
                </GridPane>

                <!-- Action Buttons -->
                <HBox spacing="10.0" alignment="CENTER">
                    <Button text="Add" onAction="#btnAddCategoryOnClick" styleClass="button,success,sm" />
                    <Button text="Edit" onAction="#btnEditCategoryOnClick" styleClass="button,warning,sm" />
                    <Button text="Delete" onAction="#btnDeleteCategoryOnClick" styleClass="button,danger,sm" />
                </HBox>
            </VBox>
        </center>
    </BorderPane>
</AnchorPane>

================
File: src/main/resources/view/users/pages/products/edit-product.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>

<AnchorPane prefHeight="800.0" prefWidth="1280.0" styleClass="root" stylesheets="@../../../resources/css/form.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.products.EditProductController">

    <children>
        <VBox alignment="CENTER" spacing="20" AnchorPane.bottomAnchor="0" AnchorPane.leftAnchor="0" AnchorPane.rightAnchor="0" AnchorPane.topAnchor="0">
            <Text fx:id="viewProductName" styleClass="heading-text" text="Edit product" />

            <BorderPane styleClass="border-pane" VBox.vgrow="ALWAYS">
                <center>
                    <GridPane fx:id="formEditProductView" alignment="CENTER" hgap="10" styleClass="grid-pane" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" />
                            <ColumnConstraints hgrow="SOMETIMES" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints vgrow="SOMETIMES" />
                            <RowConstraints />
                        </rowConstraints>

                        <Label styleClass="label" text="Product Name" />
                        <TextField fx:id="fieldEditProductName" promptText="product name" styleClass="text-field" GridPane.columnIndex="1" />

                        <Label styleClass="label" text="Product Price" GridPane.rowIndex="1" />
                        <TextField fx:id="fieldEditProductPrice" promptText="0.0" styleClass="text-field" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <TextField fx:id="fieldEditProductId" visible="false" />

                        <Label styleClass="label" text="Product Stock" GridPane.rowIndex="2" />
                        <TextField fx:id="fieldEditProductQuantity" promptText="0" styleClass="text-field" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label styleClass="label" text="Product Category" GridPane.rowIndex="3" />
                        <ComboBox fx:id="fieldEditProductCategoryId" styleClass="combo-box" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                        <Label styleClass="label" text="Description" GridPane.columnSpan="2" GridPane.rowIndex="4" />
                        <TextArea fx:id="fieldEditProductDescription" prefHeight="200.0" prefWidth="522.0" promptText="product description" styleClass="text-area" GridPane.columnSpan="2" GridPane.rowIndex="5" />

                        <HBox alignment="CENTER_LEFT" spacing="20" GridPane.columnIndex="0" GridPane.columnSpan="2" GridPane.rowIndex="6">  <!-- Align left and span 2 columns -->
                            <VBox alignment="CENTER" spacing="10" styleClass="image-view-container">
                                <ImageView fx:id="productImageView" fitHeight="249.0" fitWidth="235.0" preserveRatio="true" />
                            </VBox>
                            <Button fx:id="selectImageButton" onAction="#selectImage" styleClass="button" text="Select Image" />
                        </HBox>

                        <Button mnemonicParsing="false" onAction="#btnEditProductOnAction" styleClass="button primary" text="Edit Product" GridPane.columnIndex="1" GridPane.halignment="RIGHT" GridPane.rowIndex="7" /> <!-- Bottom right -->
                        <Text fx:id="viewProductResponse" strokeType="OUTSIDE" strokeWidth="0.0" styleClass="message-text" text="Product updated!" visible="false" GridPane.columnIndex="0" GridPane.rowIndex="7" />

                    </GridPane>
                </center>
            </BorderPane>
        </VBox>
    </children>
</AnchorPane>

================
File: src/main/resources/view/users/pages/products/product-card.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>

<VBox styleClass="product-card, clickable-card" stylesheets="@../../../resources/css/product.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1">
    <StackPane styleClass="image-container">
        <ImageView fx:id="productImage" fitHeight="250.0" fitWidth="250.0">
            <preserveRatio>true</preserveRatio>
        </ImageView>
    </StackPane>
    <VBox styleClass="product-info">
        <VBox styleClass="product-header">
            <Text fx:id="productName" styleClass="product-name" />
            <Text fx:id="productCategory" styleClass="product-category" />
        </VBox>
        <HBox styleClass="product-details">
            <HBox styleClass="price-container">
                <Text text="Price:" />
                <Text fx:id="productPrice"/>
            </HBox>
            <HBox styleClass="stock-container">
                <Text fx:id="productStock"/>
            </HBox>
        </HBox>
        <HBox styleClass="product-actions">
            <Button fx:id="editButton" mnemonicParsing="false" styleClass="button primary small" text="Edit" />
<!--            <Button fx:id="deleteButton" mnemonicParsing="false" styleClass="button danger small" text="Delete" />-->
            <Button fx:id="toggleStatusButton" mnemonicParsing="false" styleClass="button secondary small" text="Toggle Status" />
        </HBox>
    </VBox>
</VBox>

================
File: src/main/resources/view/users/pages/products/products.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.effect.Reflection?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<?import javafx.scene.control.TableView?>
<AnchorPane prefHeight="800.0" prefWidth="1280.0" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.users.pages.products.ProductsController">
    <StackPane fx:id="productsContent" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <BorderPane styleClass="products-page">
            <padding>
                <Insets left="30.0" right="30.0" />
            </padding>
            <top>
                <VBox spacing="20">
                    <padding>
                        <Insets bottom="20.0" top="20.0" />
                    </padding>
                    <Text fontSmoothingType="LCD" styleClass="page-title" text="Menu">
                        <font>
                            <Font name="SansSerif Bold Italic" size="43.0" />
                        </font>
                        <effect>
                            <Reflection fraction="0.66" topOpacity="0.19" />
                        </effect>
                    </Text>
                    <GridPane alignment="CENTER_RIGHT">
                        <columnConstraints>
                            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                            <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
                        </rowConstraints>
                        <AnchorPane prefHeight="200.0" prefWidth="200.0">
                            <TextField fx:id="fieldProductsSearch" layoutX="1.0" layoutY="2.0" prefHeight="25.0" prefWidth="291.0" promptText="Search coffee..." styleClass="search-field" />
                            <Button layoutX="300.0" layoutY="2.0" mnemonicParsing="false" onAction="#btnProductsSearchOnAction" prefHeight="26.0" styleClass="button,info,sm" text="Search" />
                        </AnchorPane>
                        <HBox spacing="10" alignment="CENTER_RIGHT" GridPane.columnIndex="1">
                            <Button mnemonicParsing="false" onAction="#btnAddProductOnClick" prefHeight="26.0" styleClass="button,success,sm" text="Add New Coffee" />
                            <Button mnemonicParsing="false" onAction="#btnManageCategoryOnClick" prefHeight="26.0" styleClass="button,info,sm" text="Manage Category" />
                        </HBox>
                    </GridPane>
                </VBox>
            </top>
            <center>
                <ScrollPane fitToWidth="true" styleClass="products-scroll">
                    <FlowPane fx:id="productsContainer" hgap="20" styleClass="products-grid" vgap="20">
                        <padding>
                            <Insets bottom="20" left="20" right="20" top="20" />
                        </padding>
                        <!-- Add TableView Here -->
                        <TableView fx:id="tableProductsPage">
                            <columns>
                                <!-- Define your TableColumn items here -->
                            </columns>
                        </TableView>
                    </FlowPane>
                </ScrollPane>
            </center>


        </BorderPane>
    </StackPane>
</AnchorPane>
